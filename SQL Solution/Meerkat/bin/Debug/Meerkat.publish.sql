/*
Deployment script for Meerkat

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Meerkat"
:setvar DefaultFilePrefix "Meerkat"
:setvar DefaultDataPath "C:\MSSQL\Data\"
:setvar DefaultLogPath "C:\MSSQL\Log\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Latin1_General_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [MNEReports]...';


GO
CREATE USER [MNEReports] FOR LOGIN [MNEReports];


GO
REVOKE CONNECT TO [MNEReports];


GO
PRINT N'Creating [PWLAB\mneAdmin]...';


GO
CREATE USER [PWLAB\mneAdmin] FOR LOGIN [PWLAB\mneAdmin];


GO
REVOKE CONNECT TO [PWLAB\mneAdmin];


GO
PRINT N'Creating [PWLAB\mneMeerkatAdmin]...';


GO
CREATE USER [PWLAB\mneMeerkatAdmin] FOR LOGIN [PWLAB\mneMeerkatAdmin];


GO
REVOKE CONNECT TO [PWLAB\mneMeerkatAdmin];


GO
PRINT N'Creating [PWLAB\mneSPFInstall]...';


GO
CREATE USER [PWLAB\mneSPFInstall] FOR LOGIN [PWLAB\mneSPFInstall];


GO
REVOKE CONNECT TO [PWLAB\mneSPFInstall];


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_datareader', @membername = N'MNEReports';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'PWLAB\mneMeerkatAdmin';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'PWLAB\mneSPFInstall';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'PWLAB\mneAdmin';


GO
PRINT N'Creating <unnamed>...';


GO
EXECUTE sp_addrolemember @rolename = N'db_owner', @membername = N'MNEReports';


GO
PRINT N'Creating [app]...';


GO
CREATE SCHEMA [app]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Cmn]...';


GO
CREATE SCHEMA [Cmn]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Core]...';


GO
CREATE SCHEMA [Core]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Extract]...';


GO
CREATE SCHEMA [Extract]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [mm]...';


GO
CREATE SCHEMA [mm]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [MnE]...';


GO
CREATE SCHEMA [MnE]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [POA]...';


GO
CREATE SCHEMA [POA]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [RBM]...';


GO
CREATE SCHEMA [RBM]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [app].[Project]...';


GO
CREATE TABLE [app].[Project] (
    [ProjectID]       INT            IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (255)  NOT NULL,
    [ShortName]       NVARCHAR (255) NOT NULL,
    [LongName]        VARCHAR (255)  NOT NULL,
    [TextDescription] VARCHAR (MAX)  NOT NULL,
    [ProjectParentID] INT            NULL,
    [OutcomeID]       INT            NOT NULL,
    [Active]          INT            NOT NULL,
    [sys_CreatedBy]   VARCHAR (255)  NOT NULL,
    [sys_CreatedOn]   DATETIME       NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255)  NOT NULL,
    [sys_ModifiedOn]  DATETIME       NOT NULL,
    CONSTRAINT [PK_Project] PRIMARY KEY CLUSTERED ([ProjectID] ASC)
);


GO
PRINT N'Creating [app].[Output]...';


GO
CREATE TABLE [app].[Output] (
    [Output_ID]       INT            IDENTITY (1, 1) NOT NULL,
    [Code]            NVARCHAR (20)  NOT NULL,
    [LongName]        NVARCHAR (500) NOT NULL,
    [BusinessKey]     NVARCHAR (MAX) NULL,
    [OutcomeID]       INT            NULL,
    [ShortName]       VARCHAR (50)   NOT NULL,
    [TextDescription] VARCHAR (MAX)  NULL,
    [Active]          INT            NOT NULL,
    [sys_CreatedBy]   VARCHAR (255)  NOT NULL,
    [sys_CreatedOn]   DATETIME       NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255)  NOT NULL,
    [sys_ModifiedOn]  DATETIME       NOT NULL,
    CONSTRAINT [PK_Output_] PRIMARY KEY CLUSTERED ([Output_ID] ASC)
);


GO
PRINT N'Creating [app].[Status]...';


GO
CREATE TABLE [app].[Status] (
    [StatusID]        INT              IDENTITY (1, 1) NOT NULL,
    [LongName]        VARCHAR (500)    NOT NULL,
    [TextDescription] VARCHAR (MAX)    NULL,
    [Output_ID]       INT              NULL,
    [OutcomeID]       INT              NULL,
    [IndicatorID]     INT              NULL,
    [Activity_ID]     INT              NULL,
    [SubOutput_ID]    INT              NULL,
    [ProjectID]       INT              NULL,
    [PeriodID]        INT              NULL,
    [Sharepoint_ID]   UNIQUEIDENTIFIER NULL,
    [Percentage]      DECIMAL (20, 5)  NULL,
    [RobotIndicator]  INT              NULL,
    [BusinessKey]     NVARCHAR (MAX)   NULL,
    [Notes]           NVARCHAR (MAX)   NULL,
    [Code]            NVARCHAR (20)    NOT NULL,
    [Active]          INT              NOT NULL,
    [sys_CreatedBy]   VARCHAR (255)    NOT NULL,
    [sys_CreatedOn]   DATETIME         NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255)    NOT NULL,
    [sys_ModifiedOn]  DATETIME         NOT NULL,
    CONSTRAINT [PK_Status] PRIMARY KEY CLUSTERED ([StatusID] ASC)
);


GO
PRINT N'Creating [app].[Milestone]...';


GO
CREATE TABLE [app].[Milestone] (
    [MilestoneID]     INT             IDENTITY (1, 1) NOT NULL,
    [LongName]        VARCHAR (500)   NOT NULL,
    [TextDescription] VARCHAR (MAX)   NULL,
    [Baseline]        DECIMAL (20, 5) NULL,
    [BaselineString]  VARCHAR (MAX)   NULL,
    [BaselineDate]    DATETIME        NOT NULL,
    [Target]          DECIMAL (20, 5) NULL,
    [TargetString]    VARCHAR (MAX)   NULL,
    [TargetDate]      DATETIME        NOT NULL,
    [ReleaseDate]     DATE            NULL,
    [ReportingDate]   DATE            NULL,
    [ProjectID]       INT             NULL,
    [OutcomeID]       INT             NULL,
    [BusinessKey]     NVARCHAR (MAX)  NULL,
    [Notes]           NVARCHAR (MAX)  NULL,
    [Code]            NVARCHAR (20)   NOT NULL,
    [MilestoneTypeID] INT             NOT NULL,
    [ActivityID]      INT             NULL,
    [ShortName]       VARCHAR (50)    NOT NULL,
    [BaselineDateID]  AS              ((datepart(year, [BaselineDate]) * (10000) + datepart(month, [baselineDate]) * (100)) + datepart(day, [BaselineDate])),
    [TargetDateID]    AS              ((datepart(year, [TargetDate]) * (10000) + datepart(month, [TargetDate]) * (100)) + datepart(day, [TargetDate])),
    [IsKeyIndicator]  BIT             NOT NULL,
    [UnitOfMeasure]   VARCHAR (50)    NOT NULL,
    [Active]          INT             NOT NULL,
    [sys_CreatedBy]   VARCHAR (255)   NOT NULL,
    [sys_CreatedOn]   DATETIME        NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255)   NOT NULL,
    [sys_ModifiedOn]  DATETIME        NOT NULL,
    CONSTRAINT [PK_Milestone] PRIMARY KEY CLUSTERED ([MilestoneID] ASC)
);


GO
PRINT N'Creating [app].[MilestoneType]...';


GO
CREATE TABLE [app].[MilestoneType] (
    [MilestoneTypeID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (50)  NOT NULL,
    [Name]            VARCHAR (MAX) NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_MilestoneType] PRIMARY KEY CLUSTERED ([MilestoneTypeID] ASC)
);


GO
PRINT N'Creating [app].[SubOutputSubOutputLink]...';


GO
CREATE TABLE [app].[SubOutputSubOutputLink] (
    [SubOutputSubOutputLink_ID] INT           IDENTITY (1, 1) NOT NULL,
    [PrimarySubOutput_ID]       INT           NOT NULL,
    [SecondarySubOutput_ID]     INT           NOT NULL,
    [Active]                    INT           NOT NULL,
    [sys_CreatedBy]             VARCHAR (255) NOT NULL,
    [sys_CreatedOn]             DATETIME      NOT NULL,
    [sys_ModifiedBy]            VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]            DATETIME      NOT NULL,
    CONSTRAINT [PK_SubOutputSubOutputLink] PRIMARY KEY CLUSTERED ([SubOutputSubOutputLink_ID] ASC)
);


GO
PRINT N'Creating [app].[SubOutputPersonRole]...';


GO
CREATE TABLE [app].[SubOutputPersonRole] (
    [SubOutputPersonRole_ID] INT           IDENTITY (1, 1) NOT NULL,
    [SubOutput_ID]           INT           NULL,
    [Person_ID]              INT           NULL,
    [Role_ID]                INT           NULL,
    [Active]                 INT           NOT NULL,
    [sys_CreatedBy]          VARCHAR (255) NOT NULL,
    [sys_CreatedOn]          DATETIME      NOT NULL,
    [sys_ModifiedBy]         VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]         DATETIME      NOT NULL,
    CONSTRAINT [PK_SubOutputPersonRole] PRIMARY KEY CLUSTERED ([SubOutputPersonRole_ID] ASC)
);


GO
PRINT N'Creating [app].[SubOutput]...';


GO
CREATE TABLE [app].[SubOutput] (
    [SubOutput_ID]    INT           IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (20)  NOT NULL,
    [ShortName]       VARCHAR (50)  NOT NULL,
    [BusinessKey]     VARCHAR (MAX) NULL,
    [Output_ID]       INT           NULL,
    [LongName]        VARCHAR (500) NOT NULL,
    [TextDescription] VARCHAR (MAX) NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_SubOutput] PRIMARY KEY CLUSTERED ([SubOutput_ID] ASC)
);


GO
PRINT N'Creating [app].[Indicator]...';


GO
CREATE TABLE [app].[Indicator] (
    [IndicatorID]      INT              IDENTITY (1, 1) NOT NULL,
    [LongName]         VARCHAR (500)    NOT NULL,
    [TextDescription]  VARCHAR (MAX)    NULL,
    [Baseline]         DECIMAL (20, 5)  NULL,
    [BaselineString]   VARCHAR (MAX)    NULL,
    [BaselineDate]     DATETIME         NOT NULL,
    [Target]           DECIMAL (20, 5)  NULL,
    [TargetString]     VARCHAR (MAX)    NULL,
    [TargetDate]       DATETIME         NOT NULL,
    [ReleaseDate]      DATE             NULL,
    [ReportingDate]    DATE             NULL,
    [Output_ID]        INT              NULL,
    [OutcomeID]        INT              NULL,
    [BusinessKey]      NVARCHAR (MAX)   NULL,
    [Notes]            NVARCHAR (MAX)   NULL,
    [Code]             NVARCHAR (20)    NOT NULL,
    [IndicatorType_ID] INT              NOT NULL,
    [Activity_ID]      INT              NULL,
    [SubOutput_ID]     INT              NULL,
    [Sharepoint_ID]    UNIQUEIDENTIFIER NULL,
    [ShortName]        VARCHAR (50)     NOT NULL,
    [BaselineDate_ID]  AS               ((datepart(year, [BaselineDate]) * (10000) + datepart(month, [baselineDate]) * (100)) + datepart(day, [BaselineDate])),
    [TargetDate_ID]    AS               ((datepart(year, [TargetDate]) * (10000) + datepart(month, [TargetDate]) * (100)) + datepart(day, [TargetDate])),
    [updated]          NVARCHAR (50)    NULL,
    [IsKeyIndicator]   BIT              NOT NULL,
    [UnitOfMeasure]    VARCHAR (50)     NOT NULL,
    [Active]           INT              NOT NULL,
    [projectID]        INT              NULL,
    [sys_CreatedBy]    VARCHAR (255)    NOT NULL,
    [sys_CreatedOn]    DATETIME         NOT NULL,
    [sys_ModifiedBy]   VARCHAR (255)    NOT NULL,
    [sys_ModifiedOn]   DATETIME         NOT NULL,
    CONSTRAINT [PK_Indicator_] PRIMARY KEY CLUSTERED ([IndicatorID] ASC)
);


GO
PRINT N'Creating [app].[IndicatorLocation]...';


GO
CREATE TABLE [app].[IndicatorLocation] (
    [IndicatorLocation_ID] INT              IDENTITY (1, 1) NOT NULL,
    [Location_ID]          INT              NULL,
    [Indicator_ID]         INT              NULL,
    [Sharepoint_ID]        UNIQUEIDENTIFIER NULL,
    [Active]               INT              NOT NULL,
    [sys_CreatedBy]        VARCHAR (255)    NOT NULL,
    [sys_CreatedOn]        DATETIME         NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255)    NOT NULL,
    [sys_ModifiedOn]       DATETIME         NOT NULL,
    CONSTRAINT [PK_IndicatorLocation] PRIMARY KEY CLUSTERED ([IndicatorLocation_ID] ASC)
);


GO
PRINT N'Creating [app].[IndicatorType]...';


GO
CREATE TABLE [app].[IndicatorType] (
    [IndicatorType_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]             VARCHAR (50)  NOT NULL,
    [Name]             VARCHAR (MAX) NULL,
    [Active]           INT           NOT NULL,
    [sys_CreatedBy]    VARCHAR (255) NOT NULL,
    [sys_CreatedOn]    DATETIME      NOT NULL,
    [sys_ModifiedBy]   VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]   DATETIME      NOT NULL,
    CONSTRAINT [PK_IndicatorType] PRIMARY KEY CLUSTERED ([IndicatorType_ID] ASC)
);


GO
PRINT N'Creating [app].[OutcomePersonRole]...';


GO
CREATE TABLE [app].[OutcomePersonRole] (
    [OutcomePersonRole_ID] INT              IDENTITY (1, 1) NOT NULL,
    [OutcomeID]            INT              NULL,
    [Person_ID]            INT              NULL,
    [Role_ID]              INT              NULL,
    [Sharepoint_ID]        UNIQUEIDENTIFIER NULL,
    [Active]               INT              NOT NULL,
    [sys_CreatedBy]        VARCHAR (255)    NOT NULL,
    [sys_CreatedOn]        DATETIME         NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255)    NOT NULL,
    [sys_ModifiedOn]       DATETIME         NOT NULL,
    CONSTRAINT [PK_OutcomePersonRole] PRIMARY KEY CLUSTERED ([OutcomePersonRole_ID] ASC)
);


GO
PRINT N'Creating [app].[OutcomeOrganization]...';


GO
CREATE TABLE [app].[OutcomeOrganization] (
    [OutcomeOrganization_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Organization_ID]        INT           NULL,
    [OutcomeID]              INT           NULL,
    [Active]                 INT           NOT NULL,
    [sys_CreatedBy]          VARCHAR (255) NOT NULL,
    [sys_CreatedOn]          DATETIME      NOT NULL,
    [sys_ModifiedBy]         VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]         DATETIME      NOT NULL,
    CONSTRAINT [PK_OutcomeOrganization] PRIMARY KEY CLUSTERED ([OutcomeOrganization_ID] ASC)
);


GO
PRINT N'Creating [app].[OutputPersonRole]...';


GO
CREATE TABLE [app].[OutputPersonRole] (
    [OutputPersonRole_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Output_ID]           INT           NULL,
    [Person_ID]           INT           NULL,
    [Role_ID]             INT           NULL,
    [Active]              INT           NOT NULL,
    [sys_CreatedBy]       VARCHAR (255) NOT NULL,
    [sys_CreatedOn]       DATETIME      NOT NULL,
    [sys_ModifiedBy]      VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]      DATETIME      NOT NULL,
    CONSTRAINT [PK_OutputPersonRole] PRIMARY KEY CLUSTERED ([OutputPersonRole_ID] ASC)
);


GO
PRINT N'Creating [app].[OutputOutputLink]...';


GO
CREATE TABLE [app].[OutputOutputLink] (
    [OutputOutputLink_ID] INT           IDENTITY (1, 1) NOT NULL,
    [PrimaryOutput_ID]    INT           NOT NULL,
    [SecondaryOutput_ID]  INT           NOT NULL,
    [Active]              INT           NOT NULL,
    [sys_CreatedBy]       VARCHAR (255) NOT NULL,
    [sys_CreatedOn]       DATETIME      NOT NULL,
    [sys_ModifiedBy]      VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]      DATETIME      NOT NULL,
    CONSTRAINT [PK_OutputOutputLink] PRIMARY KEY CLUSTERED ([OutputOutputLink_ID] ASC)
);


GO
PRINT N'Creating [app].[MilestoneLocation]...';


GO
CREATE TABLE [app].[MilestoneLocation] (
    [MilestoneLocation_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Location_ID]          INT           NOT NULL,
    [MilestoneID]          INT           NOT NULL,
    [Active]               INT           NOT NULL,
    [sys_CreatedBy]        VARCHAR (255) NOT NULL,
    [sys_CreatedOn]        DATETIME      NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]       DATETIME      NOT NULL,
    CONSTRAINT [PK_MilestoneLocation] PRIMARY KEY CLUSTERED ([MilestoneLocation_ID] ASC)
);


GO
PRINT N'Creating [app].[Outcome]...';


GO
CREATE TABLE [app].[Outcome] (
    [OutcomeID]       INT            IDENTITY (1, 1) NOT NULL,
    [Code]            NVARCHAR (20)  NOT NULL,
    [LongName]        NVARCHAR (500) NOT NULL,
    [BusinessKey]     NVARCHAR (MAX) NOT NULL,
    [ShortName]       NVARCHAR (50)  NOT NULL,
    [TextDescription] NVARCHAR (MAX) NULL,
    [Active]          INT            NOT NULL,
    [sys_CreatedBy]   VARCHAR (255)  NOT NULL,
    [sys_CreatedOn]   DATETIME       NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255)  NOT NULL,
    [sys_ModifiedOn]  DATETIME       NOT NULL,
    [OutcomeSiteName] NVARCHAR (50)  NULL,
    CONSTRAINT [PK_Outcome_1] PRIMARY KEY CLUSTERED ([OutcomeID] ASC)
);


GO
PRINT N'Creating [app].[Activity]...';


GO
CREATE TABLE [app].[Activity] (
    [ActivityID]      INT           IDENTITY (1, 1) NOT NULL,
    [ShortName]       VARCHAR (50)  NOT NULL,
    [LongName]        VARCHAR (500) NOT NULL,
    [TextDescription] VARCHAR (MAX) NOT NULL,
    [ProjectID]       INT           NOT NULL,
    [Active]          INT           NOT NULL,
    [Code]            VARCHAR (50)  NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_Activity_3] PRIMARY KEY CLUSTERED ([ActivityID] ASC)
);


GO
PRINT N'Creating [Core].[Location]...';


GO
CREATE TABLE [Core].[Location] (
    [Location_ID]       INT               IDENTITY (1, 1) NOT NULL,
    [Code]              VARCHAR (MAX)     NULL,
    [Name]              VARCHAR (MAX)     NULL,
    [Area]              VARCHAR (MAX)     NULL,
    [Density]           VARCHAR (MAX)     NULL,
    [BusinessKey]       NVARCHAR (MAX)    NULL,
    [LocationType_ID]   INT               NULL,
    [ParentLocation_ID] INT               NULL,
    [Geog]              [sys].[geography] NULL,
    [Active]            INT               NOT NULL,
    [sys_CreatedBy]     VARCHAR (255)     NOT NULL,
    [sys_CreatedOn]     DATETIME          NOT NULL,
    [sys_ModifiedBy]    VARCHAR (255)     NOT NULL,
    [sys_ModifiedOn]    DATETIME          NOT NULL,
    CONSTRAINT [PK_Location] PRIMARY KEY CLUSTERED ([Location_ID] ASC)
);


GO
PRINT N'Creating [Core].[DimDate]...';


GO
CREATE TABLE [Core].[DimDate] (
    [DateSK]          INT           IDENTITY (1, 1) NOT NULL,
    [DateID]          INT           NOT NULL,
    [Date]            DATETIME      NOT NULL,
    [Day]             INT           NOT NULL,
    [DaySuffix]       CHAR (3)      NOT NULL,
    [USDayOfWeek]     VARCHAR (9)   NOT NULL,
    [DayOfWeek]       VARCHAR (9)   NOT NULL,
    [DOWInMonth]      INT           NOT NULL,
    [DayOfYear]       INT           NOT NULL,
    [WeekOfYear]      INT           NOT NULL,
    [WeekOfMonth]     INT           NOT NULL,
    [MonthNumber]     INT           NOT NULL,
    [MonthName]       VARCHAR (9)   NOT NULL,
    [Quarter]         INT           NOT NULL,
    [QuarterName]     VARCHAR (255) NOT NULL,
    [YearName]        CHAR (4)      NOT NULL,
    [YearNumber]      INT           NOT NULL,
    [StandardDate]    VARCHAR (10)  NULL,
    [IsPublicHoliday] BIT           NULL,
    [HolidayText]     VARCHAR (50)  NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_DimDate] PRIMARY KEY CLUSTERED ([DateID] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [Core].[Role]...';


GO
CREATE TABLE [Core].[Role] (
    [RoleID]         INT           IDENTITY (1, 1) NOT NULL,
    [Code]           VARCHAR (50)  NOT NULL,
    [Name]           VARCHAR (255) NULL,
    [Description]    VARCHAR (MAX) NULL,
    [Active]         INT           NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED ([RoleID] ASC)
);


GO
PRINT N'Creating [Core].[DataVersion]...';


GO
CREATE TABLE [Core].[DataVersion] (
    [DataVersion_ID]       INT           IDENTITY (1, 1) NOT NULL,
    [Code]                 VARCHAR (20)  NOT NULL,
    [Name]                 VARCHAR (50)  NOT NULL,
    [Description]          VARCHAR (MAX) NOT NULL,
    [Outcome_ID]           INT           NULL,
    [DataVersionLevel_ID]  INT           NOT NULL,
    [ParentDataVersion_ID] INT           NULL,
    [Active]               INT           NOT NULL,
    [sys_CreatedBy]        VARCHAR (255) NOT NULL,
    [sys_CreatedOn]        DATETIME      NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]       DATETIME      NOT NULL,
    CONSTRAINT [PK_Version] PRIMARY KEY CLUSTERED ([DataVersion_ID] ASC)
);


GO
PRINT N'Creating [Core].[DimMunicipalityGEOM]...';


GO
CREATE TABLE [Core].[DimMunicipalityGEOM] (
    [PK_ID]          INT               IDENTITY (1, 1) NOT NULL,
    [ID]             BIGINT            NULL,
    [LBL]            NVARCHAR (255)    NULL,
    [FIP]            NVARCHAR (255)    NULL,
    [MMT_ID]         NVARCHAR (255)    NULL,
    [SHORT__FRM]     NVARCHAR (255)    NULL,
    [LONG_FRM]       NVARCHAR (255)    NULL,
    [ADM0]           NVARCHAR (255)    NULL,
    [ADM1]           NVARCHAR (255)    NULL,
    [ADM2]           NVARCHAR (255)    NULL,
    [ADM3]           NVARCHAR (255)    NULL,
    [ADM4]           NVARCHAR (255)    NULL,
    [ADM5]           NVARCHAR (255)    NULL,
    [geom]           [sys].[geography] NULL,
    [Active]         INT               NOT NULL,
    [sys_CreatedBy]  VARCHAR (255)     NOT NULL,
    [sys_CreatedOn]  DATETIME          NOT NULL,
    [sys_ModifiedBy] VARCHAR (255)     NOT NULL,
    [sys_ModifiedOn] DATETIME          NOT NULL,
    PRIMARY KEY CLUSTERED ([PK_ID] ASC)
);


GO
PRINT N'Creating [Core].[DataSource]...';


GO
CREATE TABLE [Core].[DataSource] (
    [DataSource_ID]    INT              IDENTITY (1, 1) NOT NULL,
    [Name]             VARCHAR (MAX)    NULL,
    [ContactDetails]   VARCHAR (MAX)    NULL,
    [Custodian]        VARCHAR (MAX)    NULL,
    [Format]           VARCHAR (MAX)    NULL,
    [CollectionMethod] VARCHAR (MAX)    NULL,
    [MetadataStatus]   VARCHAR (MAX)    NULL,
    [BusinessKey]      VARCHAR (MAX)    NULL,
    [Sharepoint_ID]    UNIQUEIDENTIFIER NULL,
    [Active]           INT              NOT NULL,
    [sys_CreatedBy]    VARCHAR (255)    NOT NULL,
    [sys_CreatedOn]    DATETIME         NOT NULL,
    [sys_ModifiedBy]   VARCHAR (255)    NOT NULL,
    [sys_ModifiedOn]   DATETIME         NOT NULL,
    CONSTRAINT [PK_DataSource] PRIMARY KEY CLUSTERED ([DataSource_ID] ASC)
);


GO
PRINT N'Creating [Core].[OrganizationType]...';


GO
CREATE TABLE [Core].[OrganizationType] (
    [OrganizationType_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Description]         VARCHAR (MAX) NULL,
    [Active]              INT           NOT NULL,
    [sys_CreatedBy]       VARCHAR (255) NOT NULL,
    [sys_CreatedOn]       DATETIME      NOT NULL,
    [sys_ModifiedBy]      VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]      DATETIME      NOT NULL,
    CONSTRAINT [PK_OrganizationType] PRIMARY KEY CLUSTERED ([OrganizationType_ID] ASC)
);


GO
PRINT N'Creating [Core].[OrganizationPersonRole]...';


GO
CREATE TABLE [Core].[OrganizationPersonRole] (
    [OrganizationPersonRole_ID] INT              IDENTITY (1, 1) NOT NULL,
    [Person_ID]                 INT              NULL,
    [Role_ID]                   INT              NULL,
    [Organization_ID]           INT              NULL,
    [StartDate]                 DATETIME2 (7)    NULL,
    [EndDate]                   DATETIME2 (7)    NULL,
    [Sharepoint_ID]             UNIQUEIDENTIFIER NULL,
    [Active]                    INT              NOT NULL,
    [sys_CreatedBy]             VARCHAR (255)    NOT NULL,
    [sys_CreatedOn]             DATETIME         NOT NULL,
    [sys_ModifiedBy]            VARCHAR (255)    NOT NULL,
    [sys_ModifiedOn]            DATETIME         NOT NULL,
    CONSTRAINT [PK_OrganizationPersonRole] PRIMARY KEY CLUSTERED ([OrganizationPersonRole_ID] ASC)
);


GO
PRINT N'Creating [Core].[Organization]...';


GO
CREATE TABLE [Core].[Organization] (
    [Organization_ID]       INT           IDENTITY (1, 1) NOT NULL,
    [Code]                  VARCHAR (MAX) NULL,
    [BusinessKey]           VARCHAR (MAX) NULL,
    [OrganizationType_ID]   INT           NULL,
    [ParentOrganization_ID] INT           NULL,
    [Active]                INT           NOT NULL,
    [sys_CreatedBy]         VARCHAR (255) NOT NULL,
    [sys_CreatedOn]         DATETIME      NOT NULL,
    [sys_ModifiedBy]        VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]        DATETIME      NOT NULL,
    CONSTRAINT [PK_Organization] PRIMARY KEY CLUSTERED ([Organization_ID] ASC)
);


GO
PRINT N'Creating [Core].[Person]...';


GO
CREATE TABLE [Core].[Person] (
    [Person_ID]      INT              IDENTITY (1, 1) NOT NULL,
    [Title]          VARCHAR (MAX)    NULL,
    [Name]           VARCHAR (MAX)    NULL,
    [ContactDetails] VARCHAR (MAX)    NULL,
    [Category]       VARCHAR (MAX)    NULL,
    [BusinessKey]    VARCHAR (MAX)    NULL,
    [UserDetails]    VARCHAR (50)     NULL,
    [Sharepoint_ID]  UNIQUEIDENTIFIER NULL,
    [Active]         INT              NOT NULL,
    [sys_CreatedBy]  VARCHAR (255)    NOT NULL,
    [sys_CreatedOn]  DATETIME         NOT NULL,
    [sys_ModifiedBy] VARCHAR (255)    NOT NULL,
    [sys_ModifiedOn] DATETIME         NOT NULL,
    CONSTRAINT [PK_Person] PRIMARY KEY CLUSTERED ([Person_ID] ASC)
);


GO
PRINT N'Creating [Core].[LocationType]...';


GO
CREATE TABLE [Core].[LocationType] (
    [LocationType_ID] INT            IDENTITY (1, 1) NOT NULL,
    [Description]     NVARCHAR (MAX) NULL,
    [Active]          INT            NOT NULL,
    [sys_CreatedBy]   VARCHAR (255)  NOT NULL,
    [sys_CreatedOn]   DATETIME       NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255)  NOT NULL,
    [sys_ModifiedOn]  DATETIME       NOT NULL,
    CONSTRAINT [PK_LocationType] PRIMARY KEY CLUSTERED ([LocationType_ID] ASC)
);


GO
PRINT N'Creating [Core].[DataVersionLevel]...';


GO
CREATE TABLE [Core].[DataVersionLevel] (
    [DataVersionLevel_ID] INT           IDENTITY (1, 1) NOT NULL,
    [VersionLevelCode]    VARCHAR (50)  NOT NULL,
    [VersionOrder]        INT           NOT NULL,
    [Name]                VARCHAR (50)  NOT NULL,
    [Description]         VARCHAR (MAX) NOT NULL,
    [Active]              INT           NOT NULL,
    [sys_CreatedBy]       VARCHAR (255) NOT NULL,
    [sys_CreatedOn]       DATETIME      NOT NULL,
    [sys_ModifiedBy]      VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]      DATETIME      NOT NULL,
    CONSTRAINT [PK_VersionLevel] PRIMARY KEY CLUSTERED ([DataVersionLevel_ID] ASC)
);


GO
PRINT N'Creating [Core].[ReportingPeriod]...';


GO
CREATE TABLE [Core].[ReportingPeriod] (
    [ID]              INT           IDENTITY (1, 1) NOT NULL,
    [ReportingPeriod] INT           NOT NULL,
    [StartDateID]     INT           NOT NULL,
    [EndDateID]       INT           NOT NULL,
    [FirstCycleDate]  DATETIME      NOT NULL,
    [LastCycleDate]   DATETIME      NOT NULL,
    [YearName]        CHAR (4)      NOT NULL,
    [YearNumber]      INT           NOT NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_ReportingPeriod] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [Core].[ActiveType]...';


GO
CREATE TABLE [Core].[ActiveType] (
    [ID]             INT           NOT NULL,
    [Code]           VARCHAR (20)  NOT NULL,
    [Name]           NVARCHAR (50) NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_ActiveType] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [RBM].[MilestoneValues]...';


GO
CREATE TABLE [RBM].[MilestoneValues] (
    [MilestoneValues_ID]     INT             IDENTITY (1, 1) NOT NULL,
    [Milestone_ID]           INT             NOT NULL,
    [ActualLabel]            VARCHAR (50)    NOT NULL,
    [ActualValue]            DECIMAL (20, 5) NULL,
    [ActualValueString]      VARCHAR (MAX)   NULL,
    [ActualDate]             DATE            NULL,
    [BusinessKey]            VARCHAR (MAX)   NULL,
    [Notes]                  VARCHAR (MAX)   NULL,
    [DataVersion_ID]         INT             NOT NULL,
    [Location_ID]            INT             NOT NULL,
    [MilestoneStatusPercent] DECIMAL (18, 2) NULL,
    [ReportPeriodID]         INT             NOT NULL,
    [Title]                  VARCHAR (255)   NULL,
    [ModifiedDate]           DATETIME        NULL,
    [Organization_ID]        INT             NULL,
    [Username]               VARCHAR (255)   NULL,
    [Active]                 INT             NOT NULL,
    [sys_CreatedBy]          VARCHAR (255)   NOT NULL,
    [sys_CreatedOn]          DATETIME        NOT NULL,
    [sys_ModifiedBy]         VARCHAR (255)   NOT NULL,
    [sys_ModifiedOn]         DATETIME        NOT NULL,
    CONSTRAINT [PK_MilestoneValues] PRIMARY KEY CLUSTERED ([MilestoneValues_ID] ASC),
    CONSTRAINT [UQ_IDS_MS] UNIQUE NONCLUSTERED ([Milestone_ID] ASC, [Location_ID] ASC, [ReportPeriodID] ASC, [DataVersion_ID] ASC)
);


GO
PRINT N'Creating [RBM].[IndicatorValues]...';


GO
CREATE TABLE [RBM].[IndicatorValues] (
    [IndicatorValues_ID]     INT             IDENTITY (1, 1) NOT NULL,
    [Indicator_ID]           INT             NOT NULL,
    [ActualLabel]            VARCHAR (50)    NOT NULL,
    [ActualValue]            DECIMAL (20, 5) NULL,
    [ActualValueString]      VARCHAR (MAX)   NULL,
    [ActualDate]             DATE            NULL,
    [ReleaseDate]            DATE            NULL,
    [ReportingDate]          DATE            NULL,
    [IndicatorReportingDate] DATE            NULL,
    [BusinessKey]            VARCHAR (MAX)   NULL,
    [Notes]                  VARCHAR (MAX)   NULL,
    [DataVersion_ID]         INT             NOT NULL,
    [Location_ID]            INT             NOT NULL,
    [IndicatorStatusPercent] DECIMAL (18, 2) NULL,
    [ReportPeriodID]         INT             NOT NULL,
    [Title]                  VARCHAR (255)   NULL,
    [ModifiedDate]           DATETIME        NULL,
    [Organization_ID]        INT             NULL,
    [Username]               VARCHAR (255)   NULL,
    [Active]                 INT             NOT NULL,
    [sys_CreatedBy]          VARCHAR (255)   NOT NULL,
    [sys_CreatedOn]          DATETIME        NOT NULL,
    [sys_ModifiedBy]         VARCHAR (255)   NOT NULL,
    [sys_ModifiedOn]         DATETIME        NOT NULL,
    CONSTRAINT [PK_IndicatorValues] PRIMARY KEY CLUSTERED ([IndicatorValues_ID] ASC),
    CONSTRAINT [UQ_IDS] UNIQUE NONCLUSTERED ([Indicator_ID] ASC, [Location_ID] ASC, [ReportPeriodID] ASC, [DataVersion_ID] ASC)
);


GO
PRINT N'Creating [dbo].[templateMenueGroup]...';


GO
CREATE TABLE [dbo].[templateMenueGroup] (
    [Title]          VARCHAR (148) NULL,
    [Link]           VARCHAR (119) NULL,
    [Parent]         INT           NULL,
    [ID]             INT           NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL
);


GO
PRINT N'Creating DF_Project_Code...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF_Project_Code] DEFAULT ((1)) FOR [Code];


GO
PRINT N'Creating DF__Project__Active__65570293...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF__Project__Active__65570293] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Project_sys_CreatedBy...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF_Project_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Project_sys_CreatedOn...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF_Project_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Project_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF_Project_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Project_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF_Project_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[Output]....';


GO
ALTER TABLE [app].[Output]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Output_sys_CreatedBy...';


GO
ALTER TABLE [app].[Output]
    ADD CONSTRAINT [DF_Output_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Output_sys_CreatedOn...';


GO
ALTER TABLE [app].[Output]
    ADD CONSTRAINT [DF_Output_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Output_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Output]
    ADD CONSTRAINT [DF_Output_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Output_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Output]
    ADD CONSTRAINT [DF_Output_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Status_sys_A__4F9CCB9E...';


GO
ALTER TABLE [app].[Status]
    ADD CONSTRAINT [DF__Status_sys_A__4F9CCB9E] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Status_sys_CreatedBy...';


GO
ALTER TABLE [app].[Status]
    ADD CONSTRAINT [DF_Status_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Status_sys_CreatedOn...';


GO
ALTER TABLE [app].[Status]
    ADD CONSTRAINT [DF_Status_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Status_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Status]
    ADD CONSTRAINT [DF_Status_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Status_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Status]
    ADD CONSTRAINT [DF_Status_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Milestone__sys_A__5F492382...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [DF__Milestone__sys_A__5F492382] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Milestone_sys_CreatedBy...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [DF_Milestone_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Milestone_sys_CreatedOn...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [DF_Milestone_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Milestone_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [DF_Milestone_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Milestone_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [DF_Milestone_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Milestone__sys_A__22401542...';


GO
ALTER TABLE [app].[MilestoneType]
    ADD CONSTRAINT [DF__Milestone__sys_A__22401542] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_MilestoneType_sys_CreatedBy...';


GO
ALTER TABLE [app].[MilestoneType]
    ADD CONSTRAINT [DF_MilestoneType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_MilestoneType_sys_CreatedOn...';


GO
ALTER TABLE [app].[MilestoneType]
    ADD CONSTRAINT [DF_MilestoneType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_MilestoneType_sys_ModifiedBy...';


GO
ALTER TABLE [app].[MilestoneType]
    ADD CONSTRAINT [DF_MilestoneType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_MilestoneType_sys_ModifiedOn...';


GO
ALTER TABLE [app].[MilestoneType]
    ADD CONSTRAINT [DF_MilestoneType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[SubOutputSubOutputLink]....';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_SubOutputSubOutputLink_sys_CreatedBy...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [DF_SubOutputSubOutputLink_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_SubOutputSubOutputLink_sys_CreatedOn...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [DF_SubOutputSubOutputLink_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_SubOutputSubOutputLink_sys_ModifiedBy...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [DF_SubOutputSubOutputLink_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_SubOutputSubOutputLink_sys_ModifiedOn...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [DF_SubOutputSubOutputLink_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[SubOutputPersonRole]....';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_SubOutputPersonRole_sys_CreatedBy...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [DF_SubOutputPersonRole_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_SubOutputPersonRole_sys_CreatedOn...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [DF_SubOutputPersonRole_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_SubOutputPersonRole_sys_ModifiedBy...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [DF_SubOutputPersonRole_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_SubOutputPersonRole_sys_ModifiedOn...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [DF_SubOutputPersonRole_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[SubOutput]....';


GO
ALTER TABLE [app].[SubOutput]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_SubOutput_sys_CreatedBy...';


GO
ALTER TABLE [app].[SubOutput]
    ADD CONSTRAINT [DF_SubOutput_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_SubOutput_sys_CreatedOn...';


GO
ALTER TABLE [app].[SubOutput]
    ADD CONSTRAINT [DF_SubOutput_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_SubOutput_sys_ModifiedBy...';


GO
ALTER TABLE [app].[SubOutput]
    ADD CONSTRAINT [DF_SubOutput_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_SubOutput_sys_ModifiedOn...';


GO
ALTER TABLE [app].[SubOutput]
    ADD CONSTRAINT [DF_SubOutput_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Indicator__sys_A__4F9CCB9E...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [DF__Indicator__sys_A__4F9CCB9E] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Indicator_sys_CreatedBy...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [DF_Indicator_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Indicator_sys_CreatedOn...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [DF_Indicator_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Indicator_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [DF_Indicator_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Indicator_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [DF_Indicator_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[IndicatorLocation]....';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_IndicatorLocation_sys_CreatedBy...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [DF_IndicatorLocation_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_IndicatorLocation_sys_CreatedOn...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [DF_IndicatorLocation_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_IndicatorLocation_sys_ModifiedBy...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [DF_IndicatorLocation_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_IndicatorLocation_sys_ModifiedOn...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [DF_IndicatorLocation_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[IndicatorType]....';


GO
ALTER TABLE [app].[IndicatorType]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_IndicatorType_sys_CreatedBy...';


GO
ALTER TABLE [app].[IndicatorType]
    ADD CONSTRAINT [DF_IndicatorType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_IndicatorType_sys_CreatedOn...';


GO
ALTER TABLE [app].[IndicatorType]
    ADD CONSTRAINT [DF_IndicatorType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_IndicatorType_sys_ModifiedBy...';


GO
ALTER TABLE [app].[IndicatorType]
    ADD CONSTRAINT [DF_IndicatorType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_IndicatorType_sys_ModifiedOn...';


GO
ALTER TABLE [app].[IndicatorType]
    ADD CONSTRAINT [DF_IndicatorType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[OutcomePersonRole]....';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OutcomePersonRole_sys_CreatedBy...';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD CONSTRAINT [DF_OutcomePersonRole_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OutcomePersonRole_sys_CreatedOn...';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD CONSTRAINT [DF_OutcomePersonRole_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OutcomePersonRole_sys_ModifiedBy...';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD CONSTRAINT [DF_OutcomePersonRole_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OutcomePersonRole_sys_ModifiedOn...';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD CONSTRAINT [DF_OutcomePersonRole_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[OutcomeOrganization]....';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OutcomeOrganization_sys_CreatedBy...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [DF_OutcomeOrganization_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OutcomeOrganization_sys_CreatedOn...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [DF_OutcomeOrganization_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OutcomeOrganization_sys_ModifiedBy...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [DF_OutcomeOrganization_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OutcomeOrganization_sys_ModifiedOn...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [DF_OutcomeOrganization_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[OutputPersonRole]....';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OutputPersonRole_sys_CreatedBy...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [DF_OutputPersonRole_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OutputPersonRole_sys_CreatedOn...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [DF_OutputPersonRole_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OutputPersonRole_sys_ModifiedBy...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [DF_OutputPersonRole_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OutputPersonRole_sys_ModifiedOn...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [DF_OutputPersonRole_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[OutputOutputLink]....';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OutputOutputLink_sys_CreatedBy...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [DF_OutputOutputLink_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OutputOutputLink_sys_CreatedOn...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [DF_OutputOutputLink_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OutputOutputLink_sys_ModifiedBy...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [DF_OutputOutputLink_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OutputOutputLink_sys_ModifiedOn...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [DF_OutputOutputLink_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[MilestoneLocation]....';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_MilestoneLocation_sys_CreatedBy...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [DF_MilestoneLocation_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_MilestoneLocation_sys_CreatedOn...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [DF_MilestoneLocation_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_MilestoneLocation_sys_ModifiedBy...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [DF_MilestoneLocation_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_MilestoneLocation_sys_ModifiedOn...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [DF_MilestoneLocation_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Outcome__sys_Act__075714DC...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [DF__Outcome__sys_Act__075714DC] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Outcome_sys_CreatedBy...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [DF_Outcome_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Outcome_sys_CreatedOn...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [DF_Outcome_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Outcome_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [DF_Outcome_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Outcome_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [DF_Outcome_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Activity__sys_Ac__3AA1AEB8...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [DF__Activity__sys_Ac__3AA1AEB8] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Activity_sys_CreatedBy...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [DF_Activity_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Activity_sys_CreatedOn...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [DF_Activity_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Activity_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [DF_Activity_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Activity_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [DF_Activity_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Location__sys_Ac__36470DEF...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [DF__Location__sys_Ac__36470DEF] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Location_sys_CreatedBy...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [DF_Location_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Location_sys_CreatedOn...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [DF_Location_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Location_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [DF_Location_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Location_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [DF_Location_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [Core].[DimDate]....';


GO
ALTER TABLE [Core].[DimDate]
    ADD DEFAULT ((0)) FOR [IsPublicHoliday];


GO
PRINT N'Creating Default Constraint on [Core].[DimDate]....';


GO
ALTER TABLE [Core].[DimDate]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DimDate_sys_CreatedBy...';


GO
ALTER TABLE [Core].[DimDate]
    ADD CONSTRAINT [DF_DimDate_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DimDate_sys_CreatedOn...';


GO
ALTER TABLE [Core].[DimDate]
    ADD CONSTRAINT [DF_DimDate_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DimDate_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[DimDate]
    ADD CONSTRAINT [DF_DimDate_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DimDate_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[DimDate]
    ADD CONSTRAINT [DF_DimDate_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Role__Active__71BCD978...';


GO
ALTER TABLE [Core].[Role]
    ADD CONSTRAINT [DF__Role__Active__71BCD978] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Role_sys_CreatedBy...';


GO
ALTER TABLE [Core].[Role]
    ADD CONSTRAINT [DF_Role_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Role_sys_CreatedOn...';


GO
ALTER TABLE [Core].[Role]
    ADD CONSTRAINT [DF_Role_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Role_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[Role]
    ADD CONSTRAINT [DF_Role_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Role_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[Role]
    ADD CONSTRAINT [DF_Role_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__DataVersi__sys_A__50C5FA01...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [DF__DataVersi__sys_A__50C5FA01] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DataVersion_sys_CreatedBy...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [DF_DataVersion_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DataVersion_sys_CreatedOn...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [DF_DataVersion_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DataVersion_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [DF_DataVersion_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DataVersion_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [DF_DataVersion_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [Core].[DimMunicipalityGEOM]....';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DimMunicipalityGEOM_sys_CreatedBy...';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM]
    ADD CONSTRAINT [DF_DimMunicipalityGEOM_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DimMunicipalityGEOM_sys_CreatedOn...';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM]
    ADD CONSTRAINT [DF_DimMunicipalityGEOM_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DimMunicipalityGEOM_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM]
    ADD CONSTRAINT [DF_DimMunicipalityGEOM_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DimMunicipalityGEOM_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM]
    ADD CONSTRAINT [DF_DimMunicipalityGEOM_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [Core].[DataSource]....';


GO
ALTER TABLE [Core].[DataSource]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DataSource_sys_CreatedBy...';


GO
ALTER TABLE [Core].[DataSource]
    ADD CONSTRAINT [DF_DataSource_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DataSource_sys_CreatedOn...';


GO
ALTER TABLE [Core].[DataSource]
    ADD CONSTRAINT [DF_DataSource_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DataSource_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[DataSource]
    ADD CONSTRAINT [DF_DataSource_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DataSource_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[DataSource]
    ADD CONSTRAINT [DF_DataSource_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [Core].[OrganizationType]....';


GO
ALTER TABLE [Core].[OrganizationType]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OrganizationType_sys_CreatedBy...';


GO
ALTER TABLE [Core].[OrganizationType]
    ADD CONSTRAINT [DF_OrganizationType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OrganizationType_sys_CreatedOn...';


GO
ALTER TABLE [Core].[OrganizationType]
    ADD CONSTRAINT [DF_OrganizationType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OrganizationType_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[OrganizationType]
    ADD CONSTRAINT [DF_OrganizationType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OrganizationType_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[OrganizationType]
    ADD CONSTRAINT [DF_OrganizationType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [Core].[OrganizationPersonRole]....';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OrganizationPersonRole_sys_CreatedBy...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [DF_OrganizationPersonRole_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OrganizationPersonRole_sys_CreatedOn...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [DF_OrganizationPersonRole_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OrganizationPersonRole_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [DF_OrganizationPersonRole_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OrganizationPersonRole_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [DF_OrganizationPersonRole_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [Core].[Organization]....';


GO
ALTER TABLE [Core].[Organization]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Organization_sys_CreatedBy...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [DF_Organization_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Organization_sys_CreatedOn...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [DF_Organization_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Organization_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [DF_Organization_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Organization_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [DF_Organization_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [Core].[Person]....';


GO
ALTER TABLE [Core].[Person]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Person_sys_CreatedBy...';


GO
ALTER TABLE [Core].[Person]
    ADD CONSTRAINT [DF_Person_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Person_sys_CreatedOn...';


GO
ALTER TABLE [Core].[Person]
    ADD CONSTRAINT [DF_Person_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Person_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[Person]
    ADD CONSTRAINT [DF_Person_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Person_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[Person]
    ADD CONSTRAINT [DF_Person_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [Core].[LocationType]....';


GO
ALTER TABLE [Core].[LocationType]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_LocationType_sys_CreatedBy...';


GO
ALTER TABLE [Core].[LocationType]
    ADD CONSTRAINT [DF_LocationType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_LocationType_sys_CreatedOn...';


GO
ALTER TABLE [Core].[LocationType]
    ADD CONSTRAINT [DF_LocationType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_LocationType_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[LocationType]
    ADD CONSTRAINT [DF_LocationType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_LocationType_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[LocationType]
    ADD CONSTRAINT [DF_LocationType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [Core].[DataVersionLevel]....';


GO
ALTER TABLE [Core].[DataVersionLevel]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DataVersionLevel_sys_CreatedBy...';


GO
ALTER TABLE [Core].[DataVersionLevel]
    ADD CONSTRAINT [DF_DataVersionLevel_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DataVersionLevel_sys_CreatedOn...';


GO
ALTER TABLE [Core].[DataVersionLevel]
    ADD CONSTRAINT [DF_DataVersionLevel_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DataVersionLevel_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[DataVersionLevel]
    ADD CONSTRAINT [DF_DataVersionLevel_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DataVersionLevel_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[DataVersionLevel]
    ADD CONSTRAINT [DF_DataVersionLevel_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [Core].[ReportingPeriod]....';


GO
ALTER TABLE [Core].[ReportingPeriod]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_ReportingPeriod_sys_CreatedBy...';


GO
ALTER TABLE [Core].[ReportingPeriod]
    ADD CONSTRAINT [DF_ReportingPeriod_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_ReportingPeriod_sys_CreatedOn...';


GO
ALTER TABLE [Core].[ReportingPeriod]
    ADD CONSTRAINT [DF_ReportingPeriod_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_ReportingPeriod_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[ReportingPeriod]
    ADD CONSTRAINT [DF_ReportingPeriod_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_ReportingPeriod_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[ReportingPeriod]
    ADD CONSTRAINT [DF_ReportingPeriod_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_ActiveType_sys_CreatedBy...';


GO
ALTER TABLE [Core].[ActiveType]
    ADD CONSTRAINT [DF_ActiveType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_ActiveType_sys_CreatedOn...';


GO
ALTER TABLE [Core].[ActiveType]
    ADD CONSTRAINT [DF_ActiveType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_ActiveType_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[ActiveType]
    ADD CONSTRAINT [DF_ActiveType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_ActiveType_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[ActiveType]
    ADD CONSTRAINT [DF_ActiveType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [RBM].[MilestoneValues]....';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD DEFAULT ('((left(CONVERT([varchar](50),[ActualString]),(50))))') FOR [ActualLabel];


GO
PRINT N'Creating Default Constraint on [RBM].[MilestoneValues]....';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_MilestoneValues_sys_CreatedBy...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [DF_MilestoneValues_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_MilestoneValues_sys_CreatedOn...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [DF_MilestoneValues_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_MilestoneValues_sys_ModifiedBy...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [DF_MilestoneValues_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_MilestoneValues_sys_ModifiedOn...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [DF_MilestoneValues_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [RBM].[IndicatorValues]....';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD DEFAULT ('((left(CONVERT([varchar](50),[ActualString]),(50))))') FOR [ActualLabel];


GO
PRINT N'Creating Default Constraint on [RBM].[IndicatorValues]....';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_IndicatorValues_sys_CreatedBy...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [DF_IndicatorValues_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_IndicatorValues_sys_CreatedOn...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [DF_IndicatorValues_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_IndicatorValues_sys_ModifiedBy...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [DF_IndicatorValues_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_IndicatorValues_sys_ModifiedOn...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [DF_IndicatorValues_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_templateMenueGroup_sys_CreatedBy...';


GO
ALTER TABLE [dbo].[templateMenueGroup]
    ADD CONSTRAINT [DF_templateMenueGroup_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_templateMenueGroup_sys_CreatedOn...';


GO
ALTER TABLE [dbo].[templateMenueGroup]
    ADD CONSTRAINT [DF_templateMenueGroup_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_templateMenueGroup_sys_ModifiedBy...';


GO
ALTER TABLE [dbo].[templateMenueGroup]
    ADD CONSTRAINT [DF_templateMenueGroup_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_templateMenueGroup_sys_ModifiedOn...';


GO
ALTER TABLE [dbo].[templateMenueGroup]
    ADD CONSTRAINT [DF_templateMenueGroup_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating FK_Project_ActiveType...';


GO
ALTER TABLE [app].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Project_Outcome...';


GO
ALTER TABLE [app].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_Outcome] FOREIGN KEY ([OutcomeID]) REFERENCES [app].[Outcome] ([OutcomeID]);


GO
PRINT N'Creating FK_Project_Project...';


GO
ALTER TABLE [app].[Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Project_Project] FOREIGN KEY ([ProjectParentID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_Output_ActiveType...';


GO
ALTER TABLE [app].[Output] WITH NOCHECK
    ADD CONSTRAINT [FK_Output_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Output_Outcome...';


GO
ALTER TABLE [app].[Output] WITH NOCHECK
    ADD CONSTRAINT [FK_Output_Outcome] FOREIGN KEY ([OutcomeID]) REFERENCES [app].[Outcome] ([OutcomeID]);


GO
PRINT N'Creating FK_Status_ActiveType...';


GO
ALTER TABLE [app].[Status] WITH NOCHECK
    ADD CONSTRAINT [FK_Status_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Status_Activity...';


GO
ALTER TABLE [app].[Status] WITH NOCHECK
    ADD CONSTRAINT [FK_Status_Activity] FOREIGN KEY ([Activity_ID]) REFERENCES [app].[Activity] ([ActivityID]);


GO
PRINT N'Creating FK_Status_Outcome...';


GO
ALTER TABLE [app].[Status] WITH NOCHECK
    ADD CONSTRAINT [FK_Status_Outcome] FOREIGN KEY ([OutcomeID]) REFERENCES [app].[Outcome] ([OutcomeID]);


GO
PRINT N'Creating FK_Status_Output...';


GO
ALTER TABLE [app].[Status] WITH NOCHECK
    ADD CONSTRAINT [FK_Status_Output] FOREIGN KEY ([Output_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_Status_SubOutput...';


GO
ALTER TABLE [app].[Status] WITH NOCHECK
    ADD CONSTRAINT [FK_Status_SubOutput] FOREIGN KEY ([SubOutput_ID]) REFERENCES [app].[SubOutput] ([SubOutput_ID]);


GO
PRINT N'Creating FK_Milestone_ActiveType...';


GO
ALTER TABLE [app].[Milestone] WITH NOCHECK
    ADD CONSTRAINT [FK_Milestone_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Milestone_Activity...';


GO
ALTER TABLE [app].[Milestone] WITH NOCHECK
    ADD CONSTRAINT [FK_Milestone_Activity] FOREIGN KEY ([ActivityID]) REFERENCES [app].[Activity] ([ActivityID]);


GO
PRINT N'Creating FK_Milestone_MilestoneType...';


GO
ALTER TABLE [app].[Milestone] WITH NOCHECK
    ADD CONSTRAINT [FK_Milestone_MilestoneType] FOREIGN KEY ([MilestoneTypeID]) REFERENCES [app].[MilestoneType] ([MilestoneTypeID]);


GO
PRINT N'Creating FK_Milestone_Outcome...';


GO
ALTER TABLE [app].[Milestone] WITH NOCHECK
    ADD CONSTRAINT [FK_Milestone_Outcome] FOREIGN KEY ([OutcomeID]) REFERENCES [app].[Outcome] ([OutcomeID]);


GO
PRINT N'Creating FK_Milestone_Project...';


GO
ALTER TABLE [app].[Milestone] WITH NOCHECK
    ADD CONSTRAINT [FK_Milestone_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_MilestoneType_ActiveType...';


GO
ALTER TABLE [app].[MilestoneType] WITH NOCHECK
    ADD CONSTRAINT [FK_MilestoneType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_SubOutputSubOutputLink_ActiveType...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink] WITH NOCHECK
    ADD CONSTRAINT [FK_SubOutputSubOutputLink_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_SubOutputSubOutputLink_SubOutput...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink] WITH NOCHECK
    ADD CONSTRAINT [FK_SubOutputSubOutputLink_SubOutput] FOREIGN KEY ([PrimarySubOutput_ID]) REFERENCES [app].[SubOutput] ([SubOutput_ID]);


GO
PRINT N'Creating FK_SubOutputSubOutputLink_SubOutput1...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink] WITH NOCHECK
    ADD CONSTRAINT [FK_SubOutputSubOutputLink_SubOutput1] FOREIGN KEY ([SecondarySubOutput_ID]) REFERENCES [app].[SubOutput] ([SubOutput_ID]) NOT FOR REPLICATION;


GO
ALTER TABLE [app].[SubOutputSubOutputLink] NOCHECK CONSTRAINT [FK_SubOutputSubOutputLink_SubOutput1];


GO
PRINT N'Creating FK_SubOutputPersonRole_ActiveType...';


GO
ALTER TABLE [app].[SubOutputPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_SubOutputPersonRole_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_SubOutputPersonRole_Person...';


GO
ALTER TABLE [app].[SubOutputPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_SubOutputPersonRole_Person] FOREIGN KEY ([Person_ID]) REFERENCES [Core].[Person] ([Person_ID]);


GO
PRINT N'Creating FK_SubOutputPersonRole_Role...';


GO
ALTER TABLE [app].[SubOutputPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_SubOutputPersonRole_Role] FOREIGN KEY ([Role_ID]) REFERENCES [Core].[Role] ([RoleID]);


GO
PRINT N'Creating FK_SubOutputPersonRole_SubOutput...';


GO
ALTER TABLE [app].[SubOutputPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_SubOutputPersonRole_SubOutput] FOREIGN KEY ([SubOutput_ID]) REFERENCES [app].[SubOutput] ([SubOutput_ID]);


GO
PRINT N'Creating FK_SubOutput_ActiveType...';


GO
ALTER TABLE [app].[SubOutput] WITH NOCHECK
    ADD CONSTRAINT [FK_SubOutput_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_SubOutput_Output...';


GO
ALTER TABLE [app].[SubOutput] WITH NOCHECK
    ADD CONSTRAINT [FK_SubOutput_Output] FOREIGN KEY ([Output_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_Indicator_ActiveType...';


GO
ALTER TABLE [app].[Indicator] WITH NOCHECK
    ADD CONSTRAINT [FK_Indicator_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Indicator_Activity...';


GO
ALTER TABLE [app].[Indicator] WITH NOCHECK
    ADD CONSTRAINT [FK_Indicator_Activity] FOREIGN KEY ([Activity_ID]) REFERENCES [app].[Activity] ([ActivityID]);


GO
PRINT N'Creating FK_Indicator_IndicatorType...';


GO
ALTER TABLE [app].[Indicator] WITH NOCHECK
    ADD CONSTRAINT [FK_Indicator_IndicatorType] FOREIGN KEY ([IndicatorType_ID]) REFERENCES [app].[IndicatorType] ([IndicatorType_ID]);


GO
PRINT N'Creating FK_Indicator_Outcome...';


GO
ALTER TABLE [app].[Indicator] WITH NOCHECK
    ADD CONSTRAINT [FK_Indicator_Outcome] FOREIGN KEY ([OutcomeID]) REFERENCES [app].[Outcome] ([OutcomeID]);


GO
PRINT N'Creating FK_Indicator_Output...';


GO
ALTER TABLE [app].[Indicator] WITH NOCHECK
    ADD CONSTRAINT [FK_Indicator_Output] FOREIGN KEY ([Output_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_Indicator_SubOutput...';


GO
ALTER TABLE [app].[Indicator] WITH NOCHECK
    ADD CONSTRAINT [FK_Indicator_SubOutput] FOREIGN KEY ([SubOutput_ID]) REFERENCES [app].[SubOutput] ([SubOutput_ID]);


GO
PRINT N'Creating FK_IndicatorLocation_ActiveType...';


GO
ALTER TABLE [app].[IndicatorLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorLocation_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_IndicatorLocation_Indicator...';


GO
ALTER TABLE [app].[IndicatorLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorLocation_Indicator] FOREIGN KEY ([Indicator_ID]) REFERENCES [app].[Indicator] ([IndicatorID]);


GO
PRINT N'Creating FK_IndicatorLocation_Location...';


GO
ALTER TABLE [app].[IndicatorLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorLocation_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_IndicatorType_ActiveType...';


GO
ALTER TABLE [app].[IndicatorType] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OutcomePersonRole_ActiveType...';


GO
ALTER TABLE [app].[OutcomePersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_OutcomePersonRole_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OutcomePersonRole_Outcome...';


GO
ALTER TABLE [app].[OutcomePersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_OutcomePersonRole_Outcome] FOREIGN KEY ([OutcomeID]) REFERENCES [app].[Outcome] ([OutcomeID]);


GO
PRINT N'Creating FK_OutcomeOrganization_ActiveType...';


GO
ALTER TABLE [app].[OutcomeOrganization] WITH NOCHECK
    ADD CONSTRAINT [FK_OutcomeOrganization_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OutcomeOrganization_Organization...';


GO
ALTER TABLE [app].[OutcomeOrganization] WITH NOCHECK
    ADD CONSTRAINT [FK_OutcomeOrganization_Organization] FOREIGN KEY ([Organization_ID]) REFERENCES [Core].[Organization] ([Organization_ID]);


GO
PRINT N'Creating FK_OutcomeOrganization_Outcome...';


GO
ALTER TABLE [app].[OutcomeOrganization] WITH NOCHECK
    ADD CONSTRAINT [FK_OutcomeOrganization_Outcome] FOREIGN KEY ([OutcomeID]) REFERENCES [app].[Outcome] ([OutcomeID]);


GO
PRINT N'Creating FK_OutputPersonRole_ActiveType...';


GO
ALTER TABLE [app].[OutputPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_OutputPersonRole_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OutputPersonRole_Output...';


GO
ALTER TABLE [app].[OutputPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_OutputPersonRole_Output] FOREIGN KEY ([Output_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_OutputPersonRole_Person...';


GO
ALTER TABLE [app].[OutputPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_OutputPersonRole_Person] FOREIGN KEY ([Person_ID]) REFERENCES [Core].[Person] ([Person_ID]) NOT FOR REPLICATION;


GO
ALTER TABLE [app].[OutputPersonRole] NOCHECK CONSTRAINT [FK_OutputPersonRole_Person];


GO
PRINT N'Creating FK_OutputPersonRole_Role...';


GO
ALTER TABLE [app].[OutputPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_OutputPersonRole_Role] FOREIGN KEY ([Role_ID]) REFERENCES [Core].[Role] ([RoleID]) NOT FOR REPLICATION;


GO
ALTER TABLE [app].[OutputPersonRole] NOCHECK CONSTRAINT [FK_OutputPersonRole_Role];


GO
PRINT N'Creating FK_OutputOutputLink_ActiveType...';


GO
ALTER TABLE [app].[OutputOutputLink] WITH NOCHECK
    ADD CONSTRAINT [FK_OutputOutputLink_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OutputOutputLink_Output...';


GO
ALTER TABLE [app].[OutputOutputLink] WITH NOCHECK
    ADD CONSTRAINT [FK_OutputOutputLink_Output] FOREIGN KEY ([PrimaryOutput_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_OutputOutputLink_Output1...';


GO
ALTER TABLE [app].[OutputOutputLink] WITH NOCHECK
    ADD CONSTRAINT [FK_OutputOutputLink_Output1] FOREIGN KEY ([SecondaryOutput_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_MilestoneLocation_ActiveType...';


GO
ALTER TABLE [app].[MilestoneLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_MilestoneLocation_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_MilestoneLocation_Location...';


GO
ALTER TABLE [app].[MilestoneLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_MilestoneLocation_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_MilestoneLocation_Milestone...';


GO
ALTER TABLE [app].[MilestoneLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_MilestoneLocation_Milestone] FOREIGN KEY ([MilestoneID]) REFERENCES [app].[Milestone] ([MilestoneID]);


GO
PRINT N'Creating FK_Outcome_ActiveType...';


GO
ALTER TABLE [app].[Outcome] WITH NOCHECK
    ADD CONSTRAINT [FK_Outcome_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Activity_ActiveType...';


GO
ALTER TABLE [app].[Activity] WITH NOCHECK
    ADD CONSTRAINT [FK_Activity_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Activity_Project...';


GO
ALTER TABLE [app].[Activity] WITH NOCHECK
    ADD CONSTRAINT [FK_Activity_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_Location_ActiveType...';


GO
ALTER TABLE [Core].[Location] WITH NOCHECK
    ADD CONSTRAINT [FK_Location_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Location_LocationType...';


GO
ALTER TABLE [Core].[Location] WITH NOCHECK
    ADD CONSTRAINT [FK_Location_LocationType] FOREIGN KEY ([LocationType_ID]) REFERENCES [Core].[LocationType] ([LocationType_ID]);


GO
PRINT N'Creating FK_DimDate_ActiveType...';


GO
ALTER TABLE [Core].[DimDate] WITH NOCHECK
    ADD CONSTRAINT [FK_DimDate_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Role_ActiveType...';


GO
ALTER TABLE [Core].[Role] WITH NOCHECK
    ADD CONSTRAINT [FK_Role_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_DataVersion_ActiveType...';


GO
ALTER TABLE [Core].[DataVersion] WITH NOCHECK
    ADD CONSTRAINT [FK_DataVersion_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_DataVersion_DataVersion...';


GO
ALTER TABLE [Core].[DataVersion] WITH NOCHECK
    ADD CONSTRAINT [FK_DataVersion_DataVersion] FOREIGN KEY ([ParentDataVersion_ID]) REFERENCES [Core].[DataVersion] ([DataVersion_ID]);


GO
PRINT N'Creating FK_DataVersion_DataVersionLevel...';


GO
ALTER TABLE [Core].[DataVersion] WITH NOCHECK
    ADD CONSTRAINT [FK_DataVersion_DataVersionLevel] FOREIGN KEY ([DataVersionLevel_ID]) REFERENCES [Core].[DataVersionLevel] ([DataVersionLevel_ID]);


GO
PRINT N'Creating FK_DataVersion_Outcome...';


GO
ALTER TABLE [Core].[DataVersion] WITH NOCHECK
    ADD CONSTRAINT [FK_DataVersion_Outcome] FOREIGN KEY ([Outcome_ID]) REFERENCES [app].[Outcome] ([OutcomeID]);


GO
PRINT N'Creating FK_DataSource_ActiveType...';


GO
ALTER TABLE [Core].[DataSource] WITH NOCHECK
    ADD CONSTRAINT [FK_DataSource_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OrganizationType_ActiveType...';


GO
ALTER TABLE [Core].[OrganizationType] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganizationType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OrganizationPersonRole_ActiveType...';


GO
ALTER TABLE [Core].[OrganizationPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganizationPersonRole_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OrganizationPersonRole_Organization...';


GO
ALTER TABLE [Core].[OrganizationPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganizationPersonRole_Organization] FOREIGN KEY ([Organization_ID]) REFERENCES [Core].[Organization] ([Organization_ID]);


GO
PRINT N'Creating FK_OrganizationPersonRole_Person...';


GO
ALTER TABLE [Core].[OrganizationPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganizationPersonRole_Person] FOREIGN KEY ([Person_ID]) REFERENCES [Core].[Person] ([Person_ID]);


GO
PRINT N'Creating FK_OrganizationPersonRole_Role...';


GO
ALTER TABLE [Core].[OrganizationPersonRole] WITH NOCHECK
    ADD CONSTRAINT [FK_OrganizationPersonRole_Role] FOREIGN KEY ([Role_ID]) REFERENCES [Core].[Role] ([RoleID]);


GO
PRINT N'Creating FK_Organization_ActiveType...';


GO
ALTER TABLE [Core].[Organization] WITH NOCHECK
    ADD CONSTRAINT [FK_Organization_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Organization_Organization...';


GO
ALTER TABLE [Core].[Organization] WITH NOCHECK
    ADD CONSTRAINT [FK_Organization_Organization] FOREIGN KEY ([ParentOrganization_ID]) REFERENCES [Core].[Organization] ([Organization_ID]);


GO
PRINT N'Creating FK_Organization_OrganizationType...';


GO
ALTER TABLE [Core].[Organization] WITH NOCHECK
    ADD CONSTRAINT [FK_Organization_OrganizationType] FOREIGN KEY ([OrganizationType_ID]) REFERENCES [Core].[OrganizationType] ([OrganizationType_ID]);


GO
PRINT N'Creating FK_Person_ActiveType...';


GO
ALTER TABLE [Core].[Person] WITH NOCHECK
    ADD CONSTRAINT [FK_Person_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_LocationType_ActiveType...';


GO
ALTER TABLE [Core].[LocationType] WITH NOCHECK
    ADD CONSTRAINT [FK_LocationType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_DataVersionLevel_ActiveType...';


GO
ALTER TABLE [Core].[DataVersionLevel] WITH NOCHECK
    ADD CONSTRAINT [FK_DataVersionLevel_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_ReportingPeriod_ActiveType...';


GO
ALTER TABLE [Core].[ReportingPeriod] WITH NOCHECK
    ADD CONSTRAINT [FK_ReportingPeriod_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_MilestoneValues_ActiveType...';


GO
ALTER TABLE [RBM].[MilestoneValues] WITH NOCHECK
    ADD CONSTRAINT [FK_MilestoneValues_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_MilestoneValues_DataVersion...';


GO
ALTER TABLE [RBM].[MilestoneValues] WITH NOCHECK
    ADD CONSTRAINT [FK_MilestoneValues_DataVersion] FOREIGN KEY ([DataVersion_ID]) REFERENCES [Core].[DataVersion] ([DataVersion_ID]);


GO
PRINT N'Creating FK_MilestoneValues_Location...';


GO
ALTER TABLE [RBM].[MilestoneValues] WITH NOCHECK
    ADD CONSTRAINT [FK_MilestoneValues_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_MilestoneValues_Milestone...';


GO
ALTER TABLE [RBM].[MilestoneValues] WITH NOCHECK
    ADD CONSTRAINT [FK_MilestoneValues_Milestone] FOREIGN KEY ([Milestone_ID]) REFERENCES [app].[Milestone] ([MilestoneID]);


GO
PRINT N'Creating FK_MilestoneValues_Organization...';


GO
ALTER TABLE [RBM].[MilestoneValues] WITH NOCHECK
    ADD CONSTRAINT [FK_MilestoneValues_Organization] FOREIGN KEY ([Organization_ID]) REFERENCES [Core].[Organization] ([Organization_ID]);


GO
PRINT N'Creating FK_MilestoneValues_ReportingPeriod...';


GO
ALTER TABLE [RBM].[MilestoneValues] WITH NOCHECK
    ADD CONSTRAINT [FK_MilestoneValues_ReportingPeriod] FOREIGN KEY ([ReportPeriodID]) REFERENCES [Core].[ReportingPeriod] ([ID]);


GO
PRINT N'Creating FK_IndicatorValues_ActiveType...';


GO
ALTER TABLE [RBM].[IndicatorValues] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorValues_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_IndicatorValues_DataVersion...';


GO
ALTER TABLE [RBM].[IndicatorValues] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorValues_DataVersion] FOREIGN KEY ([DataVersion_ID]) REFERENCES [Core].[DataVersion] ([DataVersion_ID]);


GO
PRINT N'Creating FK_IndicatorValues_Indicator1...';


GO
ALTER TABLE [RBM].[IndicatorValues] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorValues_Indicator1] FOREIGN KEY ([Indicator_ID]) REFERENCES [app].[Indicator] ([IndicatorID]);


GO
PRINT N'Creating FK_IndicatorValues_Location...';


GO
ALTER TABLE [RBM].[IndicatorValues] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorValues_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_IndicatorValues_Organization...';


GO
ALTER TABLE [RBM].[IndicatorValues] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorValues_Organization] FOREIGN KEY ([Organization_ID]) REFERENCES [Core].[Organization] ([Organization_ID]);


GO
PRINT N'Creating FK_IndicatorValues_ReportingPeriod...';


GO
ALTER TABLE [RBM].[IndicatorValues] WITH NOCHECK
    ADD CONSTRAINT [FK_IndicatorValues_ReportingPeriod] FOREIGN KEY ([ReportPeriodID]) REFERENCES [Core].[ReportingPeriod] ([ID]);


GO
PRINT N'Creating CK_ENFORCE_SINGLE_PARENT_LINK_Status...';


GO
ALTER TABLE [app].[Status] WITH NOCHECK
    ADD CONSTRAINT [CK_ENFORCE_SINGLE_PARENT_LINK_Status] CHECK ((((case when [Output_ID] IS NOT NULL then (1) else (0) end+case when [OutcomeID] IS NOT NULL then (1) else (0) end)+case when [Activity_ID] IS NOT NULL then (1) else (0) end)+case when [SubOutput_ID] IS NOT NULL then (1) else (0) end)=(1));


GO
PRINT N'Creating CK_ENFORCE_SINGLE_PARENT_LINK_MIlestone...';


GO
ALTER TABLE [app].[Milestone] WITH NOCHECK
    ADD CONSTRAINT [CK_ENFORCE_SINGLE_PARENT_LINK_MIlestone] CHECK (((case when [OutcomeID] IS NOT NULL then (1) else (0) end+case when [ActivityID] IS NOT NULL then (1) else (0) end)+case when [ProjectID] IS NOT NULL then (1) else (0) end)=(1));


GO
PRINT N'Creating CK_ENFORCE_SINGLE_PARENT_LINK_Indicator...';


GO
ALTER TABLE [app].[Indicator] WITH NOCHECK
    ADD CONSTRAINT [CK_ENFORCE_SINGLE_PARENT_LINK_Indicator] CHECK (((((case when [Output_ID] IS NOT NULL then (1) else (0) end+case when [OutcomeID] IS NOT NULL then (1) else (0) end)+case when [Activity_ID] IS NOT NULL then (1) else (0) end)+case when [SubOutput_ID] IS NOT NULL then (1) else (0) end)+case when [projectID] IS NOT NULL then (1) else (0) end)=(1));


GO
PRINT N'Creating enforce_srid_geometry_DimMunicipalityGEOM...';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM] WITH NOCHECK
    ADD CONSTRAINT [enforce_srid_geometry_DimMunicipalityGEOM] CHECK ([geom].[STSrid]=(4326));


GO
PRINT N'Creating [dbo].[fn_ConcatenateIndicator_LocationTypeNames]...';


GO

-- =============================================
-- Author:		Mark Stacey
-- Create date: 
-- Description:	
-- =============================================
CREATE FUNCTION  [dbo].[fn_ConcatenateIndicator_LocationTypeNames] 
(
	-- Add the parameters for the function here
	@Indicator_ID int
)
RETURNS varchar(8000)
AS
BEGIN
	
	DECLARE @Result varchar(8000)
	Set @Result = ''
	SELECT @Result = @Result + CHAR(10) + CHAR(13) + src.Name
	FROM (SELECT 
	LT.Description name
	FROM app.Indicator I
	inner join RBM.IndicatorValues IV
	on I.IndicatorID = IV.Indicator_ID
	inner join Core.Location L
	on IV.Location_ID = L.Location_ID
	inner join Core.LocationType LT
	on L.LocationType_ID = LT.LocationType_ID
	WHERE i.IndicatorID = @Indicator_ID
	GROUP BY LT.Description) src
RETURN @Result
END
GO
PRINT N'Creating [dbo].[fn_StripMDXKey]...';


GO

-- =============================================
-- Author:		Mark Stacey
-- Create date: 2011/07/31
-- Description:	
-- =============================================
CREATE FUNCTION [dbo].[fn_StripMDXKey] 
(
	-- Add the parameters for the function here
	@MDXValue varchar(500)
)
RETURNS varchar(500)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(500)
	
	IF ISNUMERIC(@MDXValue) =1  set @Result = @MDXValue 
	
	else 
	BEGIN
	set @MDXValue = REPLACE(@MDXValue, '|','&')
SET @Result = 
 CASE WHEN CHARINDEX('&',@MDXValue) > 0 THEN REPLACE(REVERSE(LEFT(reverse(@MDXValue)
		, 
		CHARINDEX('&',reverse(@MDXValue)) -2
		
		)),']','')
		
		WHEN CHARINDEX('[', @MDXValue) > 0 THEN
		REPLACE(RIGHT (@MDXValue
,
CHARINDEX('[',REVERSE(@MDXValue))-1
), ']','')
		
ELSE CAST( @MDXValue  as varchar(255)) END
END
	-- Return the result of the function
	RETURN @Result

END
GO
PRINT N'Creating [app].[DimActivity]...';


GO
CREATE view [app].[DimActivity] as
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT  [ActivityID] as Activity_ID
            ,ShortName + ' : ' + left(LongName,80) as ShortName
      ,Left(LongName, 255) as LongName
      ,left(Code + ' : ' + LongName,255) as FullName
      ,Left(TextDescription,255) as TextDescription
      --,[SubOutput_ID]
      --,[BusinessKey]
      --,[Target]
      ,[Code]
      --,[ActivityType_ID]
      --,[Sharepoint_ID]

  FROM [app].[Activity]
GO
PRINT N'Creating [app].[DimSubOutput]...';


GO

CREATE VIEW 
 [app].[DimSubOutput]
as
/****** Script for SelectTopNRows command from SSMS  ******/
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT  [SubOutput_ID]
            ,ShortName + ' : ' + left(LongName,80) as ShortName
      ,Left(LongName, 255) as LongName
      ,left(ShortName + ' : ' + left(LongName,80),255) as FullName
      ,Left(TextDescription,255) as TextDescription
      ,[BusinessKey]
      ,[Output_ID]
      --,[Target]
      ,[Code]
  --    ,[Sharepoint_ID]

  FROM [App].[SubOutput]
GO
PRINT N'Creating [app].[DimOutput]...';


GO
CREATE VIEW 
 [app].[DimOutput]
as
/****** Script for SelectTopNRows command from SSMS  ******/
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT  [Output_ID]
            ,ShortName + ' : ' + left(LongName,80) as ShortName
      ,Left(LongName, 255) as LongName
      ,left(ShortName + ' : ' + left(LongName,80),255) as FullName
      ,Left(TextDescription,255) as TextDescription
      ,[BusinessKey]
      ,[OutcomeID]
     -- ,[Target]
      ,[Code]
      --,[Sharepoint_ID]

  FROM [App].[Output]
GO
PRINT N'Creating [app].[DimOutcome]...';


GO

CREATE VIEW [app].[DimOutcome]
as
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT  [OutcomeID] as [Outcome_ID]
      ,[Code]
            ,ShortName + ' : ' + left(LongName,80) as ShortName
      ,Left(LongName, 255) as LongName
      ,left(ShortName + ' : ' + LongName,255) as FullName
      ,Left(TextDescription,255) as TextDescription
      ,[BusinessKey]
      --,[Target]
     -- ,[Sharepoint_ID]


  FROM app.[Outcome]
GO
PRINT N'Creating [Core].[ReportCycle]...';


GO

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [Core].[ReportCycle]
AS
SELECT        CASE WHEN MonthNumber BETWEEN 3 AND 5 THEN 1 WHEN MonthNumber BETWEEN 6 AND 8 THEN 2 WHEN MonthNumber BETWEEN 9 AND 
                         11 THEN 3 WHEN MonthNumber IN (12, 1, 2) THEN 4 END AS ReportingPeriod, DateID AS StartDateID, DATEPART(year, DATEADD(Day, - 1, DATEADD(month, 
                         3, Date))) * 10000 + DATEPART(month, DATEADD(Day, - 1, DATEADD(month, 3, Date))) * 100 + DATEPART(Day, DATEADD(Day, - 1, DATEADD(month, 3, Date))) 
                         AS EndDateID, Date AS FirstCycleDate, DATEADD(Day, - 1, DATEADD(month, 3, Date)) AS LastCycleDate, YearName, YearNumber
FROM            Core.DimDate
WHERE        (Day = 1) AND (MonthNumber IN (3, 6, 9, 12))
GO
PRINT N'Creating [mm].[Outcome1MenuLink]...';


GO

CREATE VIEW [mm].[Outcome1MenuLink]
AS
/*
SELECT     Title = 'Indicator Details', 
                      Link = '/Outcome1/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode=' + '[Sub Output].[Sub Output].%26[' + CAST(dso.SubOutput_ID
                       AS varchar(8)) + ']', ID = 100 * dso.suboutput_id, Parent =
                          (SELECT     ID
                            FROM          mm.Outcome1MenuGROUP G
                            WHERE      G.Title  = replace(dso.Code,'STP','') + ' : ' + dso.LongName)
FROM         app.DimSubOutput dso INNER JOIN
                      app.DimOutput do ON dso.Output_ID = do.Output_ID
WHERE     do.outcomeId=7
UNION ALL
SELECT     Title = 'Provincial Indicator Details', 
                      Link = '/Outcome1/Dashboards/Template%20Pages/Provincial%20Indicator%20Details%20Page.aspx?qsIndCode=' + '[Sub Output].[Sub Output].%26[' + CAST(dso.SubOutput_ID
                       AS varchar(8)) + ']', Priority = 100 * dso.suboutput_id, Parent =
                          (SELECT     ID
                            FROM          mm.Outcome1MenuGROUP G
                            WHERE      G.Title  = replace(dso.Code,'STP','') + ' : ' + dso.LongName)
FROM         app.DimSubOutput dso INNER JOIN
                      app.DimOutput do ON dso.Output_ID = do.Output_ID
WHERE     do.outcomeId=7
UNION ALL
SELECT     
 Title = Replace(replace(da.FullName, '"', ''),'ACT1','1')
,Link = '/Outcome1/Dashboards/Template%20Pages/Milestones%20Page.aspx?qsActivity=' + '[Activity].[Activity].%26[' + CAST(da.activity_ID AS varchar(8)) + ']'
, Priority = 1 - da.Activity_ID + 5000
, Parent = (SELECT ID FROM mm.Outcome1MenuGROUP G WHERE G.ID = dso.SubOutput_ID)
FROM
app.DimActivity da INNER JOIN
app.DimSubOutput dso ON da.SubOutput_ID = dso.SubOutput_ID INNER JOIN
app.DimOutput do ON dso.Output_ID = do.Output_ID
WHERE do.outcomeId=7
*/
SELECT 'Not implemented' as X
GO
PRINT N'Creating [mm].[ALL_OutcomeMenuCategory]...';


GO





CREATE VIEW [mm].[ALL_OutcomeMenuCategory]
AS
/*---Outputs*/ 
SELECT Title = 'Outcome Pages', Link = '', ID = 10000 , OutcomeID,[OutcomeSiteName]
FROM app.Outcome 

UNION ALL
SELECT     Title = do.ShortName, 
           Link = '' ---/Outcome2/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx' + CONVERT(Nvarchar(20), do.Output_ID) 
		   ,1 - do.Output_ID +	 5000 as ID 
		   ,do.OutcomeID,OC.[OutcomeSiteName]
 FROM app.Output do Left Join app.Outcome as OC on do.OutcomeID=oc.OutcomeID
--WHERE     do.OutcomeID = 9 --- LIKE 'Outcome 2.%'
--end
UNION ALL 
/*---Outputs*/ SELECT Title = 'Projects', Link = '', ID = 30000, OutcomeID,[OutcomeSiteName]
FROM app.Outcome
GO
PRINT N'Creating [mm].[Outcome3MenuCategory]...';


GO







CREATE VIEW [mm].[Outcome3MenuCategory]
AS
SELECT Substring(Title,1,50) as Title, Link, ID 
FROM [mm].[ALL_OutcomeMenuCategory]
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=3)
GO
PRINT N'Creating [mm].[Outcome2MenuCategory]...';


GO






CREATE VIEW [mm].[Outcome2MenuCategory]
AS
SELECT Substring(Title,1,50) as Title, Link, ID 
FROM [mm].[ALL_OutcomeMenuCategory]
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=2)
GO
PRINT N'Creating [mm].[Outcome1MenuCategory]...';


GO








CREATE VIEW [mm].[Outcome1MenuCategory]
AS
SELECT Substring(Title,1,50) as Title, Link, ID 
FROM [mm].[ALL_OutcomeMenuCategory]
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=1)
GO
PRINT N'Creating [mm].[Outcome8MenuCategory]...';


GO








CREATE VIEW [mm].[Outcome8MenuCategory]
AS
SELECT Substring(Title,1,50) as Title, Link, ID 
FROM [mm].[ALL_OutcomeMenuCategory]
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=8)
GO
PRINT N'Creating [dbo].[DimIndicatorMultiLevel]...';


GO


CREATE VIEW  [DimIndicatorMultiLevel]
as 
/*SELECT top 1000000 *


,TermsetDeepGrainID = COALESCE(TermSetID7, TermsetID6, TermsetId5, TermsetID4, TermsetID3, TermsetID2, TermsetID1)
 FROM (

      ---------------------------------------


      SELECT NameLevel = 'Program of Action'
	  ,TermSetDescription  = 'Program of Action Outcomes'
	  ,LCID = ''
	  ,AvailableForTagging = 'TRUE'
	  ,TermDescription = ''
      ,TermSetLevel1 = oc.shortname --+ ' : ' + LEFT(oc.Longname,80) 
       
      ,TermSetLevel2 = 'Indicators'
      ,TermSetLevel3 =   i.shortname + ' : ' + left(i.longname,80)
      ,TermSetLevel4 = null
      ,TermSetLevel5 = null
      ,TermSetLevel6 = null
      ,TermSetLevel7 = null
      
      
      ,CodeLevel1 = oc.Code
      ,CodeLevel2 = 'Ind'
      ,CodeLevel3 =   i.Code
      ,CodeLevel4 = null
      ,CodeLevel5 = null
      ,CodeLevel6 = null
      ,CodeLevel7 = null
      
      ,NameLevel1 = oc.shortname 
      ,NameLevel2 = 'Indicators'
      ,NameLevel3 =   i.ShortName
      ,NameLevel4 = null
      ,NameLevel5 = null
      ,NameLevel6 = null
      ,NameLevel7 = null
      
      ,LongNameLevel1 = oc.LongName 
      ,LongNameLevel2 = 'Indicators'
      ,LongNameLevel3 =   i.LongName
      ,LongNameLevel4 = null
      ,LongNameLevel5 = null
      ,LongNameLevel6 = null
      ,LongNameLevel7 = null
      
      
       ,TermSetID1 = RIGHT ('000' + Cast( oc.OutcomeID as varchar(50)), 4)
      ,TermSetID2 = RIGHT ('000' + Cast( oc.OutcomeID as varchar(50)), 4) + 'Indicators'
      ,TermSetID3 = RIGHT ('000' + Cast(   i.IndicatorID as varchar(50)), 4)
      ,TermSetID4 = null
      ,TermSetID5 = null
      ,TermSetID6 = null
      ,TermSetID7 = null
      ,Indicator_ID = i.IndicatorID
      ,i.UnitOfMeasure,i.isKeyIndicator
      from app.Outcome oc

      
       inner join app.INdicator I
      on oc.OutcomeID = i.OutcomeID
           UNION ALL
      ------------------------------------
      --Outputs
      


      SELECT NameLevel = 'Program of Action'
	  ,TermSetDescription  = 'Program of Action Outcomes'
	  ,LCID = ''
	  ,AvailableForTagging = 'TRUE'
	  ,TermDescription = ''
      ,TermSetLevel1 = oc.shortname --+ ' : ' + LEFT(oc.Longname,80) 
      ,TermSetLevel2 =  otp.shortname + ' : ' + left(otp.longname,80)
      ,TermSetLevel3 = 'Indicators'
      ,TermSetLevel4 =  i.shortname + ' : ' + left(i.longname,80)
      ,TermSetLevel5 = null
      ,TermSetLevel6 = null
      ,TermSetLevel7 = null
      
      ,CodeLevel1 = oc.Code
      ,CodeLevel2 = otp.Code
      ,CodeLevel3 = 'Ind'
      ,CodeLevel4 = i.Code
      ,CodeLevel5 = null
      ,CodeLevel6 = null
      ,CodeLevel7 = null
      
      ,NameLevel1 = oc.shortname --+ ' : ' + LEFT(oc.Longname,80)
      ,NameLevel2 = otp.ShortName
      ,NameLevel3 = 'Indicators' 
      ,NameLevel4 =  i.ShortName
      ,NameLevel5 = null
      ,NameLevel6 = null
      ,NameLevel7 = null
      
       ,LongNameLevel1 = oc.LongName --+ ' : ' + LEFT(oc.LongLongName,80)
      ,LongNameLevel2 = otp.LongName
      ,LongNameLevel3 = 'Indicators' 
      ,LongNameLevel4 =  i.LongName
      ,LongNameLevel5 = null
      ,LongNameLevel6 = null
      ,LongNameLevel7 = null
      ,TermSetID1 = RIGHT ('000' + Cast( oc.OutcomeID  as varchar(50)), 4) 
      ,TermSetID2 = RIGHT ('000' + Cast(  otp.Output_ID  as varchar(50)), 4) 
      ,TermSetID3 = RIGHT ('000' +Cast(  otp.Output_ID as varchar(50)), 4)  + 'Indicators' 
      ,TermSetID4 = RIGHT ('000' +Cast( i.IndicatorID as varchar(50)), 4) 
      ,TermSetID5 = null
      ,TermSetID6 = null
      ,TermSetID7 = null
      ,Indicator_ID = i.IndicatorID
      ,i.UnitOfMeasure,i.isKeyIndicator
      from app.Outcome oc
      inner join app.Output otp
      on oc.outcomeid = otp.outcomeid

      
       inner join app.INdicator I
      on otp.output_id = i.output_id
      
           
      
      
       UNION ALL
      SELECT NameLevel = 'Program of Action'
	  ,TermSetDescription  = 'Program of Action Outcomes'
	  ,LCID = ''
	  ,AvailableForTagging = 'TRUE'
	  ,TermDescription = ''
      ,TermSetLevel1 = oc.shortname --+ ' : ' + LEFT(oc.Longname,80) 
      ,TermSetLevel2 =  otp.shortname + ' : ' + left(otp.longname,80)
      ,TermSetLevel3 = so.shortname + ' : ' + left(so.longname,80)
      ,TermSetLevel4 = 'Indicators'
      ,TermSetLevel5 = i.shortname + ' : ' + left(i.longname,80)
      ,TermSetLevel6 = null
      ,TermSetLevel7 = null
      ,CodeLevel1 = oc.Code
      ,CodeLevel2 = otp.Code
      ,CodeLevel3 = so.Code
      ,CodeLevel4 = 'Ind'
      ,CodeLevel5 = i.Code
      ,CodeLevel6 = null
      ,CodeLevel7 = null
      
      ,NameLevel1 = oc.shortname --+ ' : ' + LEFT(oc.Longname,80) 
      ,NameLevel2 = otp.ShortName
      ,NameLevel3 =  so.ShortName
      ,NameLevel4 =  'Indicators'
      ,NameLevel5 = i.ShortName
      ,NameLevel6 = null
      ,NameLevel7 = null
            ,LongNameLevel1 = oc.TextDescription --+ ' : ' + LEFT(oc.LongName,80) 
      ,LongNameLevel2 = otp.TextDescription
      ,LongNameLevel3 =  so.TextDescription
      ,LongNameLevel4 =  'Indicators'
      ,LongNameLevel5 = i.LongName
      ,LongNameLevel6 = null
      ,LongNameLevel7 = null
       ,TermSetID1 = RIGHT ('000' + Cast( oc.OutcomeID as varchar(50)), 4)
      ,TermSetID2 = RIGHT ('000' +Cast(  otp.Output_ID as varchar(50)),4)
      ,TermSetID3 = RIGHT ('000' +Cast( so.SubOutput_ID as varchar(50)),4)
      ,TermSetID4 = RIGHT ('000' +Cast( so.SubOutput_ID as varchar(50)),4) + 'Indicators'
      ,TermSetID5 = RIGHT ('000' +Cast( i.IndicatorID as varchar(50)),4)
      ,TermSetID6 = null
      ,TermSetID7 = null
       ,Indicator_ID = i.IndicatorID
       ,i.UnitOfMeasure,i.isKeyIndicator
      from app.Outcome oc
      inner join app.Output otp
      on oc.outcomeid = otp.outcomeid
       inner join app.SubOutput so
      on otp.output_id = so.output_id
      
       inner join app.INdicator I
      on so.suboutput_id = i.suboutput_id
      
      
      ----------------------------------
      --Activities

      
      UNION ALL
       SELECT NameLevel = 'Program of Action'
	  ,TermSetDescription  = 'Program of Action Outcomes'
	  ,LCID = ''
	  ,AvailableForTagging = 'TRUE'
	  ,TermDescription = ''
      ,TermSetLevel1 = oc.shortname --+ ' : ' + LEFT(oc.Longname,80) 
      ,TermSetLevel2 =  otp.shortname + ' : ' + left(otp.longname,80)
      ,TermSetLevel3 = so.shortname + ' : ' + left(so.longname,80)
      ,TermSetLevel4 = a.shortname + ' : ' + left(a.longname,80)
      ,TermSetLevel5 = 'Indicators'
      ,TermSetLevel6 = i.shortname + ' : ' + left(i.longname,80)
      ,TermSetLevel7 = null
      ,CodeLevel1 = oc.Code
      ,CodeLevel2 = otp.Code
      ,CodeLevel3 = so.Code
      ,CodeLevel4 = a.Code
      ,CodeLevel5 = 'Ind'
      ,CodeLevel6 = i.Code
      ,CodeLevel7 = null
      
      ,NameLevel1 = oc.shortname --+ ' : ' + LEFT(oc.Longname,80) 
      ,NameLevel2 = otp.ShortName
      ,NameLevel3 =  so.ShortName
      ,NameLevel4 =  a.ShortName
      ,NameLevel5 = 'Indicators'
      ,NameLevel6 = i.ShortName
      ,NameLevel7 = null
            ,LongNameLevel1 = oc.LongName --+ ' : ' + LEFT(oc.LongLongName,80) 
      ,LongNameLevel2 = otp.LongName
      ,LongNameLevel3 =  so.LongName
      ,LongNameLevel4 =  a.LongName
      ,LongNameLevel5 = 'Indicators'
      ,LongNameLevel6 = i.LongName
      ,LongNameLevel7 = null
        ,TermSetID1 = RIGHT ('000' + Cast( oc.OutcomeID as varchar(50)), 4)
      ,TermSetID2 = RIGHT ('000' +Cast(  otp.Output_ID as varchar(50)),4)
      ,TermSetID3 = RIGHT ('000' +Cast( so.SubOutput_ID as varchar(50)),4)
      ,TermSetID4 =RIGHT ('000' + Cast( a.ActivityID as varchar(50)),4)
      ,TermSetID5 =RIGHT ('000' +Cast(  a.ActivityID as varchar(50)),4) + 'Indicators'
      ,TermSetID6 = RIGHT ('000' +Cast( i.IndicatorID as varchar(50)),4)
      ,TermSetID7 = null
 
 ,Indicator_ID = i.IndicatorID
 ,i.UnitOfMeasure,i.isKeyIndicator
      from app.Outcome oc
      inner join app.Output otp
      on oc.outcomeID = otp.outcomeID
       inner join app.SubOutput so
      on otp.output_id = so.output_id
      
       inner join app.Activity A
      on so.suboutput_id = a.suboutputID
      
      inner join app.Indicator I
      on a.activityID = i.activity_id

      
      ) src 
     
	  WHERE 
			(	COALESCE (TermSetLevel1, '') NOT LIKE '%Overall Status%'	) 
		AND (	COALESCE (TermSetLevel2, '') NOT LIKE '%Overall Status%'	) 
		AND (	COALESCE (TermSetLevel3, '') NOT LIKE '%Overall Status%'	) 
		AND (	COALESCE (TermSetLevel4, '') NOT LIKE '%Overall Status%'	) 
		AND (	COALESCE (TermSetLevel5, '') NOT LIKE '%Overall Status%'	) 
		AND (	COALESCE (TermSetLevel6, '') NOT LIKE '%Overall Status%'	) 
		AND (	COALESCE (TermSetLevel7, '') NOT LIKE '%Overall Status%'	)
	  

      ORDER BY TermSetID1,
  TermSetID2,
  TermSetID3,
  TermSetID4,
  TermSetID5,
  TermSetID6,
  TermSetID7

  */
  SELECT 'Not implemented' as X
GO
PRINT N'Creating [app].[ReportingPeriod]...';


GO

CREATE VIEW [app].[ReportingPeriod]
AS
SELECT        CONVERT(int, CONVERT(Varchar(4), YearNumber) + CONVERT(Varchar(1), ReportingPeriod)) AS ReportingPeriodID, ReportingPeriod, StartDateID, EndDateID, 
                         FirstCycleDate, LastCycleDate, YearName, YearNumber
FROM            Core.ReportCycle
GO
PRINT N'Creating [mm].[Outcome4MenuCategory]...';


GO








CREATE VIEW [mm].[Outcome4MenuCategory]
AS
SELECT Substring(Title,1,50) as Title, Link, ID 
FROM [mm].[ALL_OutcomeMenuCategory]
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=4)
GO
PRINT N'Creating [mm].[Outcome7MenuCategory]...';


GO








CREATE VIEW [mm].[Outcome7MenuCategory]
AS
SELECT Substring(Title,1,50) as Title, Link, ID 
FROM [mm].[ALL_OutcomeMenuCategory]
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=7)
GO
PRINT N'Creating [mm].[Outcome6MenuCategory]...';


GO








CREATE VIEW [mm].[Outcome6MenuCategory]
AS
SELECT Substring(Title,1,50) as Title, Link, ID 
FROM [mm].[ALL_OutcomeMenuCategory]
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=6)
GO
PRINT N'Creating [mm].[Outcome5MenuCategory]...';


GO








CREATE VIEW [mm].[Outcome5MenuCategory]
AS
SELECT Substring(Title,1,50) as Title, Link, ID 
FROM [mm].[ALL_OutcomeMenuCategory]
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=5)
GO
PRINT N'Creating [mm].[ALL_OutcomeMenuGroup]...';


GO







CREATE VIEW [mm].[ALL_OutcomeMenuGroup]
AS
SELECT     TOP (10000)  Title, Link, Parent, ID, OutcomeID
FROM         (
                                         SELECT  
                                                dso.Code AS orderBy1
                                                ,1 AS orderby2
                                                ,dso.ShortName AS Title
                                                ,'/'+oc.[OutcomeSiteName]+'/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode=' + '[Sub Output].[Sub Output].%26[' + CAST(dso.SubOutput_ID AS varchar(8)) + ']' AS Link
                                                ,(SELECT ID FROM mm.All_OutcomeMenuCategory where (Title = do.ShortName)
												AND All_OutcomeMenuCategory.OutcomeID = do.OutcomeID
												) AS Parent
                                                , 1 - dso.SubOutput_ID + 5000 AS ID
												, do.OutcomeID 
                                         FROM          
                                                app.SubOutput AS dso INNER JOIN
                                                app.Output AS do ON dso.Output_ID = do.Output_ID
												inner Join app.Outcome as OC on do.OutcomeID=oc.OutcomeID
												WHERE dso.Active=1
												
										
                    UNION ALL
                        SELECT  
                                                do.ShortName AS orderBy1
                                                ,1 AS orderby2
                                                ,do.ShortName + ' Indicators' AS Title
                                                ,'/'+[OutcomeSiteName]+'/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode=' + '[Output].[Output].%26[' + CAST(do.Output_ID AS varchar(8)) + ']' AS Link
                                                ,(SELECT ID FROM mm.All_OutcomeMenuCategory WHERE (Title = do.ShortName)
												AND All_OutcomeMenuCategory.OutcomeID = do.OutcomeID
												) AS Parent
                                                , 100 + do.Output_ID AS ID
												, dom.OutcomeID
                                         FROM          
                                                app.Output AS do INNER JOIN
                                                app.Outcome AS dom ON do.OutcomeID = dom.OutcomeID
												Where do.Active = 1
												
               UNION ALL
                       SELECT     '10003' AS OrderBy1, 0 AS OrderBy2, 'Outcome Level Indicators' AS Title, 
                                             '/'+[OutcomeSiteName]+'/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode=[Outcome].[Outcome].%26[10]' AS Link,
                                                 (SELECT     ID
                                                   FROM          mm.All_OutcomeMenuCategory AS OMC_7
                                                   WHERE      (Title = 'Outcome Pages')
												   AND OMC_7.OutcomeID = O.OutcomeID
												   ) AS Parent, 70 AS ID
												   , OutcomeID 
												   FROM app.Outcome O
												   Where Active = 1
                       
					   
					    UNION ALL
                       SELECT     '10006' AS OrderBy1, 0 AS OrderBy2, 'Outcome Documents' AS Title, '/'+[OutcomeSiteName]+'/Documents/Forms/AllItems.aspx' AS Link,
                                                 (SELECT     ID
                                                   FROM          mm.All_OutcomeMenuCategory AS OMC_4
                                                   WHERE      (Title = 'Outcome Pages')
												    AND OMC_4.OutcomeID = O.OutcomeID
												   ) AS Parent, 40 AS ID
												   , OutcomeID 
												    FROM app.Outcome O
													 Where Active = 1
                       UNION ALL
                       SELECT     '10008' AS OrderBy1, 0 AS OrderBy2, 'Outcome Contact Info' AS Title,'/'+[OutcomeSiteName]+'/Pages/OutcomeContacts.aspx' AS Link,
                                                 (SELECT     ID
                                                   FROM          mm.All_OutcomeMenuCategory AS OMC_2
                                                   WHERE      (Title = 'Outcome Pages')
												    AND OMC_2.OutcomeID = O.OutcomeID) AS Parent, 20 AS ID
													, OutcomeID 
												    FROM app.Outcome O
													 Where Active = 1
                       UNION ALL
                       SELECT     '10009' AS OrderBy1, 0 AS OrderBy2, 'FAQs' AS Title, '/'+[OutcomeSiteName]+'/Outcome%20Wiki' AS Link,
                                                 (SELECT     ID
                                                   FROM          mm.All_OutcomeMenuCategory AS OMC_1
                                                   WHERE      (Title = 'Outcome Pages')
												    AND OMC_1.OutcomeID = O.OutcomeID) AS Parent, 10 AS ID
													, OutcomeID 
													FROM app.Outcome O
													 Where Active = 1

				UNION ALL
                       SELECT     P.ShortName AS OrderBy1, 30000 AS OrderBy2
									, P.ShortName AS Title,
									'' AS Link,
									 Src.ID AS  Parent
											,SRC.ID +  P.ProjectID as ID
											, OutcomeID 
								FROM app.Project P
								CROSS APPLY 
								(SELECT ID
										FROM mm.All_OutcomeMenuCategory 
											WHERE Title = 'Projects'
											AND All_OutcomeMenuCategory.OutcomeID = P.OutcomeID) Src
			) AS t
				

ORDER BY   orderby1, orderby2
GO
PRINT N'Creating [mm].[Outcome2MenuGroup]...';


GO








CREATE VIEW [mm].[Outcome2MenuGroup]
AS
SELECT      Substring(Title,1,50) as Title, Link, Parent, ID
FROM mm.ALL_OutcomeMenuGroup 
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=2)
GO
PRINT N'Creating [mm].[Outcome1MenuGroup]...';


GO









CREATE VIEW [mm].[Outcome1MenuGroup]
AS
SELECT      Substring(Title,1,50) as Title, Link, Parent, ID
FROM mm.ALL_OutcomeMenuGroup 
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=1)
GO
PRINT N'Creating [mm].[Outcome3MenuGroup]...';


GO








CREATE VIEW [mm].[Outcome3MenuGroup]
AS
SELECT      Title, Link, Parent, ID
FROM mm.ALL_OutcomeMenuGroup 
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=3)
GO
PRINT N'Creating [mm].[Outcome4MenuGroup]...';


GO










CREATE VIEW [mm].[Outcome4MenuGroup]
AS
SELECT      Substring(Title,1,50) as Title, Link, Parent, ID
FROM mm.ALL_OutcomeMenuGroup 
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=4)
GO
PRINT N'Creating [mm].[Outcome8MenuGroup]...';


GO










CREATE VIEW [mm].[Outcome8MenuGroup]
AS
SELECT      Substring(Title,1,50) as Title, Link, Parent, ID
FROM mm.ALL_OutcomeMenuGroup 
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=8)
GO
PRINT N'Creating [mm].[Outcome7MenuGroup]...';


GO










CREATE VIEW [mm].[Outcome7MenuGroup]
AS
SELECT      Substring(Title,1,50) as Title, Link, Parent, ID
FROM mm.ALL_OutcomeMenuGroup 
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=7)
GO
PRINT N'Creating [mm].[Outcome6MenuGroup]...';


GO










CREATE VIEW [mm].[Outcome6MenuGroup]
AS
SELECT      Substring(Title,1,50) as Title, Link, Parent, ID
FROM mm.ALL_OutcomeMenuGroup 
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=6)
GO
PRINT N'Creating [mm].[Outcome5MenuGroup]...';


GO










CREATE VIEW [mm].[Outcome5MenuGroup]
AS
SELECT      Substring(Title,1,50) as Title, Link, Parent, ID
FROM mm.ALL_OutcomeMenuGroup 
WHERE OutcomeId		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, OutcomeID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=5)
GO
PRINT N'Creating [mm].[ALL_OutcomeMenuLink]...';


GO







CREATE VIEW [mm].[ALL_OutcomeMenuLink]
AS
SELECT     Title = 'Indicator Details', 
                      Link = '/'+[OutcomeSiteName]+'/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode=' + '[Sub Output].[Sub Output].%26[' + CAST(dso.SubOutput_ID
                       AS varchar(8)) + ']', ID = 100 * dso.suboutput_id, Parent =
                          (SELECT     ID
                            FROM          mm.ALL_OutcomeMenuGROUP G
                            WHERE      G.Title  = dso.ShortName
							AND G.OutcomeID = do.OutcomeID)
							, do.OutcomeID
FROM         app.SubOutput dso INNER JOIN
                      app.Output do ON dso.Output_ID = do.Output_ID
					  inner join app.Outcome as OC on do.OutcomeID=oc.OutcomeID
					  WHERE dso.Active = 1

UNION ALL
SELECT     Title = 'Provincial Indicator Details', 
                      Link = '/'+[OutcomeSiteName]+'/Dashboards/Template%20Pages/Provincial%20Indicator%20Details%20Page.aspx?qsIndCode=' + '[Sub Output].[Sub Output].%26[' + CAST(dso.SubOutput_ID
                       AS varchar(8)) + ']', Priority = 100 * dso.suboutput_id, Parent =
                          (SELECT     ID
                            FROM          mm.ALL_OutcomeMenuGROUP G
                            WHERE      G.Title  = dso.ShortName
							AND G.OutcomeID = DO.OutcomeID
							) 
							,do.OutcomeID
FROM         app.SubOutput dso INNER JOIN
                      app.Output do ON dso.Output_ID = do.Output_ID
					  inner join app.Outcome as OC on do.OutcomeID=oc.OutcomeID
					  WHERE dso.Active = 1

UNION ALL



SELECT     
 Title = Da.ShortName
,Link = '/'+[OutcomeSiteName]+'/Dashboards/Template%20Pages/Milestones%20Page.aspx?qsActivity=' + '[Activity].[Activity].%26[' + CAST(da.activityID AS varchar(8)) + ']'
, Priority = 1 - da.ActivityID + 5000
, Parent = (SELECT     SRC.ID +  P.ProjectID as ID
								FROM app.Project P
								CROSS APPLY 
								(SELECT ID
										FROM mm.Outcome2MenuCategory O2MC 
											WHERE Title = 'Projects') Src
								WHERE OutcomeID = dp.OutcomeID
								AND P.ProjectID = da.ProjectID
								) 
, Dp.OutcomeID
FROM
app.Activity da INNER JOIN
app.Project dp ON da.ProjectID = dp.ProjectID
inner join app.Outcome as OC on dp.OutcomeID=oc.OutcomeID
WHERE da.Active = 1
GO
PRINT N'Creating [mm].[Outcome8MenuLink]...';


GO







CREATE VIEW [mm].[Outcome8MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE OutcomeID = 15
GO
PRINT N'Creating [mm].[Outcome7MenuLink]...';


GO







CREATE VIEW [mm].[Outcome7MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE OutcomeID = 14
GO
PRINT N'Creating [mm].[Outcome6MenuLink]...';


GO







CREATE VIEW [mm].[Outcome6MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE OutcomeID = 13
GO
PRINT N'Creating [mm].[Outcome5MenuLink]...';


GO







CREATE VIEW [mm].[Outcome5MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE OutcomeID = 12
GO
PRINT N'Creating [mm].[Outcome4MenuLink]...';


GO







CREATE VIEW [mm].[Outcome4MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE OutcomeID = 11
GO
PRINT N'Creating [mm].[Outcome3MenuLink]...';


GO






CREATE VIEW [mm].[Outcome3MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE OutcomeID = 10
GO
PRINT N'Creating [mm].[Outcome2MenuLink]...';


GO





CREATE VIEW [mm].[Outcome2MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE OutcomeID = 9
GO
PRINT N'Creating [Core].[uspModIndicatorValue]...';


GO


-- =============================================
-- Author:		Andreas Bergstedt
-- Create date: 2013-03-24
-- Description:	Procedure to insert or update Indicator Value table
-- =============================================
CREATE PROCEDURE [Core].[uspModIndicatorValue]

	-- Add the parameters for the stored procedure here
	@CRUD nvarchar(5),   -- C=Create,R=Read,U=Update,D=Delete
	@IndicatorValues_ID int ,
	@Indicator_ID as [int]  ,
	@BaselineLabel as [varchar](50)  ,
	@BaselineValue as [decimal](20, 5) ,
	@BaselineString as [varchar](max) ,
	@BaselineDate as [date] ,
	@TargetLabel as [varchar](50)  ,
	@TargetValue as [decimal](20, 5) ,
	@TargetValueString as [varchar](max) ,
	@TargetDate as [date] ,
	@ActualLabel as [varchar](50)  ,
	@ActualValue as [decimal](20, 5) ,
	@ActualValueString as [varchar](max) ,
	@ActualDate as [date] ,
	@BusinessKey as [varchar](max) ,
	@Notes as [varchar](max) ,
	@VerifiedActualValue as [decimal](20, 5) ,
	@VerifiedActualNotes as [varchar](max) ,
	@DataVersion_ID as [int]  ,
	@Location_ID as [int]  ,
	@IndicatorStatusPercent as [decimal](18, 2) ,
	@ReportPeriodID as [int]  ,
	@Title as [varchar](255) ,
	@ModifiedDate as [datetime] ,
	@Organization_ID as [int] ,
	@Username as [varchar](255) 

AS
/*BEGIN
	
	SET NOCOUNT ON;
	--Generate Memory Table for Merge
IF @CRUD in ('C','U')
	Begin
	Declare @@TTin as Table(
	[IndicatorValues_ID] [int]  NOT NULL,
	[Indicator_ID] [int] NOT NULL,
	[BaselineLabel] [varchar](50) NOT NULL,
	[BaselineValue] [decimal](20, 5) NULL,
	[BaselineString] [varchar](max) NULL,
	[BaselineDate] [date] NULL,
	[TargetLabel] [varchar](50) NOT NULL,
	[TargetValue] [decimal](20, 5) NULL,
	[TargetValueString] [varchar](max) NULL,
	[TargetDate] [date] NULL,
	[ActualLabel] [varchar](50) NOT NULL,
	[ActualValue] [decimal](20, 5) NULL,
	[ActualValueString] [varchar](max) NULL,
	[ActualDate] [date] NULL,
	[BusinessKey] [varchar](max) NULL,
	[Notes] [varchar](max) NULL,
	[VerifiedActualValue] [decimal](20, 5) NULL,
	[VerifiedActualNotes] [varchar](max) NULL,
	[DataVersion_ID] [int] NOT NULL,
	[Location_ID] [int] NOT NULL,
	[IndicatorStatusPercent] [decimal](18, 2) NULL,
	[ReportPeriodID] [int] NOT NULL,
	[Title] [varchar](255) NULL,
	[ModifiedDate] [datetime] NULL,
	[Organization_ID] [int] NULL,
	[Username] [varchar](255) NULL,
	[sys_CreatedOn] [datetime] NOT NULL,
	[sys_CreatedBy] [nvarchar](255) NOT NULL,
	[sys_ModifiedOn] [datetime] NOT NULL,
	[sys_ModifiedBy] [nvarchar](255) NOT NULL,
	[sys_Active] [int] NOT NULL)
    

	--Insert Parameter Values in temp Table
	
	Insert Into @@TTin
	Select 
	@IndicatorValues_ID,
	@Indicator_ID
      ,@BaselineLabel
      ,@BaselineValue
      ,@BaselineString
      ,@BaselineDate
      ,@TargetLabel
      ,@TargetValue
      ,@TargetValueString
      ,@TargetDate
      ,@ActualLabel
      ,@ActualValue
      ,@ActualValueString
      ,@ActualDate
      ,@BusinessKey
      ,@Notes
      ,@VerifiedActualValue
      ,@VerifiedActualNotes
      ,@DataVersion_ID
      ,@Location_ID
      ,@IndicatorStatusPercent
      ,@ReportPeriodID
      ,@Title
      ,@ModifiedDate
      ,@Organization_ID
      ,@Username
      ,GetUTCDate()--@sys_CreatedOn
      ,''--@sys_CreatedBy
      ,GetUTCDate()--@sys_ModifiedOn
      ,''--@sys_ModifiedBy
      ,1--@sys_Active
	  
	  	--Execute Mege into Live
	Merge Into RBM.IndicatorValues as T
	USING @@TTin as S
	ON  s.IndicatorValues_ID=t.IndicatorValues_ID 
	When MATCHED 
	Then UPDATE
	
	Set 
	t.[Indicator_ID]=s.[Indicator_ID],
/*t.[BaselineLabel]=s.[BaselineLabel],
t.[BaselineValue]=s.[BaselineValue],
t.[BaselineString]=s.[BaselineString],
t.[BaselineDate]=s.[BaselineDate],
t.[TargetLabel]=s.[TargetLabel],
t.[TargetValue]=s.[TargetValue],
t.[TargetValueString]=s.[TargetValueString],
t.[TargetDate]=s.[TargetDate],*/
t.[ActualLabel]=s.[ActualLabel],
t.[ActualValue]=s.[ActualValue],
t.[ActualValueString]=s.[ActualValueString],
t.[ActualDate]=s.[ActualDate],
t.[BusinessKey]=s.[BusinessKey],
t.[Notes]=s.[Notes],
/*t.[VerifiedActualValue]=s.[VerifiedActualValue],
t.[VerifiedActualNotes]=s.[VerifiedActualNotes],*/
t.[DataVersion_ID]=s.[DataVersion_ID],
t.[Location_ID]=s.[Location_ID],
t.[IndicatorStatusPercent]=s.[IndicatorStatusPercent],
t.[ReportPeriodID]=s.[ReportPeriodID],
t.[Title]=s.[Title],
t.[ModifiedDate]=s.[ModifiedDate],
t.[Organization_ID]=s.[Organization_ID],
t.[Username]=s.[Username],
--t.[sys_CreatedOn]=s.[sys_CreatedOn],
--t.[sys_CreatedBy]=s.[sys_CreatedBy],
t.[sys_ModifiedOn]=s.[sys_ModifiedOn],
t.[sys_ModifiedBy]=s.[sys_ModifiedBy]


	WHEN NOT MATCHED Then Insert

	(
	[Indicator_ID]
/*,[BaselineLabel]
,[BaselineValue]
,[BaselineString]
,[BaselineDate]
,[TargetLabel]
,[TargetValue]
,[TargetValueString]
,[TargetDate]*/
,[ActualLabel]
,[ActualValue]
,[ActualValueString]
,[ActualDate]
,[BusinessKey]
,[Notes]
/*,[VerifiedActualValue]
,[VerifiedActualNotes]*/
,[DataVersion_ID]
,[Location_ID]
,[IndicatorStatusPercent]
,[ReportPeriodID]
,[Title]
,[ModifiedDate]
,[Organization_ID]
,[Username]
,[sys_CreatedOn]
,[sys_CreatedBy]
,[sys_ModifiedOn]
,[sys_ModifiedBy]
,[sys_Active]
 

	)
	Values
	(
s.[Indicator_ID],
s.[BaselineLabel],
s.[BaselineValue],
s.[BaselineString],
s.[BaselineDate],
s.[TargetLabel],
s.[TargetValue],
s.[TargetValueString],
s.[TargetDate],
s.[ActualLabel],
s.[ActualValue],
s.[ActualValueString],
s.[ActualDate],
s.[BusinessKey],
s.[Notes],
s.[VerifiedActualValue],
s.[VerifiedActualNotes],
s.[DataVersion_ID],
s.[Location_ID],
s.[IndicatorStatusPercent],
s.[ReportPeriodID],
s.[Title],
s.[ModifiedDate],
s.[Organization_ID],
s.[Username],
s.[sys_CreatedOn],
s.[sys_CreatedBy],
s.[sys_ModifiedOn],
s.[sys_ModifiedBy],
s.[sys_Active]


	);
End

IF @CRUD Like 'R'
Begin 
--Return Result
Select * from RBM.IndicatorValues s where s.IndicatorValues_ID=@IndicatorValues_ID
End
IF @CRUD Like 'D'
Begin 

Update RBM.IndicatorValues  
Set Sys_Active = -1 -- 1 = Active 0=Not Active -1=Deleted
where IndicatorValues_ID=@IndicatorValues_ID
End




END


*/
SELECT 'Not implemented' as X
GO
PRINT N'Creating [Core].[uspModMilestoneValue]...';


GO


-- =============================================
-- Author:		Andreas Bergstedt
-- Create date: 2013-03-24
-- Description:	Procedure to insert or update Milestone Value table
-- =============================================
CREATE PROCEDURE [Core].[uspModMilestoneValue]
	-- Add the parameters for the stored procedure here
	@CRUD nvarchar(5),   -- C=Create,R=Read,U=Update,D=Delete
	@MilestoneValues_ID int ,
	@Milestone_ID as [int]  ,
	@BaselineLabel as [varchar](50)  ,
	@BaselineValue as [decimal](20, 5) ,
	@BaselineString as [varchar](max) ,
	@BaselineDate as [date] ,
	@TargetLabel as [varchar](50)  ,
	@TargetValue as [decimal](20, 5) ,
	@TargetValueString as [varchar](max) ,
	@TargetDate as [date] ,
	@ActualLabel as [varchar](50)  ,
	@ActualValue as [decimal](20, 5) ,
	@ActualValueString as [varchar](max) ,
	@ActualDate as [date] ,
	@BusinessKey as [varchar](max) ,
	@Notes as [varchar](max) ,
	@VerifiedActualValue as [decimal](20, 5) ,
	@VerifiedActualNotes as [varchar](max) ,
	@DataVersion_ID as [int]  ,
	@Location_ID as [int]  ,
	@MilestoneStatusPercent as [decimal](18, 2) ,
	@ReportPeriodID as [int]  ,
	@Title as [varchar](255) ,
	@ModifiedDate as [datetime] ,
	@Organization_ID as [int] ,
	@Username as [varchar](255) 

AS
/*
BEGIN
	
	SET NOCOUNT ON;
	--Generate Memory Table for Merge
IF @CRUD in ('C','U')
	Begin
	Declare @@TTin as Table(
	[MilestoneValues_ID] [int]  NOT NULL,
	[Milestone_ID] [int] NOT NULL,
	[BaselineLabel] [varchar](50) NOT NULL,
	[BaselineValue] [decimal](20, 5) NULL,
	[BaselineString] [varchar](max) NULL,
	[BaselineDate] [date] NULL,
	[TargetLabel] [varchar](50) NOT NULL,
	[TargetValue] [decimal](20, 5) NULL,
	[TargetValueString] [varchar](max) NULL,
	[TargetDate] [date] NULL,
	[ActualLabel] [varchar](50) NOT NULL,
	[ActualValue] [decimal](20, 5) NULL,
	[ActualValueString] [varchar](max) NULL,
	[ActualDate] [date] NULL,
	[BusinessKey] [varchar](max) NULL,
	[Notes] [varchar](max) NULL,
	[VerifiedActualValue] [decimal](20, 5) NULL,
	[VerifiedActualNotes] [varchar](max) NULL,
	[DataVersion_ID] [int] NOT NULL,
	[Location_ID] [int] NOT NULL,
	[MilestoneStatusPercent] [decimal](18, 2) NULL,
	[ReportPeriodID] [int] NOT NULL,
	[Title] [varchar](255) NULL,
	[ModifiedDate] [datetime] NULL,
	[Organization_ID] [int] NULL,
	[Username] [varchar](255) NULL,
	[sys_CreatedOn] [datetime] NOT NULL,
	[sys_CreatedBy] [nvarchar](255) NOT NULL,
	[sys_ModifiedOn] [datetime] NOT NULL,
	[sys_ModifiedBy] [nvarchar](255) NOT NULL,
	[sys_Active] [int] NOT NULL)
    

	--Insert Parameter Values in temp Table
	
	Insert Into @@TTin
	Select 
	@MilestoneValues_ID,
	@Milestone_ID
      ,@BaselineLabel
      ,@BaselineValue
      ,@BaselineString
      ,@BaselineDate
      ,@TargetLabel
      ,@TargetValue
      ,@TargetValueString
      ,@TargetDate
      ,@ActualLabel
      ,@ActualValue
      ,@ActualValueString
      ,@ActualDate
      ,@BusinessKey
      ,@Notes
      ,@VerifiedActualValue
      ,@VerifiedActualNotes
      ,@DataVersion_ID
      ,@Location_ID
      ,@MilestoneStatusPercent
      ,@ReportPeriodID
      ,@Title
      ,@ModifiedDate
      ,@Organization_ID
      ,@Username
      ,GetUTCDate()--@sys_CreatedOn
      ,''--@sys_CreatedBy
      ,GetUTCDate()--@sys_ModifiedOn
      ,''--@sys_ModifiedBy
      ,1--@sys_Active
	  
	  	--Execute Mege into Live
	Merge Into RBM.MilestoneValues as T
	USING @@TTin as S
	ON  s.MilestoneValues_ID=t.MilestoneValues_ID 
	When MATCHED 
	Then UPDATE
	
	Set 
	t.[Milestone_ID]=s.[Milestone_ID],
/*t.[BaselineLabel]=s.[BaselineLabel],
t.[BaselineValue]=s.[BaselineValue],
t.[BaselineString]=s.[BaselineString],
t.[BaselineDate]=s.[BaselineDate],
t.[TargetLabel]=s.[TargetLabel],
t.[TargetValue]=s.[TargetValue],
t.[TargetValueString]=s.[TargetValueString],
t.[TargetDate]=s.[TargetDate],*/
t.[ActualLabel]=s.[ActualLabel],
t.[ActualValue]=s.[ActualValue],
t.[ActualValueString]=s.[ActualValueString],
t.[ActualDate]=s.[ActualDate],
t.[BusinessKey]=s.[BusinessKey],
t.[Notes]=s.[Notes],
t.[VerifiedActualValue]=s.[VerifiedActualValue],
t.[VerifiedActualNotes]=s.[VerifiedActualNotes],
t.[DataVersion_ID]=s.[DataVersion_ID],
t.[Location_ID]=s.[Location_ID],
t.[MilestoneStatusPercent]=s.[MilestoneStatusPercent],
t.[ReportPeriodID]=s.[ReportPeriodID],
t.[Title]=s.[Title],
t.[ModifiedDate]=s.[ModifiedDate],
t.[Organization_ID]=s.[Organization_ID],
t.[Username]=s.[Username],
--t.[sys_CreatedOn]=s.[sys_CreatedOn],
--t.[sys_CreatedBy]=s.[sys_CreatedBy],
t.[sys_ModifiedOn]=s.[sys_ModifiedOn],
t.[sys_ModifiedBy]=s.[sys_ModifiedBy]


	WHEN NOT MATCHED Then Insert

	(
	[Milestone_ID]
,[BaselineLabel]
,[BaselineValue]
,[BaselineString]
,[BaselineDate]
,[TargetLabel]
,[TargetValue]
,[TargetValueString]
,[TargetDate]
,[ActualLabel]
,[ActualValue]
,[ActualValueString]
,[ActualDate]
,[BusinessKey]
,[Notes]
,[VerifiedActualValue]
,[VerifiedActualNotes]
,[DataVersion_ID]
,[Location_ID]
,[MilestoneStatusPercent]
,[ReportPeriodID]
,[Title]
,[ModifiedDate]
,[Organization_ID]
,[Username]
,[sys_CreatedOn]
,[sys_CreatedBy]
,[sys_ModifiedOn]
,[sys_ModifiedBy]
,[sys_Active]
 

	)
	Values
	(
s.[Milestone_ID],
s.[BaselineLabel],
s.[BaselineValue],
s.[BaselineString],
s.[BaselineDate],
s.[TargetLabel],
s.[TargetValue],
s.[TargetValueString],
s.[TargetDate],
s.[ActualLabel],
s.[ActualValue],
s.[ActualValueString],
s.[ActualDate],
s.[BusinessKey],
s.[Notes],
s.[VerifiedActualValue],
s.[VerifiedActualNotes],
s.[DataVersion_ID],
s.[Location_ID],
s.[MilestoneStatusPercent],
s.[ReportPeriodID],
s.[Title],
s.[ModifiedDate],
s.[Organization_ID],
s.[Username],
s.[sys_CreatedOn],
s.[sys_CreatedBy],
s.[sys_ModifiedOn],
s.[sys_ModifiedBy],
s.[sys_Active]


	);
End

IF @CRUD Like 'R'
Begin 
--Return Result
Select * from RBM.MilestoneValues s where s.MilestoneValues_ID=@MilestoneValues_ID
End
IF @CRUD Like 'D'
Begin 

Update RBM.MilestoneValues  
Set Sys_Active = -1 -- 1 = Active 0=Not Active -1=Deleted
where MilestoneValues_ID=@MilestoneValues_ID
End




END
*/
SELECT 'Not implemented' as X
GO
PRINT N'Creating [Core].[sp_IndicatorCaptureProgress]...';


GO



CREATE PROC [Core].[sp_IndicatorCaptureProgress]
@@DataVersion_ID int
,@@Outcome_ID int

, @Location_ID int =1
, @MilestoneCode varchar(255) = '0'
AS

/*

Select 
		(OC.Code + ' : ' + OC.LongName) as Outcome
		,oc.OutcomeID as Outcome_ID
		,(OTP.Code + ' : ' + OTP.LongName) as [Output]
		,otp.Output_ID
		,(STP.Code + ' : ' + STP.LongName) as SubOutput
		,stp.SubOutput_ID
		,(ACT.Code + ' : ' + ACT.LongName) as Activity
		,act.ActivityID as Activity_ID
		,(MST.Code + ' : ' + MST.LongName) as Indicator
		,mst.IndicatorID as Indicator_ID
			,LEFT(RC.YearNumber,4 ) Year
			,RCC.YearNumber as FinancialYear
			,rcC.ReportingPeriod as ReportCycle
			,MSV.DataVersion_ID
			,(Case when MSV.IndicatorStatusPercent Is not null 
				then 1
				else 0
			end)   PercentageCaptured
			,MSV.IndicatorStatusPercent as IndicatorProgressPercent
			,OC.OutcomeID as RolledUpToOutcome_ID
			,OTP.Output_ID as RolledUpToOutput_ID
			,STP.SubOutput_ID as RolledUpToSubOutput_ID
			,MSv.ActualDate as ReportingDate
from app.outcome oc
	Left join app.Output OTP on OC.OutcomeID = OTP.OutcomeID
	Left join app.SubOutput STP on OTP.Output_ID = STP.Output_ID
	Left join app.Activity ACT on stp.SubOutput_ID = ACT.SubOutput_ID
	Left join app.Indicator MST on 
	(act.ActivityID = mst.Activity_ID or 
	stp.SubOutput_ID = MST.SubOutput_ID or
	OTP.Output_ID = MST.Output_ID or
	OC.OutcomeID = MST.OutcomeID)


	Left Outer Join RBM.IndicatorValues MSV on MSV.Indicator_ID=MST.IndicatorID
	inner Join Core.ReportCycle RC on MST.TargetDate_ID Between RC.StartDateID and rc.EndDateID 
	Left Join Core.ReportCycle RCC on rc.YearNumber=RCC.YearNumber
	
Where OC.OutcomeID = @@Outcome_ID and MSV.DataVersion_ID=@@DataVersion_ID


order by (OC.Code + ' : ' + OC.LongName)
      ,(OTP.Code + ' : ' + OTP.LongName)
      ,(STP.Code + ' : ' + STP.LongName)
      ,(ACT.Code + ' : ' + ACT.LongName)
      ,(MST.Code + ' : ' + MST.LongName)
      ,RCC.YearNumber
      ,rCc.ReportingPeriod
      






	  */
	  SELECT 'Not implemented' as X
GO
PRINT N'Creating [Core].[sp_MilestoneCaptureProgress]...';


GO



CREATE PROC [Core].[sp_MilestoneCaptureProgress]
@@DataVersion_ID int
,@@Outcome_ID int

, @Location_ID int =1
, @MilestoneCode varchar(255) = '0'
AS
/*



Select 
		(OC.Code + ' : ' + OC.LongName) as Outcome
		,oc.OutcomeID as Outcome_ID
		,(OTP.Code + ' : ' + OTP.LongName) as [Output]
		,otp.Output_ID
		,(STP.Code + ' : ' + STP.LongName) as SubOutput
		,stp.SubOutput_ID
		,(ACT.Code + ' : ' + ACT.LongName) as Activity
		,act.ActivityID as Activity_ID
		,(MST.Code + ' : ' + MST.LongName) as Milestone
		,mst.MilestoneID as Milestone_ID
			,LEFT(RC.YearNumber,4 ) Year
			,RC.YearNumber as FinancialYear
			,rc.ReportingPeriod as ReportCycle
			,MSV.DataVersion_ID
			,(Case when (MSV.MilestoneStatusPercent Is not null )
				then 1
				else 0
			end)   PercentageCaptured
			,MSV.MilestoneStatusPercent as MilestoneProgressPercent
			,OC.OutcomeID as RolledUpToOutcome_ID
			,OTP.Output_ID as RolledUpToOutput_ID
			,STP.SubOutput_ID as RolledUpToSubOutput_ID
			,MSv.ActualDate as ReportingDate
from app.outcome oc
	inner join app.Output OTP on OC.OutcomeID = OTP.OutcomeID
	inner join app.SubOutput STP on OTP.Output_ID = STP.Output_ID
	inner join app.Activity ACT on stp.SubOutput_ID = ACT.SubOutput_ID
	inner join app.Milestone MST on act.ActivityID = mst.ActivityID
	Left Outer Join RBM.MilestoneValues MSV on MSV.Milestone_ID=MST.MilestoneID
	inner Join Core.ReportCycle RC on MST.TargetDateID Between RC.StartDateID and rc.EndDateID 
	
Where OC.OutcomeID = @@Outcome_ID and MSV.DataVersion_ID=@@DataVersion_ID


order by (OC.Code + ' : ' + OC.LongName)
      ,(OTP.Code + ' : ' + OTP.LongName)
      ,(STP.Code + ' : ' + STP.LongName)
      ,(ACT.Code + ' : ' + ACT.LongName)
      ,(MST.Code + ' : ' + MST.LongName)
      ,RC.YearNumber
      ,rc.ReportingPeriod
      
	  */
	  SELECT 'Not implemented' as X
GO
PRINT N'Creating [dbo].[rptActivityStatus]...';


GO

CREATE PROC [dbo].[rptActivityStatus]
( @OutcomeID int ,
@ReportingPeriodID int)
as

/*
SELECT 
	OM.ShortName as OutcomeName
	,PR.ShortName as OutputName
	,ACT.ShortName As Suboutputname
	,OMIV.IndicatorStatusPercent OutcomeStatus
	,OPIV.IndicatorStatusPercent OutputStatus
	,SOIV.IndicatorStatusPercent SubOutputStatus
			
FROM app.Outcome OM 
	INNER JOIN app.Indicator OmI 
	ON OM.OutcomeID = OMI.OutcomeID
		AND OMI.IndicatorType_ID = 6
	Inner JOIN app.Output OP
		ON OM.OutcomeID = PR.OutcomeID 
	
	INNER JOIN RBM.IndicatorValues OMIV
		ON OMI.IndicatorID = OMIV.Indicator_ID
		
	INNER JOIN app.Indicator OPI 
	ON PR.Output_ID = OPI.Output_ID 
	 AND OPI.IndicatorType_ID = 6

	 
	INNER JOIN RBM.IndicatorValues OPIV
		ON OPI.IndicatorID = OPIV.Indicator_ID

	INNER JOIN app.SubOutput SO
		ON PR.Output_ID = ACT.Output_ID
	 INNER JOIN app.Indicator SOI 
	ON ACT.SubOutput_ID = SOI.SubOutput_ID 
	 AND SOI.IndicatorType_ID = 6

	 
	INNER JOIN RBM.IndicatorValues SOIV
		ON SOI.IndicatorID = SOIV.Indicator_ID

	WHERE (OM.OutcomeID = @OutcomeID 
			OR @OutcomeID = 0)
		AND
			(
				OMIV.ReportPeriodID = @ReportingPeriodID
				AND 
				OPIV.ReportPeriodID = @ReportingPeriodID
				AND 
				SOIV.ReportPeriodID = @ReportingPeriodID
			)
			*/
			
SELECT 
	OM.ShortName as OutcomeName
	,PR.ShortName as ProjectName
	,ACT.ShortName As ActivityName
	,CASE 
	WHEN OMI.OutcomeID IS NOT NULL
		THEN OMIV.IndicatorStatusPercent 
		ELSE NULL 
		END OutcomeStatus
		,CASE 
	WHEN OPP.projectID IS NOT NULL
		THEN OPIV.IndicatorStatusPercent 
		ELSE NULL 
		END ProjectStatus
	,CASE
	WHEN SOI.Activity_ID IS NOT NULL
		THEN SOIV.IndicatorStatusPercent 
		ELSE NULL 
		END ActivityStatus
	
			
FROM app.Outcome OM 
	INNER JOIN app.Indicator OmI 
	ON OM.OutcomeID = OMI.OutcomeID
		AND OMI.IndicatorType_ID = 6
	Inner JOIN app.Project PR
		ON OM.OutcomeID = PR.OutcomeID 
	
	INNER JOIN RBM.IndicatorValues OMIV
		ON OMI.IndicatorID = OMIV.Indicator_ID
		
	INNER JOIN app.Indicator OPP 
	ON PR.ProjectID = OPP.Output_ID 
	 AND OPP.IndicatorType_ID = 6

	 
	INNER JOIN RBM.IndicatorValues OPIV
		ON OPP.IndicatorID = OPIV.Indicator_ID

	INNER JOIN app.Activity ACT
		ON PR.projectID = ACT.projectID
	 INNER JOIN app.Indicator SOI 
	 /* MGS Fixed */
	ON ACT.ActivityID = SOI.Activity_ID 
	 AND SOI.IndicatorType_ID = 6

	 
	INNER JOIN RBM.IndicatorValues SOIV
		ON SOI.IndicatorID = SOIV.Indicator_ID

	WHERE (OM.OutcomeID = @OutcomeID 
			OR @OutcomeID = 0)
		AND
			(
				OMIV.ReportPeriodID = @ReportingPeriodID
				AND 
				OPIV.ReportPeriodID = @ReportingPeriodID
				AND 
				SOIV.ReportPeriodID = @ReportingPeriodID
			)
GO
PRINT N'Creating [dbo].[rptIndicatorStatus]...';


GO

CREATE PROC [dbo].[rptIndicatorStatus]
( @OutcomeID int ,
@ReportingPeriodID int)
as

/*
SELECT 
	OM.ShortName as OutcomeName
	,OP.ShortName as OutputName
	,SO.ShortName As Suboutputname
	,OMIV.IndicatorStatusPercent OutcomeStatus
	,OPIV.IndicatorStatusPercent OutputStatus
	,SOIV.IndicatorStatusPercent SubOutputStatus
			
FROM app.Outcome OM 
	INNER JOIN app.Indicator OmI 
	ON OM.OutcomeID = OMI.OutcomeID
		AND OMI.IndicatorType_ID = 6
	Inner JOIN app.Output OP
		ON OM.OutcomeID = OP.OutcomeID 
	
	INNER JOIN RBM.IndicatorValues OMIV
		ON OMI.IndicatorID = OMIV.Indicator_ID
		
	INNER JOIN app.Indicator OPI 
	ON OP.Output_ID = OPI.Output_ID 
	 AND OPI.IndicatorType_ID = 6

	 
	INNER JOIN RBM.IndicatorValues OPIV
		ON OPI.IndicatorID = OPIV.Indicator_ID

	INNER JOIN app.SubOutput SO
		ON OP.Output_ID = SO.Output_ID
	 INNER JOIN app.Indicator SOI 
	ON SO.SubOutput_ID = SOI.SubOutput_ID 
	 AND SOI.IndicatorType_ID = 6

	 
	INNER JOIN RBM.IndicatorValues SOIV
		ON SOI.IndicatorID = SOIV.Indicator_ID

	WHERE (OM.OutcomeID = @OutcomeID 
			OR @OutcomeID = 0)
		AND
			(
				OMIV.ReportPeriodID = @ReportingPeriodID
				AND 
				OPIV.ReportPeriodID = @ReportingPeriodID
				AND 
				SOIV.ReportPeriodID = @ReportingPeriodID
			)
			*/
			
SELECT 
	OM.ShortName as OutcomeName
	,OP.ShortName as OutputName
	,SO.ShortName As Suboutputname
	,CASE 
	WHEN OMI.OutcomeID IS NOT NULL
		THEN OMIV.IndicatorStatusPercent 
		ELSE NULL 
		END OutcomeStatus
		,CASE 
	WHEN OPI.Output_ID IS NOT NULL
		THEN OPIV.IndicatorStatusPercent 
		ELSE NULL 
		END OutputStatus
	,CASE
	WHEN SOI.SubOutput_ID IS NOT NULL
		THEN SOIV.IndicatorStatusPercent 
		ELSE NULL 
		END SubOutputStatus
	
			
FROM app.Outcome OM 
	INNER JOIN app.Indicator OmI 
	ON OM.OutcomeID = OMI.OutcomeID
		AND OMI.IndicatorType_ID = 6
	Inner JOIN app.Output OP
		ON OM.OutcomeID = OP.OutcomeID 
	
	INNER JOIN RBM.IndicatorValues OMIV
		ON OMI.IndicatorID = OMIV.Indicator_ID
		
	INNER JOIN app.Indicator OPI 
	ON OP.Output_ID = OPI.Output_ID 
	 AND OPI.IndicatorType_ID = 6

	 
	INNER JOIN RBM.IndicatorValues OPIV
		ON OPI.IndicatorID = OPIV.Indicator_ID

	INNER JOIN app.SubOutput SO
		ON OP.Output_ID = SO.Output_ID
	 INNER JOIN app.Indicator SOI 
	ON SO.SubOutput_ID = SOI.SubOutput_ID 
	 AND SOI.IndicatorType_ID = 6

	 
	INNER JOIN RBM.IndicatorValues SOIV
		ON SOI.IndicatorID = SOIV.Indicator_ID

	WHERE (OM.OutcomeID = @OutcomeID 
			OR @OutcomeID = 0)
		AND
			(
				OMIV.ReportPeriodID = @ReportingPeriodID
				AND 
				OPIV.ReportPeriodID = @ReportingPeriodID
				AND 
				SOIV.ReportPeriodID = @ReportingPeriodID
			)
GO
PRINT N'Creating [dbo].[rptIndicatorStatus_test]...';


GO



CREATE PROC [dbo].[rptIndicatorStatus_test]
( @OutcomeID int ,
@ReportingPeriodID int)
as

/*
SELECT 
	OM.ShortName as OutcomeName
	,OP.ShortName as OutputName
	,SO.ShortName As Suboutputname
	,OMIV.IndicatorStatusPercent OutcomeStatus
	,OPIV.IndicatorStatusPercent OutputStatus
	,SOIV.IndicatorStatusPercent SubOutputStatus
			
FROM app.Outcome OM 
	left JOIN app.Indicator OmI 
	ON OM.OutcomeID = OMI.OutcomeID
		AND OMI.IndicatorType_ID = 6
	left JOIN app.Output OP
		ON OM.OutcomeID = OP.OutcomeID 
	
	left JOIN RBM.IndicatorValues OMIV
		ON OMI.IndicatorID = OMIV.Indicator_ID
		
	left JOIN app.Indicator OPI 
	ON OP.Output_ID = OPI.Output_ID 
	 AND OPI.IndicatorType_ID = 6

	 
	left JOIN RBM.IndicatorValues OPIV
		ON OPI.IndicatorID = OPIV.Indicator_ID

	left JOIN app.SubOutput SO
		ON OP.Output_ID = SO.Output_ID
	 left JOIN app.Indicator SOI 
	ON SO.SubOutput_ID = SOI.SubOutput_ID 
	 AND SOI.IndicatorType_ID = 6

	 
	left JOIN RBM.IndicatorValues SOIV
		ON SOI.IndicatorID = SOIV.Indicator_ID

	WHERE (OM.OutcomeID = @OutcomeID 
			OR @OutcomeID = 0)
		AND
			(
				OMIV.ReportPeriodID = @ReportingPeriodID
				AND 
				OPIV.ReportPeriodID = @ReportingPeriodID
				AND 
				SOIV.ReportPeriodID = @ReportingPeriodID
			)
			*/
			
SELECT 
	OM.ShortName as OutcomeName
	,OP.ShortName as OutputName
	,SO.ShortName As Suboutputname
	,CASE 
	WHEN OMI.OutcomeID IS NOT NULL
		THEN OMIV.IndicatorStatusPercent 
		ELSE NULL 
		END OutcomeStatus
		,CASE 
	WHEN OPI.Output_ID IS NOT NULL
		THEN OPIV.IndicatorStatusPercent 
		ELSE NULL 
		END OutputStatus
	,CASE
	WHEN SOI.SubOutput_ID IS NOT NULL
		THEN SOIV.IndicatorStatusPercent 
		ELSE NULL 
		END SubOutputStatus
	
			
FROM app.Outcome OM 
	left JOIN app.Indicator OmI 
	ON OM.OutcomeID = OMI.OutcomeID
		AND OMI.IndicatorType_ID = 6
	left JOIN app.Output OP
		ON OM.OutcomeID = OP.OutcomeID 
	
	left JOIN RBM.IndicatorValues OMIV
		ON OMI.IndicatorID = OMIV.Indicator_ID
		
	left JOIN app.Indicator OPI 
	ON OP.Output_ID = OPI.Output_ID 
	 AND OPI.IndicatorType_ID = 6

	 
	left JOIN RBM.IndicatorValues OPIV
		ON OPI.IndicatorID = OPIV.Indicator_ID

	left JOIN app.SubOutput SO
		ON OP.Output_ID = SO.Output_ID
	 left JOIN app.Indicator SOI 
	ON SO.SubOutput_ID = SOI.SubOutput_ID 
	 AND SOI.IndicatorType_ID = 6

	 
	left JOIN RBM.IndicatorValues SOIV
		ON SOI.IndicatorID = SOIV.Indicator_ID

	WHERE (OM.OutcomeID = @OutcomeID 
			OR @OutcomeID = 0)
		AND
			(
				OMIV.ReportPeriodID = @ReportingPeriodID
				OR 
				OPIV.ReportPeriodID = @ReportingPeriodID
				OR 
				SOIV.ReportPeriodID = @ReportingPeriodID
			)
GO
PRINT N'Creating [dbo].[sp_KeyIndicators]...';


GO

CREATE PROC [sp_KeyIndicators]
--declare
@OutcomeID int
,@KeyIndicator int = 1
,@LocationID int = 1
,@DataVersionID Int = 0
, @IncludeExtrapolatedTargetDates int = 0
as

/*
SELECT  

--rcdate,rcedate,
DENSE_RANK() OVER (ORDER BY code) % 2 AS RN,

 [dbo].[fn_ConcatenateIndicator_LocationTypeNames] (indicatorID) LocationTypeNames,
--dbo.fn_ConcatenateIndicator_DSName (indicatorid) 
null
DataSourceNames, -- no indicator dsn tbl

CASE WHEN MAX(RowX) over (partition by indicatorid,location_ID) > 1 THEN 
OriginalBaseline + ( (( Target2014 - OriginalBaseline)/  (CAST(MAX(RowX) over (partition by indicatorid,location_ID)  as float) -1))

 )
 * CAST((ROW_NUMBER() over (partition by indicatorid,location_ID order by ReportCycleDate_ID)) -1  as float)
 ELSE 
 OriginalBaseline END
 AS ExtrapolatedTarget,
* 
 FROM (
 SELECT
 
 L.Name LocationName, 
 rc.ID RCDate, -- incorrect as there is no proper dates in reporting cylce
--RCExtrapolated.ReportCycleReportDate_ID RCEDate,
 --i.baseline OriginalBaseline,
 --i.Target Target2014,
ROW_NUMBER() over (partition by i.indicatorid order by rc.StartDateID) as RowX,
CASE WHEN ROW_NUMBER() Over (PARTITION by i.IndicatorID,iv.location_ID order by rc.StartDateID) = 1 THEN i.Baseline
ELSE NULL END

 BaselineStart,

CASE WHEN ROW_NUMBER() Over ( PARTITION by i.IndicatorID,iv.location_ID order by rc.StartDateID DESC) = 1 THEN i.Target
ELSE NULL END TargetEnd, 
MaxValue = CASE WHEN i.Target > i.Baseline AND i.Target > ActualValue 
THEN i.Target
WHEN ActualValue > i.Baseline AND ActualValue  > i.Target 
THEN ActualValue 
ELSE i.Baseline
END,
--ISNULL( RCExtrapolated.FinancialYEar ,rc.FinancialYear) FinancialYear,
null FinancialYear, --rc.FinancialYear need to find new field to substitute for this

DENSE_RANK() OVER (order  by i.Code) IndicatorNum,
iv.Title DataLabel,

om.LongName OutcomeName,
o.LongName OutputName,
so.LongName SubOutputName,
i.LongName IndicatorName,
Path = om.Code + ' 
' + isnull(o.code,'') + ' 
' + isnull(so.code,''),
convert(varchar(20),DDStart.[Date],112) StartDate,
convert(varchar(20),DDEnd.[Date],112) EndDate,
DDEnd.YearNumber,
cast(rc.StartDateID as varchar) + ' - ' + 
cast(rc.EndDateID  as varchar) ReportingPeriod,
--DDNext.TextDate
null NextDate, -- need to get how to 
ISNULL([IndicatorValues_ID],0) [IndicatorValues_ID] 
      ,i.[IndicatorID]
      ,/*ISNULL(iv.Baseline, */i.[Baseline]/*)*/ [Baseline]
      ,/*ISNULL(iv.BaselineString, */ i.[BaselineString]/*) */BaselineString
      ,/*ISNULL(iv.TargetValue, */i.Target/*)*/ [TargetValue]
      ,/*ISNULL(iv.TargetValueString,*/ i.TargetString/*)*/ [TargetValueString]
      ,[ActualValue]
      ,[ActualValueString]
      ,ISNULL(iv.[ReleaseDate], i.ReleaseDate) ReleaseDate
      ,ISNULL(iv.[ReportingDate], i.ReportingDate) ReportingDate
      ,[IndicatorReportingDate]
      ,i.UnitOfMeasure
      
      ,i.[Output_ID]
      ,i.[OutcomeID]
      ,iv.[BusinessKey]
      ,iv.[Notes]
      ,iv.Title
      ,rc.ReportingPeriod ReportCycle
      ,i.ShortName
      ,i.Code
      ,i.LongName
      ,null [VerifiedActualValue] -- not in table
      ,null [VerifiedActualNotes] -- not in table

      ,i.[IndicatorType_ID]
      ,i.[Activity_ID]
      ,i.[SubOutput_ID]
	  ,i.IndicatorID Indicator_ID
      ,ISNULL([DataVersion_ID],0) DataVersion_ID
      ,i.[Sharepoint_ID]
      ,ISNULL(iv.Location_ID,1) Location_ID
      ,iv.IndicatorStatusPercent      
         
      ,/*ISNULL(iv.ReportCycleDate_ID,*/ rc.StartDateID/*)*/ ReportCycleDate_ID
         
                     ,i.BaselineDate
      ,BaselineDate_ID = (YEAR(i.BaselineDate) * 10000)  + (MONTH(i.BaselineDate) * 100) + DAY(i.BaselineDate)
      ,i.TargetDate
       ,TargetDate_ID = (YEAR(i.TargetDate) * 10000)  + (MONTH(i.TargetDate) * 100) + DAY(i.TargetDate)
            ,RolledUpToOutcome_ID = ISNULL(i.outcomeID, o.outcomeid)
      ,RolledUpToOutput_ID = ISNULL(i.output_id, so.output_ID)
      ,RolledUpToSubOutput_ID = i.suboutput_id
      ,RolledUpToActivity_ID = i.activity_ID
          ,TermSetID = DIML.TermsetDeepGrainID
	,i.Baseline OriginalBaseline
	,i.Target Target2014
	,rc.StartDateID ReportingPeriodStartDate_ID
	,rc.EndDateID ReportingPeriodEndDate_ID	
	,null NextReportingPeriodReleaseDate_ID
	
	
	, ParentMDX =  
	CASE WHEN i.OutcomeID IS Not NULL 
	THEN '[Outcome].[Outcome].[' + CAST (i.OutcomeID  as varchar(8)) + ']'
	
	WHEN i.Output_ID IS Not NULL 
	THEN '[Output].[Output].[' + CAST (i.Output_ID as varchar(8))  + ']'
	
	WHEN i.SubOutput_ID IS Not NULL 
	THEN '[Sub Output].[Sub Output].[' + CAST (i.SubOutput_ID as varchar(8)) + ']'
	END 
  FROM app.Indicator i 
  INNER JOIN DimIndicatorMultiLevel DIML
  On i.IndicatorID = DIML.Indicator_ID
  INNER JOIN Core.ReportingPeriod rc
  on 

  rc.StartDateID Between i.BaselineDate_ID and i.TargetDate_ID -- needs to be checked
  
  LEFT join RBM.[IndicatorValues] iv
  on i.IndicatorID = iv.Indicator_ID
    and iv.ReportPeriodID = rc.ReportingPeriod  
LEFT OUTER JOIN app.Activity a
on i.Activity_ID = a.ActivityID
LEFT OUTER JOIN app.SubOutput SO

/*	INNER JOIN dbo.Activity SOA
	on so.SubOutput_ID = soa.SubOutput_ID
	inner join dbo.Milestone AM
		on SOA.Activity_ID = AM.Activity_ID

*/
on i.SubOutput_ID = so.SubOutput_ID 
--OR a. .SubOutputID = so.SubOutput_ID
	

LEFT OUTER JOIN app.Output o
on i.Output_ID = o.Output_ID
OR so.Output_ID = o.Output_ID

LEFT OUTER JOIN app.Outcome om
on i.OutcomeID = om.OutcomeID
OR o.OutcomeID = om.OutcomeID -- needs to follow convention


LEFT JOIN Core.DimDate DDStart
on rc.StartDateID = DDStart.DateID

LEFT JOIN Core.DimDate DDEnd
on rc.EndDateID = DDEnd.DateID

--LEFT JOIN Core.DimDate DDNext
--on iv.NextReportingPeriodReleaseDate_ID = DDNext.DateKey

LEFT JOIN Core.Location  L
on iv.Location_ID = L.Location_ID



where i.ShortName not like '%overall%'
AND  (ISNULL(i.outcomeID, o.outcomeid) = @OutcomeID OR @OutcomeID = 0 )
and (i.IsKeyIndicator = @KeyIndicator  or @KeyIndicator = 0)
AND (iv.DataVersion_ID = @DataVersionID OR @DataVersionID = 0 OR iv.DataVersion_ID is null)
AND (iv.Location_ID = @LocationID OR @LocationID = 0 OR iv.Location_ID IS NULL)
AND (iv.IndicatorValues_ID IS NOT NULL OR @IncludeExtrapolatedTargetDates =1)
--ORDER BY i.Code
 ) SRC


--where Code = 'STP8.1.4D1'
ORDER BY Code, ReportCycleDate_ID

*/
SELECT 'Not implemented' as X
GO
PRINT N'Creating [dbo].[uspActivityProgress]...';


GO




CREATE PROC [dbo].[uspActivityProgress]
--declare
@DataVersion_ID varchar(255)=5
, @MDXRolledUpToActivity_ID varchar(255)
,@Activity_ID int = 0
, @Milestone_ID int = 0
AS

--begin
SELECT    

DENSE_RANK() over(order by m.code)  %2  RN,
p.Code ProjectCode,
p.LongName ProjectLongName,

case when mv.MilestoneStatusPercent=100 then rc.YearName else null end CompletionFinancialYear,
case when mv.MilestoneStatusPercent=100 then rc.ReportingPeriod else null end CompletionCycle,
mv.MilestoneValues_ID mid,
m.Code MilestoneCode,
m.LongName MilestoneLongName,
dbo.fn_StripMDXKey(@DataVersion_ID) parmDataVersion_ID,
dbo.fn_StripMDXKey(@MDXRolledUpToActivity_ID) parmMdxRolledUpToActivity,
 m.Target AS TargetValue,
  mv.ActualValue ActualValue,
  mv.MilestoneStatusPercent MilestoneProgressPercent,
  
mv.DataVersion_ID newDV,
RC.YearName EndingPeriodFinancialYear
,RC.ReportingPeriod EndingPeriodReportCycle,
rc.EndDateID,
DATEADD(d, 
(DATEDIFF(D,m.BaselineDate, case when mv.MilestoneStatusPercent=100 then mv.ActualDate else null end) * mv.MilestoneStatusPercent)
, m.BaselineDate) MilestoneCurrentDate,
rc.FirstCycleDate ReportingPeriodStartDate,
rc.LastCycleDate ReportingPeriodEndDate,

mv.Milestone_ID, 
a.LongName ActivityLongName,
a.ShortName ActivityCode,
m.BaselineDate MilestoneStartDate,
mv.ActualDate MilestoneCompletionDate ,
 CAST(rc.StartDateID as varchar(255)) + ' - ' +  CAST(rc.EndDateID as varchar(255)) as ReportingPeriod,
      rc.StartDateID ReportingPeriodStartDate_ID
      ,rc.EndDateID ReportingPeriodEndDate_ID,
	  rc.EndDateID EndingReportCycleReportDate_ID,
mv.MilestoneValues_ID ActivityMilestone_ID, 
null RolledUpToActivity_ID
,mv.Notes,
mv.Title,
mv.DataVersion_ID,
 m.LongName, m.Code, m.ShortName
, m.Baseline, m.BaselineString

, m.TargetString TargetValueString

                         
                         , mv.ActualValueString ActualValueString
                         , m.ReleaseDate
                         , m.ReportingDate
                         
						 ,rc.EndDateID MilestoneCompletionEndCycleDate_ID
						 ,RC.EndDateID MilestoneCompletionDate_ID
                         , m.BaselineDateID MilestoneStartDate_ID
                         ,RC.StartDateID ReportCycleDate_ID, 
                         RC.LastCycleDate AS ReportCycleDate
                         

  FROM 
  app.Milestone M
  
  JOIN RBM.MilestoneValues mv
  on M.MilestoneID = mv.Milestone_ID
  JOIN Core.ReportingPeriod rc
  on rc.ID  =mv.ReportPeriodID
  inner join 
  
  Core.DataVersion DDV 
  
  ON (CHARINDEX('level',@DataVersion_ID) = 0 
  AND (DDV.DataVersion_ID  = dbo.fn_StripMDXKey(@DataVersion_ID)
	OR DDV.DataVersion_ID = 39)
  
  )
  OR ( CHARINDEX('level',@DataVersion_ID) > 0 
  AND DDV.DataVersionLevel_ID = dbo.fn_StripMDXKey(@DataVersion_ID)
  AND DDV.Outcome_ID IS NULL
  
  )
  

  LEFT JOIN Core.DataVersion DVChild
  on DDV.DataVersion_ID  = DVChild.ParentDataVersion_ID
  
  left join app.Project p
    on m.ProjectID = p.ProjectID
  left join app.Activity a
    on m.ActivityID = a.ActivityID
  
  
where 
(mv.DataVersion_ID = DDV.DataVersion_ID 
OR mv.DataVersion_ID = DVChild.DataVersion_ID
OR mv.DataVersion_ID IS NULL
OR mv.DataVersion_ID = 5
)
--and

--(CAST([RolledUpToActivity_ID] as varchar(255)) = dbo.fn_StripMDXKey(@MDXRolledUpToActivity_ID )
--OR 
--CAST(M.ActivityID as varchar(255)) = dbo.fn_StripMDXKey(@MDXRolledUpToActivity_ID )
--)
and (m.ActivityID = @Activity_ID or @Activity_ID = 0)
AND (M.MilestoneiD = @Milestone_ID OR @Milestone_ID = 0)


--And  m.code = 'ACT8.1.1.1M7'
order by m.code, RC.StartDateID ASC



--end
GO
PRINT N'Creating [dbo].[uspCreateSysDefaultColumns]...';


GO

-- =============================================
-- Author:		Andreas Bergstedt
-- Create date: 2013-03-15
-- Description:	Creates basic System Parameters for delta and processing
-- =============================================
CREATE PROCEDURE [dbo].[uspCreateSysDefaultColumns]
	@@FTable as Nvarchar(500)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

 
--Declare @@FTable as Nvarchar(500) = 'app.Output'
Declare @@Table as Nvarchar(500) = Substring(@@FTable,(Charindex('.',@@FTable,1)+1),500)
Declare @@TableSchema as Nvarchar(255) = Substring(@@FTable,1,(Charindex('.',@@FTable,1)-1))-- 'app'
Declare @@SQL as Nvarchar(Max)
--Select @@Table,@@FTable,@@TableSchema

Set @@SQL ='
IF not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = ''' + @@Table + '''
            And TABLE_SCHEMA = ''' + @@TableSchema + ''' 
           AND  COLUMN_NAME = ''sys_CreatedOn'') ALTER TABLE ' + @@TableSchema + '.' + @@Table +' ADD sys_CreatedOn DateTime  Null  
IF not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = ''' + @@Table + ''' 
            And TABLE_SCHEMA = ''' + @@TableSchema + ''' 
           AND  COLUMN_NAME = ''sys_CreatedBy'') ALTER TABLE ' + @@TableSchema + '.' + @@Table +' add sys_CreatedBy Nvarchar(255)  Null

IF not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = ''' + @@Table + ''' 
            And TABLE_SCHEMA = ''' + @@TableSchema + ''' 
           AND  COLUMN_NAME = ''sys_ModifiedOn'') ALTER TABLE ' + @@TableSchema + '.' + @@Table +' add sys_ModifiedOn DateTime  Null 

IF not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = ''' + @@Table + ''' 
            And TABLE_SCHEMA = ''' + @@TableSchema + ''' 
           AND  COLUMN_NAME = ''sys_ModifiedBy'') ALTER TABLE ' + @@TableSchema + '.' + @@Table +' add sys_ModifiedBy Nvarchar(255)  Null 

IF not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = ''' + @@Table + ''' 
            And TABLE_SCHEMA = ''' + @@TableSchema + ''' 
           AND  COLUMN_NAME = ''Active'') ALTER TABLE ' + @@TableSchema + '.' + @@Table +' add Active Int Not Null DEFAULT 1

'


--Select @@SQL
Exec (@@SQL)

END
GO
PRINT N'Creating [dbo].[uspIndicatorsList_MDXKey_Provincial]...';


GO


create PROC [dbo].[uspIndicatorsList_MDXKey_Provincial]

@MDXKey varchar(255)
,@Location_ID int = 1

as

--ALTER VIEw [dwPOA].[FactIndicatorValues]
--as

DECLARE @Outcome_ID int =0 
,@Output_ID int = 0
,@SubOutput_ID int = 0
,@Indicator_ID int = 0

IF CHARINDEX('Outcome', @MDXKey ) > 0 
SET @Outcome_ID  = dbo.fn_StripMDXKey(@MDXKey)
ELSE
IF CHARINDEX('Sub Output', @MDXKey ) > 0 
SET @SubOutput_ID  = dbo.fn_StripMDXKey(@MDXKey)
ELSE
IF CHARINDEX('Output', @MDXKey ) > 0 
SET @Output_ID  = dbo.fn_StripMDXKey(@MDXKey)
ELSE
IF CHARINDEX('Indicator', @MDXKey ) > 0 
SET @Indicator_ID  = dbo.fn_StripMDXKey(@MDXKey)


IF ISNUMERIC(@MDXKey) = 1 SET @Outcome_ID = @MDXKey


SELECT  

DENSE_RANK() OVER (order by i.code) %2 RN,
@MDXKey Original,
dbo.fn_StripMDXKey(@MDXKey ) New,
@Outcome_ID OM,
@Output_ID O,
@Suboutput_ID So,
@INdicator_id I,
Type = 'Indicator',
om.Code OutcomeCode  , 
o.Code OutputCode  , 
so.Code SubOutputCode  , 
i.Code IndicatorCode  , 
null ActivityCode  , 
null MilestoneCode  , 
l.Name LocationName,


i.LongName RollupName,

om.LongName OutcomeName  , 
o.LongName OutputName  , 
so.LongName SubOutputName  , 
i.LongName IndicatorName  , 

Path = om.Code + ' 
' + isnull(o.code  , '') + ' 
' + isnull(so.code  , '')  , 
rc.FirstCycleDate StartDate  , 
rc.LastCycleDate EndDate  , 

rc.StartDateID + ' - ' + 
rc.EndDateID ReportingPeriod  , 

ISNULL([IndicatorValues_ID]  , 0) [IndicatorValues_ID] 
        , i.[IndicatorID] [Indicator_ID]
        ,  i.[Baseline] [Baseline]
        ,  i.[BaselineString] BaselineString
        , i.Target [TargetValue]
        ,  i.TargetString [TargetValueString]
        , [ActualValue]
        , [ActualValueString]
        , ISNULL(iv.[ReleaseDate]  ,  i.ReleaseDate) ReleaseDate
        , ISNULL(iv.[ReportingDate]  ,  i.ReportingDate) ReportingDate
        , [IndicatorReportingDate]
        , i.UnitOfMeasure
      
        , i.[Output_ID]
        , i.OutcomeID [Outcome_ID]
        , iv.[BusinessKey]
        , iv.[Notes]
        , iv.Title
        , rc.ReportingPeriod ReportCycle
        , i.ShortName
        , i.Code
        , i.LongName


        , i.[IndicatorType_ID]
        , i.[Activity_ID]
        , i.[SubOutput_ID]
        , ISNULL([DataVersion_ID]  , 0) DataVersion_ID
        , i.[Sharepoint_ID]
        , ISNULL(iv.Location_ID  , 1) Location_ID
        , iv.IndicatorStatusPercent      
         
        , rc.EndDateID ReportCycleDate_ID
         
                       , i.BaselineDate
        , BaselineDate_ID = (YEAR(i.BaselineDate) * 10000)  + (MONTH(i.BaselineDate) * 100) + DAY(i.BaselineDate)
        , i.TargetDate
         , TargetDate_ID = (YEAR(i.TargetDate) * 10000)  + (MONTH(i.TargetDate) * 100) + DAY(i.TargetDate)
              , RolledUpToOutcome_ID = ISNULL(i.outcomeID  ,  o.outcomeid)
        , RolledUpToOutput_ID = ISNULL(i.output_id  ,  so.output_ID)
        , RolledUpToSubOutput_ID = i.suboutput_id 
        , RolledUpToActivity_ID = i.activity_ID

	  , i.Baseline OriginalBaseline
	  , i.Target Target2014
	  , rc.StartDateID ReportingPeriodStartDate_ID
	  , rc.EndDateID ReportingPeriodEndDate_ID	

	
	
	
	  , OutcomeMDX  = '[Outcome].[Outcome].&[' + CAST (om.OutcomeID  as varchar(8)) + ']'
	  , OutputMDX = '[Output].[Output].&[' + CAST (o.Output_ID as varchar(8))  + ']'
	  , SubOutputMDX = '[SubOutput].[SubOutput].&[' + CAST (SO.SubOutput_ID as varchar(8)) + ']'
	
	  ,  ParentMDX =  
	CASE WHEN i.OutcomeID IS Not NULL 
	THEN '[Outcome].[Outcome].&[' + CAST (i.OutcomeID  as varchar(8)) + ']'
	
	WHEN i.Output_ID IS Not NULL 
	THEN '[Output].[Output].&[' + CAST (i.Output_ID as varchar(8))  + ']'
	
	WHEN i.SubOutput_ID IS Not NULL 
	THEN '[SubOutput].[SubOutput].&[' + CAST (i.SubOutput_ID as varchar(8)) + ']'
	END 
  FROM app.Indicator i 
  inner join RBM.[IndicatorValues] iv
  on i.IndicatorID = iv.Indicator_ID
 
  INNER JOIN Core.ReportingPeriod rc
  on iv.ReportPeriodID = rc.ID  
  LEFT OUTER JOIN app.SubOutput SO
  on i.SubOutput_ID = so.SubOutput_ID 

LEFT OUTER JOIN app.Output o
on i.Output_ID = o.Output_ID
OR so.Output_ID = o.Output_ID

LEFT OUTER JOIN app.Outcome om
on i.OutcomeID = om.OutcomeID
OR o.OutcomeID = om.OutcomeID


LEFT OUTER JOIN Core.Location l
on iv.Location_ID = l.Location_ID

where i.ShortName not like '%overall%'
/*AND ( ISNULL(i.outcome_ID  ,  om.outcome_id) = @Outcome_ID OR @Outcome_ID = 0)
AND (ISNULL(i.Output_ID  ,  o.Output_id) = @Output_ID OR @Output_ID = 0)
AND (ISNULL(i.SubOutput_ID  ,  so.SubOutput_id) = @SubOutput_ID OR @SubOutput_ID = 0) 
*/

AND ( i.outcomeID  = @Outcome_ID OR @Outcome_ID = 0)
AND (i.Output_ID  = @Output_ID OR @Output_ID = 0)
AND (i.SubOutput_ID = @SubOutput_ID OR @SubOutput_ID = 0) 
AND (i.IndicatorID  = @Indicator_ID OR @Indicator_ID = 0)
and (iv.Location_ID = @Location_ID OR @Location_ID = 0)



----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------


order by OutcomeCode  ASC ,  OutputCode  ASC , SubOutputCode  ASC , IndicatorCode  ASC , ReportCycleDate_ID DESC
GO
PRINT N'Creating [dbo].[uspIndicatorsList_MDXKey_PublicSite]...';


GO



CREATE PROC [dbo].[uspIndicatorsList_MDXKey_PublicSite]

@MDXKey varchar(255),
@DataVersion_ID varchar(255)

as

--ALTER VIEw [dwPOA].[FactIndicatorValues]
--as

DECLARE @Outcome_ID int =0 
,@Output_ID int = 0
,@SubOutput_ID int = 0
,@Indicator_ID int = 0

IF CHARINDEX('Outcome', @MDXKey ) > 0 
SET @Outcome_ID  = dbo.fn_StripMDXKey(@MDXKey)
ELSE
IF CHARINDEX('Sub Output', @MDXKey ) > 0 
SET @SubOutput_ID  = dbo.fn_StripMDXKey(@MDXKey)
ELSE
IF CHARINDEX('Output', @MDXKey ) > 0 
SET @Output_ID  = dbo.fn_StripMDXKey(@MDXKey)
ELSE
IF CHARINDEX('Indicator', @MDXKey ) > 0 
SET @Indicator_ID  = dbo.fn_StripMDXKey(@MDXKey)


IF ISNUMERIC(@MDXKey) = 1 SET @Outcome_ID = @MDXKey


SELECT  
DENSE_RANK() OVER (order by I.code) %2 RN,
@MDXKey Original,
dbo.fn_StripMDXKey(@MDXKey ) New,
@Outcome_ID OM,
@Output_ID O,
@Suboutput_ID So,
@INdicator_id I,
Type = 'Indicator',
om.Code OutcomeCode  , 
o.Code OutputCode  , 
so.Code SubOutputCode  , 
i.Code IndicatorCode  , 
null ActivityCode  , 
null MilestoneCode  , 


i.LongName RollupName,

om.LongName OutcomeName  , 
o.LongName OutputName  , 
so.LongName SubOutputName  , 
i.LongName IndicatorName  , 

Path = om.Code + ' 
' + isnull(o.code  , '') + ' 
' + isnull(so.code  , '')  , 
cast(rc.StartDateID as varchar) StartDate  , 
cast(rc.EndDateID as varchar) EndDate  , 

cast(rc.StartDateID as varchar) + ' - ' + 
cast(rc.EndDateID as varchar)  ReportingPeriod  , 
null NextDate  , 
ISNULL([IndicatorValues_ID]  , 0) [IndicatorValues_ID] 
        , i.[IndicatorID] [Indicator_ID]
        , i.[Baseline] [Baseline]
        ,  i.[BaselineString] BaselineString
        , i.Target [TargetValue]
        ,   i.TargetString [TargetValueString]
        , [ActualValue]
        , [ActualValueString]
        , ISNULL(iv.[ReleaseDate]  ,  i.ReleaseDate) ReleaseDate
        , ISNULL(iv.[ReportingDate]  ,  i.ReportingDate) ReportingDate
        , [IndicatorReportingDate]
        , i.UnitOfMeasure
      
        , i.[Output_ID]
        , i.[OutcomeID]
        , iv.[BusinessKey]
        , iv.[Notes]
        , isnull(iv.Title,iv.ActualValueString) as Title
        , rc.ReportingPeriod ReportCycle
        , i.ShortName
        , i.Code
        , i.LongName
        ,null [VerifiedActualValue]
        , null [VerifiedActualNotes]

        , i.[IndicatorType_ID]
        , i.[Activity_ID]
        , i.[SubOutput_ID]
        , ISNULL(iv.[DataVersion_ID]  , 0) DataVersion_ID
        , i.[Sharepoint_ID]
        , ISNULL(iv.Location_ID  , 1) Location_ID
        , iv.IndicatorStatusPercent      
         
        ,  rc.ReportingPeriod  ReportCycleDate_ID
         
                       , i.BaselineDate
        , BaselineDate_ID = (YEAR(i.BaselineDate) * 10000)  + (MONTH(i.BaselineDate) * 100) + DAY(i.BaselineDate)
        , i.TargetDate
         , TargetDate_ID = (YEAR(i.TargetDate) * 10000)  + (MONTH(i.TargetDate) * 100) + DAY(i.TargetDate)
              , RolledUpToOutcome_ID = ISNULL(i.outcomeID  ,  o.outcomeid)
        , RolledUpToOutput_ID = ISNULL(i.output_id  ,  so.output_ID)
        , RolledUpToSubOutput_ID = i.suboutput_id  
        , RolledUpToActivity_ID = i.activity_ID
     --       , TermSetID = DIML.TermsetDeepGrainID
	  , i.Baseline OriginalBaseline
	  , i.Target Target2014
	  , rc.StartDateID ReportingPeriodStartDate_ID
	  , rc.EndDateID ReportingPeriodEndDate_ID	
	  , null NextReportingPeriodReleaseDate_ID
	
	
	
	  , OutcomeMDX  = '[Outcome].[Outcome].%26[' + CAST (om.OutcomeID  as varchar(8)) + ']'
	  , OutputMDX = '[Output].[Output].%26[' + CAST (o.Output_ID as varchar(8))  + ']'
	  , SubOutputMDX = '[Sub Output].[Sub Output].%26[' + CAST (SO.SubOutput_ID as varchar(8)) + ']'
	
	  ,  ParentMDX =  
	CASE WHEN i.OutcomeID IS Not NULL 
	THEN '[Outcome].[Outcome].%26[' + CAST (i.OutcomeID  as varchar(8)) + ']'
	
	WHEN i.Output_ID IS Not NULL 
	THEN '[Output].[Output].%26[' + CAST (i.Output_ID as varchar(8))  + ']'
	
	WHEN i.SubOutput_ID IS Not NULL 
	THEN '[Sub Output].[Sub Output].%26[' + CAST (i.SubOutput_ID as varchar(8)) + ']'
	END
	, om.Outcomesitename 
  FROM app.Indicator i 
 join RBM.[IndicatorValues] iv
  on i.IndicatorID = iv.Indicator_ID
     
  INNER JOIN Core.ReportingPeriod rc
  on   iv.ReportPeriodID = rc.ID
  inner join 
  
  Core.DataVersion DDV 
  
  ON (CHARINDEX('level',@DataVersion_ID) = 0 
  AND DDV.DataVersion_ID  = dbo.fn_StripMDXKey(@DataVersion_ID)
  )
  OR ( CHARINDEX('level',@DataVersion_ID) > 0 
  AND DDV.DataVersionLevel_ID = dbo.fn_StripMDXKey(@DataVersion_ID)
  AND DDV.Outcome_ID IS NULL
  )
  
    and (
    
    (iv.DataVersion_ID = DDV.DataVersion_ID OR iv.DataVersion_ID is null)
    OR ( iv.DataVersion_ID  IN (SELECT DataVersion_ID FROM Core.DataVersion DV WHERE DV.DataVersionLevel_ID = DDV.DataVersionLevel_ID )
and DDV.Outcome_ID is null
)

    
    )
    
LEFT OUTER JOIN app.Activity a
on i.Activity_ID = a.ActivityID
LEFT OUTER JOIN app.SubOutput SO

/*	INNER JOIN dbo.Activity SOA
	on so.SubOutput_ID = soa.SubOutput_ID
	inner join dbo.Milestone AM
		on SOA.Activity_ID = AM.Activity_ID
*/

on i.SubOutput_ID = so.SubOutput_ID 

LEFT OUTER JOIN app.Output o
on i.Output_ID = o.Output_ID
OR so.Output_ID = o.Output_ID

LEFT OUTER JOIN app.Outcome om
on i.OutcomeID = om.OutcomeID
OR o.OutcomeID = om.OutcomeID


LEFT JOIN Core.DimDate DDStart
on rc.StartDateID = DDStart.DateID

LEFT JOIN core.DimDate DDEnd
on rc.EndDateID= DDEnd.DateID

--LEFT JOIN dwPoa.DimDate DDNext
--on iv.NextReportingPeriodReleaseDate_ID = DDNext.DateKey

where i.ShortName not like '%overall%'
/*AND ( ISNULL(i.outcome_ID  ,  om.outcome_id) = @Outcome_ID OR @Outcome_ID = 0)
AND (ISNULL(i.Output_ID  ,  o.Output_id) = @Output_ID OR @Output_ID = 0)
AND (ISNULL(i.SubOutput_ID  ,  so.SubOutput_id) = @SubOutput_ID OR @SubOutput_ID = 0) 
*/

AND ( i.outcomeID  = @Outcome_ID OR @Outcome_ID = 0)
AND (i.Output_ID  = @Output_ID OR @Output_ID = 0)
AND (i.SubOutput_ID = @SubOutput_ID OR @SubOutput_ID = 0) 
AND (i.IndicatorID  = @Indicator_ID OR @Indicator_ID = 0 OR iv.Location_ID is null)



----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------


order by OutcomeCode  ASC ,  OutputCode  ASC , SubOutputCode  ASC , IndicatorCode  ASC , ReportCycleDate_ID DESC
GO
PRINT N'Creating [dbo].[uspIndicatorTimeline]...';


GO



CREATE PROC [dbo].[uspIndicatorTimeline]

	@DataVersion_ID int --varchar(255)
, @indicator_id int --varchar(255)
, @TermSetIndicator_ID int--varchar(255)
, @Location_ID int =1 
--, @Location_ID int =1 
AS
/*
declare 
@DataVersion_ID int  = 40
, @indicator_id int = 751
, @TermSetIndicator_ID int = 0
, @Location_ID int =1 
*/

SELECT    

DENSE_RANK() Over (order by code) %2 RN,
UnitOfMeasure,
CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID) = 1 THEN ISNULL(OriginalBaseline,0)
ELSE NULL END

 BaselineStart,
 
 CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID) = 1 THEN ISNULL(CAST(OriginalBaseline as varchar(255)), BaselineString)
ELSE NULL END

 BaselineStartString,

CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID DESC) = 1 THEN ISNULL(Target2014,0)
ELSE NULL END TargetEnd, 
 Target2014,
 
 
CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID DESC) = 1 THEN ISNULL(Cast(Target2014 as varchar(255)), TargetValueString)
ELSE NULL END TargetEndString, 
dbo.fn_StripMDXKey(@DataVersion_ID) DataVersionParm,

FinancialYear,
--FIV.ExtrapolatedTarget,
FIV.LocationName,
FIV.IndicatorValues_ID, FIV.Indicator_ID
,FIV.Notes,FIV.Title,FIV.DataVersion_ID,
 FIV.ReportCycle, FIV.LongName, FIV.Code, FIV.ShortName
, FIV.Baseline, FIV.BaselineString
, ISNULL(FIV.TargetValue, 0) AS TargetValue
, FIV.TargetValueString
, ISNULL(FIV.ActualValue , CASE WHEN Title IS null OR Title = '' then null else 0 end)
                         AS ActualValue
                         , FIV.ActualValueString
                         , FIV.ReleaseDate
                         , FIV.ReportingDate
                         , FIV.IndicatorReportingDate
                         , FIV.IndicatorStatusPercent
                         , FIV.ReportCycleDate_ID, 
                         CONVERT(DATETIME, CONVERT(VARCHAR, FIV.ReportCycleDate_ID), 112) AS ReportCycleDate
                         


--MAX(RowX) over (partition by indicator_id),
--ROW_NUMBER() over (partition by indicator_id order by ReportCycleDate_ID desc) ,
,OriginalBaseline + ( (( Target2014 - OriginalBaseline)/  (CAST(MAX(RowX) over (partition by indicator_id)  as float) -1))

 )
 * CAST((ROW_NUMBER() over (partition by indicator_id order by ReportCycleDate_ID)) -1  as float)
 
 AS ExtrapolatedTarget


 FROM (
SELECT  
i.UnitOfMeasure,
null financialYear,
ROW_NUMBER() over (partition by i.indicatorid order by rc.StartDateID) as RowX,
ISNULL([IndicatorValues_ID],0) [IndicatorValues_ID] 
      ,i.[IndicatorID] [Indicator_ID]
      ,i.[Baseline] [Baseline]
      , i.[BaselineString] BaselineString
      ,i.Target [TargetValue]
      ,i.TargetString [TargetValueString]
      ,[ActualValue]
      ,[ActualValueString]
      ,ISNULL(iv.[ReleaseDate], i.ReleaseDate) ReleaseDate
      ,ISNULL(iv.[ReportingDate], i.ReportingDate) ReportingDate
      ,[IndicatorReportingDate]
      ,i.[Output_ID]
      ,i.[OutcomeID]
      ,iv.[BusinessKey]
      ,iv.[Notes]
      ,ISNULL(iv.Title, iv.ActualValueString) Title
      --,iv.Title
      ,rc.ReportingPeriod ReportCycle
      ,i.ShortName
      ,i.Code
      ,i.LongName
      ,null [VerifiedActualValue]
      ,null [VerifiedActualNotes]

      ,i.[IndicatorType_ID]
      ,i.[Activity_ID]
      ,i.[SubOutput_ID]
      ,ISNULL(iv.[DataVersion_ID],0) DataVersion_ID
      ,i.[Sharepoint_ID]
      ,ISNULL(iv.Location_ID,1) Location_ID
      ,iv.IndicatorStatusPercent      
         
      ,rc.ReportingPeriod ReportCycleDate_ID
         
                     ,i.BaselineDate
      ,BaselineDate_ID = (YEAR(i.BaselineDate) * 10000)  + (MONTH(i.BaselineDate) * 100) + DAY(i.BaselineDate)
      ,i.TargetDate
       ,TargetDate_ID = (YEAR(i.TargetDate) * 10000)  + (MONTH(i.TargetDate) * 100) + DAY(i.TargetDate)
            ,RolledUpToOutcome_ID = ISNULL(i.outcomeID, o.outcomeid)
      ,RolledUpToOutput_ID = ISNULL(i.output_id, so.output_ID)
      ,RolledUpToSubOutput_ID = i.suboutput_id
      ,RolledUpToActivity_ID = i.activity_ID
      --  ,TermSetID = DIML.TermsetDeepGrainID
	,i.Baseline OriginalBaseline
	,i.Target Target2014
	,rc.StartDateID ReportingPeriodStartDate_ID
	,rc.EndDateID 	
	,null NextReportingPeriodReleaseDate_ID
	,l.Name LocationName
	
  FROM app.Indicator i 
   join RBM.[IndicatorValues] iv
  on i.IndicatorID = iv.Indicator_ID
    
  INNER JOIN Core.ReportingPeriod rc
  on 
  iv.ReportPeriodID = rc.ID  
  
    inner join 
  
  Core.DataVersion DDV 
  
  ON (CHARINDEX('level',@DataVersion_ID) = 0 
  AND DDV.DataVersion_ID  = dbo.fn_StripMDXKey(@DataVersion_ID)
  )
  OR ( CHARINDEX('level',@DataVersion_ID) > 0 
  AND DDV.DataVersionLevel_ID = dbo.fn_StripMDXKey(@DataVersion_ID)
  AND DDV.Outcome_ID IS NULL
  )
  
  

    and  (
    
    (iv.DataVersion_ID = DDV.DataVersion_ID OR iv.DataVersion_ID is null)
    OR ( iv.DataVersion_ID  IN (SELECT DataVersion_ID FROM Core.DataVersion DV WHERE DV.DataVersionLevel_ID = DDV.DataVersionLevel_ID )
and DDV.Outcome_ID is null
)

    
    )
    and (iv.Location_ID = @Location_ID OR @Location_ID = 0 )
    
    
LEFT OUTER JOIN app.Activity a
on i.Activity_ID = a.ActivityID
LEFT OUTER JOIN app.SubOutput SO
on i.SubOutput_ID = so.SubOutput_ID 

LEFT OUTER JOIN app.Output o
on i.Output_ID = o.Output_ID
OR so.Output_ID = o.Output_ID
LEFT OUTER JOIN Core.Location l
on (iv.Location_ID = l.Location_ID OR @Location_ID = l.Location_ID)



  --where 
/*
*/
) FIV
where (Indicator_ID = dbo.fn_StripMDXKey(@indicator_id) OR (dbo.fn_StripMDXKey(@indicator_id)  = 0 AND NOT @TermSetIndicator_ID ='0') )
--AND (

--CAST([TermSetID] as varchar(255)) = dbo.fn_StripMDXKey(@TermSetIndicator_ID )

 --OR @TermSetIndicator_ID = '0') 


--and ReportCycleDate_ID >= 20090101

and ReportCycle not like '%pre%'
--and (Location_ID = @Location_ID OR @Location_ID = 0 OR @Location_ID iS NULL)

order by ReportCycleDate_ID ASC
GO
PRINT N'Creating [dbo].[uspIndicatorTimeline_ProvincialMaps]...';


GO



CREATE PROC [dbo].[uspIndicatorTimeline_ProvincialMaps]
--declare
	@DataVersion_ID varchar(255)= 5
, @indicator_id varchar(255)
, @TermSetIndicator_ID varchar(255)
, @Location_ID int =1 

AS
--begin
/*
declare 
@DataVersion_ID int  = 40
, @indicator_id int = 751
, @TermSetIndicator_ID int = 0

*/

SELECT    
DatePosition,
UnitOfMeasure,CASE WHEN RowX > 1 THEN 
 [Baseline] + ( (( Target2014 - [Baseline])/  (CAST(MAX(RowX) over (partition by indicator_id,location_ID)  as float) -1))

 
 * CAST((ROW_NUMBER() over (partition by indicator_id,location_ID order by ReportCycleDate_ID)) -1  as float)
 )
 ELSE 
 OriginalBaseline END
 AS ExtrapolatedTarget
,

/*CAST((ROW_NUMBER() over (partition by indicator_id,location_ID order by ReportCycleDate_ID)) -1  as float) as mult,
  (( Target2014 - [Baseline])/  (CAST(MAX(RowX) over (partition by indicator_id,location_ID)  as float) -1)) as increase,
  (CAST(MAX(RowX) over (partition by indicator_id,location_ID)  as float) -1) as div,*/
CASE WHEN ROW_NUMBER() Over ( PARTITION  by Indicator_ID, location_id order by ReportCycleDate_ID) = 1 THEN OriginalBaseline
ELSE null END

 BaselineStart,

CASE WHEN ROW_NUMBER() Over ( PARTITION  by Indicator_ID, location_id order by ReportCycleDate_ID DESC) = 1 THEN Target2014
ELSE null END TargetEnd, 

 Target2014,
dbo.fn_StripMDXKey(@DataVersion_ID) DataVersionParm,
FinancialYear,
--FIV.ExtrapolatedTarget,
FIV.LocationName,
geog,
FIV.IndicatorValues_ID, FIV.Indicator_ID
,FIV.Notes,FIV.Title,FIV.DataVersion_ID,
 FIV.ReportCycle, FIV.LongName, FIV.Code, FIV.ShortName
, FIV.Baseline, FIV.BaselineString
, ISNULL(FIV.TargetValue, 0) AS TargetValue
, FIV.TargetValueString
, ISNULL(FIV.ActualValue , CASE WHEN Title IS null OR Title = '' then null else 0 end)
                         AS ActualValue
                         , FIV.ActualValueString
                         , FIV.ReleaseDate
                         , FIV.ReportingDate
                         , FIV.IndicatorReportingDate
                         , FIV.IndicatorStatusPercent
                         , FIV.ReportCycleDate_ID, 
                         CONVERT(DATETIME, CONVERT(VARCHAR, FIV.ReportCycleDate_ID), 112) AS ReportCycleDate
                         


--MAX(RowX) over (partition by indicator_id),
--ROW_NUMBER() over (partition by indicator_id order by ReportCycleDate_ID desc) ,



 FROM (
SELECT 
l.geog, 
i.UnitOfMeasure,
rc.YearName financialYear,
ROW_NUMBER() over (partition by i.indicatorid, iv.location_id order by rc.EndDateID  desc) as DatePosition,
ROW_NUMBER() over (partition by i.indicatorid, iv.location_id order by rc.EndDateID ) as RowX,
ISNULL(iv.[IndicatorValues_ID],0) [IndicatorValues_ID] 
      ,i.[IndicatorID] [Indicator_ID]
      ,i.[Baseline] [Baseline]
      , i.[BaselineString] BaselineString
      , i.Target [TargetValue]
      , i.TargetString [TargetValueString]
      ,[ActualValue]
      ,[ActualValueString]
      ,ISNULL(iv.[ReleaseDate], i.ReleaseDate) ReleaseDate
      ,ISNULL(iv.[ReportingDate], i.ReportingDate) ReportingDate
      ,[IndicatorReportingDate]
      ,i.[Output_ID]
      ,i.[OutcomeID] [Outcome_ID]
      ,iv.[BusinessKey]
      ,iv.[Notes]
      ,iv.Title
      ,rc.ReportingPeriod ReportCycle
      ,i.ShortName
      ,i.Code
      ,i.LongName


      ,i.[IndicatorType_ID]
      ,i.[Activity_ID]
      ,i.[SubOutput_ID]
      ,ISNULL(iv.[DataVersion_ID],0) DataVersion_ID
      ,i.[Sharepoint_ID]
      ,iv.Location_ID
      ,iv.IndicatorStatusPercent      
         
      ,rc.EndDateID ReportCycleDate_ID
         
                     ,i.BaselineDate
      ,BaselineDate_ID = (YEAR(i.BaselineDate) * 10000)  + (MONTH(i.BaselineDate) * 100) + DAY(i.BaselineDate)
      ,i.TargetDate
       ,TargetDate_ID = (YEAR(i.TargetDate) * 10000)  + (MONTH(i.TargetDate) * 100) + DAY(i.TargetDate)
            ,RolledUpToOutcome_ID = ISNULL(i.outcomeID, o.outcomeid)
      ,RolledUpToOutput_ID = ISNULL(i.output_id, so.output_ID)
      ,RolledUpToSubOutput_ID = i.suboutput_id

	,i.Baseline OriginalBaseline
	,i.Target Target2014
	,rc.StartDateID ReportingPeriodStartDate_ID
	,rc.EndDateID ReportingPeriodEndDate_ID	

	,l.Name LocationName

  FROM app.IndicatorLocation il 
  join app.Indicator i
  on i.IndicatorID = il.Indicator_ID
    inner join 
  
  Core.DataVersion DDV 
  
  ON (CHARINDEX('level',@DataVersion_ID) = 0 
  AND DDV.DataVersion_ID  = dbo.fn_StripMDXKey(@DataVersion_ID)
  )
  OR ( CHARINDEX('level',@DataVersion_ID) > 0 
  AND DDV.DataVersionLevel_ID = dbo.fn_StripMDXKey(@DataVersion_ID)
  AND DDV.Outcome_ID IS NULL
  )
  
  
  left join RBM.[IndicatorValues] iv
  on i.IndicatorID = iv.Indicator_ID
  and il.Location_ID = iv.Location_ID
    --and iv.ReportCycleDate_ID = rc.ReportCycleReportDate_ID  
    and  (
    
    (iv.DataVersion_ID = DDV.DataVersion_ID OR iv.DataVersion_ID is null)
    OR ( iv.DataVersion_ID  IN (SELECT DataVersion_ID FROM Core.DataVersion DV WHERE DV.DataVersionLevel_ID = DDV.DataVersionLevel_ID )
and DDV.Outcome_ID is null
)

    
    )
    
    INNER JOIN Core.ReportingPeriod rc
  on 

  iv.ReportPeriodID = rc.ID
    

LEFT OUTER JOIN app.SubOutput SO
on i.SubOutput_ID = so.SubOutput_ID 
LEFT OUTER JOIN app.Output o
on i.Output_ID = o.Output_ID
OR so.Output_ID = o.Output_ID
INNER JOIN Core.Location l
on il.Location_ID = l.Location_ID



  --where 
/*
*/
) FIV
--where (Indicator_ID = dbo.fn_StripMDXKey(@indicator_id) OR (dbo.fn_StripMDXKey(@indicator_id)  = 0 AND NOT @TermSetIndicator_ID ='0') )


--and ReportCycleDate_ID >= 20090101

--and ReportCycle not like '%pre%'
--and (Location_ID = @Location_ID OR @Location_ID = 0)


--and FinancialYear   = '2010/11'
--and indicator_id = 764
--and DatePosition = 1

order by [Location_ID] ASC, ReportCycleDate_ID ASC

--end
GO
PRINT N'Creating [dbo].[uspKeyIndicators]...';


GO



CREATE PROC [dbo].[uspKeyIndicators]
--declare
@OutcomeID int
,@KeyIndicator int = 1
,@LocationID int = 1
,@DataVersionID Int = 0
, @IncludeExtrapolatedTargetDates int = 0
as


SELECT  

--rcdate,rcedate,
DENSE_RANK() OVER (ORDER BY code) % 2 AS RN,

 [dbo].[fn_ConcatenateIndicator_LocationTypeNames] (indicatorID) LocationTypeNames,
--dbo.fn_ConcatenateIndicator_DSName (indicatorid) 
null
DataSourceNames, -- no indicator dsn tbl

CASE WHEN MAX(RowX) over (partition by indicatorid,location_ID) > 1 THEN 
OriginalBaseline + ( (( Target2014 - OriginalBaseline)/  (CAST(MAX(RowX) over (partition by indicatorid,location_ID)  as float) -1))

 )
 * CAST((ROW_NUMBER() over (partition by indicatorid,location_ID order by ReportCycleDate_ID)) -1  as float)
 ELSE 
 OriginalBaseline END
 AS ExtrapolatedTarget,
* 
 FROM (
 SELECT

 L.Name LocationName, 
 rc.ID RCDate, -- incorrect as there is no proper dates in reporting cylce
--RCExtrapolated.ReportCycleReportDate_ID RCEDate,
 --i.baseline OriginalBaseline,
 --i.Target Target2014,
ROW_NUMBER() over (partition by i.indicatorid order by rc.StartDateID) as RowX,
CASE WHEN ROW_NUMBER() Over (PARTITION by i.IndicatorID,iv.location_ID order by rc.StartDateID) = 1 THEN i.Baseline
ELSE NULL END

 BaselineStart,

CASE WHEN ROW_NUMBER() Over ( PARTITION by i.IndicatorID,iv.location_ID order by rc.StartDateID DESC) = 1 THEN i.Target
ELSE NULL END TargetEnd, 
MaxValue = CASE WHEN i.Target > i.Baseline AND i.Target > ActualValue 
THEN i.Target
WHEN ActualValue > i.Baseline AND ActualValue  > i.Target 
THEN ActualValue 
ELSE i.Baseline
END,
--ISNULL( RCExtrapolated.FinancialYEar ,rc.FinancialYear) FinancialYear,
null FinancialYear, --rc.FinancialYear need to find new field to substitute for this

DENSE_RANK() OVER (order  by i.Code) IndicatorNum,
iv.Title DataLabel,

om.LongName OutcomeName,
o.LongName OutputName,
so.LongName SubOutputName,
i.LongName IndicatorName,
Path = om.Code + ' 
' + isnull(o.code,'') + ' 
' + isnull(so.code,''),
convert(varchar(20),DDStart.[Date],112) StartDate,
convert(varchar(20),DDEnd.[Date],112) EndDate,
DDEnd.YearNumber,
cast(rc.StartDateID as varchar) + ' - ' + 
cast(rc.EndDateID  as varchar) ReportingPeriod,
--DDNext.TextDate
null NextDate, -- need to get how to 
ISNULL([IndicatorValues_ID],0) [IndicatorValues_ID] 
      ,i.[IndicatorID]
      ,/*ISNULL(iv.Baseline, */i.[Baseline]/*)*/ [Baseline]
      ,/*ISNULL(iv.BaselineString, */ i.[BaselineString]/*) */BaselineString
      ,/*ISNULL(iv.TargetValue, */i.Target/*)*/ [TargetValue]
      ,/*ISNULL(iv.TargetValueString,*/ i.TargetString/*)*/ [TargetValueString]
      ,[ActualValue]
      ,[ActualValueString]
      ,ISNULL(iv.[ReleaseDate], i.ReleaseDate) ReleaseDate
      ,ISNULL(iv.[ReportingDate], i.ReportingDate) ReportingDate
      ,[IndicatorReportingDate]
      ,i.UnitOfMeasure
      
      ,i.[Output_ID]
      ,i.[OutcomeID]
      ,iv.[BusinessKey]
      ,iv.[Notes]
      ,iv.Title
      ,rc.ReportingPeriod ReportCycle
      ,i.ShortName
      ,i.Code
      ,i.LongName
      ,null [VerifiedActualValue] -- not in table
      ,null [VerifiedActualNotes] -- not in table

      ,i.[IndicatorType_ID]
      ,i.[Activity_ID]
      ,i.[SubOutput_ID]
	  ,i.IndicatorID Indicator_ID
      ,ISNULL([DataVersion_ID],0) DataVersion_ID
      ,i.[Sharepoint_ID]
      ,ISNULL(iv.Location_ID,1) Location_ID
      ,iv.IndicatorStatusPercent      
         
      ,/*ISNULL(iv.ReportCycleDate_ID,*/ rc.StartDateID/*)*/ ReportCycleDate_ID
         
                     ,i.BaselineDate
      ,BaselineDate_ID = (YEAR(i.BaselineDate) * 10000)  + (MONTH(i.BaselineDate) * 100) + DAY(i.BaselineDate)
      ,i.TargetDate
       ,TargetDate_ID = (YEAR(i.TargetDate) * 10000)  + (MONTH(i.TargetDate) * 100) + DAY(i.TargetDate)
            ,RolledUpToOutcome_ID = ISNULL(i.outcomeID, o.outcomeid)
      ,RolledUpToOutput_ID = ISNULL(i.output_id, so.output_ID)
      ,RolledUpToSubOutput_ID = i.suboutput_id
      ,RolledUpToActivity_ID = i.activity_ID
 --         ,TermSetID = DIML.TermsetDeepGrainID
	,i.Baseline OriginalBaseline
	,i.Target Target2014
	,rc.StartDateID ReportingPeriodStartDate_ID
	,rc.EndDateID ReportingPeriodEndDate_ID	
	,null NextReportingPeriodReleaseDate_ID
	
	
	, ParentMDX =  
	CASE WHEN i.OutcomeID IS Not NULL 
	THEN '[Outcome].[Outcome].[' + CAST (i.OutcomeID  as varchar(8)) + ']'
	
	WHEN i.Output_ID IS Not NULL 
	THEN '[Output].[Output].[' + CAST (i.Output_ID as varchar(8))  + ']'
	
	WHEN i.SubOutput_ID IS Not NULL 
	THEN '[Sub Output].[Sub Output].[' + CAST (i.SubOutput_ID as varchar(8)) + ']'
	END 
	,om.[OutcomeSiteName]
FROM 
  app.Indicator i 
  join RBM.[IndicatorValues] iv
    on i.IndicatorID = iv.Indicator_ID
  JOIN Core.ReportingPeriod rc
    on iv.ReportPeriodID = rc.ID
  LEFT JOIN app.SubOutput SO
    on i.SubOutput_ID = so.SubOutput_ID 
  LEFT JOIN app.Output o
    on i.Output_ID = o.Output_ID
    OR so.Output_ID = o.Output_ID

  LEFT JOIN app.Outcome om
    on i.OutcomeID = om.OutcomeID
    OR o.OutcomeID = om.OutcomeID

  LEFT JOIN Core.DimDate DDStart
    on rc.StartDateID = DDStart.DateID

  LEFT JOIN Core.DimDate DDEnd
    on rc.EndDateID = DDEnd.DateID

  LEFT JOIN Core.Location  L
    on iv.Location_ID = L.Location_ID

where 
  i.ShortName not like '%overall%'
  AND  (ISNULL(i.outcomeID, o.outcomeid) = @OutcomeID OR @OutcomeID = 0 )
  and (i.IsKeyIndicator = @KeyIndicator  or @KeyIndicator = 0)
  AND (iv.DataVersion_ID = @DataVersionID OR @DataVersionID = 0 OR iv.DataVersion_ID is null)
  AND (iv.Location_ID = @LocationID OR @LocationID = 0 OR iv.Location_ID IS NULL)
  AND (iv.IndicatorValues_ID IS NOT NULL OR @IncludeExtrapolatedTargetDates =1)
 ) SRC


ORDER BY Code, ReportCycleDate_ID
GO
PRINT N'Creating [dbo].[uspMilestoneProgress]...';


GO



CREATE PROC [dbo].[uspMilestoneProgress]
--declare
@DataVersion_ID varchar(255)--=5
, @MDXMIlestone_ID varchar(255)--=8

AS
--begin
SET @DataVersion_ID = dbo.fn_StripMDXKey(@DataVersion_ID)
SET @MDXMIlestone_ID   = dbo.fn_StripMDXKey(@MDXMIlestone_ID   )


SELECT    ROW_NUMBER() over (order by rp.LastCycleDate desc) RowNum,
HiddenMilestoneStartDate = CASE WHEN ROW_NUMBER() over (order by rp.LastCycleDate desc)  = 1 THEN mv.ActualDate  ELSE NULL END,
HiddenMilestoneCompletionDate = CASE WHEN ROW_NUMBER() over (order by rp.LastCycleDate desc)  = 1 THEN mv.ActualDate  ELSE NULL END,

rp.YearName EndingPeriodFinancialYear
,rp.LastCycleDate EndingPeriodReportCycle,
dbo.fn_StripMDXKey(@DataVersion_ID) DataVersionPARM,
mv.DataVersion_ID newDV,

rp.FirstCycleDate ReportingPeriodStartDate,
rp.LastCycleDate ReportingPeriodEndDate,

DATEADD(d, (DATEDIFF(d,FirstCycleDate, m.TargetDate) * mv.MilestoneStatusPercent), FirstCycleDate) MilestoneCurrentDate,


 mv.MilestoneStatusPercent MilestoneProgressPercent,
 mv.Milestone_ID,
 a.LongName ActivityLongName,
 CASE WHEN ROW_NUMBER() over (order by mv.[ReportPeriodID])  = 1 THEN mv.ActualDate ELSE NULL END MilestoneStartDate,
 CASE WHEN ROW_NUMBER() over (order by mv.[ReportPeriodID])  = 1 THEN mv.ActualDate ELSE NULL END MilestoneCompletionDate,

 CAST(rp.StartDateID as varchar(255)) + ' - ' +  CAST(rp.EndDateID as varchar(255)) as ReportingPeriod,
 rp.StartDateID ReportingPeriodStartDate_ID,
 rp.EndDateID ReportingPeriodEndDate_ID,
 mv.MilestoneValues_ID ActivityMilestone_ID, 
 null RolledUpToActivity_ID,
 mv.Notes,
 mv.Title,
 mv.DataVersion_ID,
 m.TextDescription LongName, 
 m.Code, 
 m.ShortName, 
 m.Baseline, 
 m.BaselineString,
 ISNULL(m.Target, 0) AS TargetValue,
 m.TargetString TargetValueString,
ISNULL(mv.ActualValue, 0) AS ActualValue,
mv.ActualValueString,
m.ReleaseDate,
m.ReportingDate,
null MilestoneCompletionDate_ID,
null MilestoneStartDate_ID,
--rp.ReportingPeriod, 
rp.LastCycleDate AS ReportCycleDate
                         
--select * 
FROM 
  RBM.MilestoneValues mv
  join app.Milestone m
    on mv.Milestone_ID = m.MilestoneID
  join app.Activity a
    on m.ActivityID = a.ActivityID
  join Core.ReportingPeriod rp
    on rp.ID = mv.ReportPeriodID
  join Core.DataVersion DDV 
    on (CHARINDEX('level',@DataVersion_ID) = 0 
        and DDV.DataVersion_ID  = dbo.fn_StripMDXKey(@DataVersion_ID))
	  or (CHARINDEX('level',@DataVersion_ID) > 0 
          and DDV.DataVersionLevel_ID = dbo.fn_StripMDXKey(@DataVersion_ID)
          and DDV.Outcome_ID IS NULL)
  LEFT JOIN Core.DataVersion DVChild
    on DDV.DataVersion_ID  = DVChild.ParentDataVersion_ID
  
  
 
where 
(mv.DataVersion_ID = DDV.DataVersion_ID 
OR mv.DataVersion_ID = DVChild.DataVersion_ID)
and
CAST(mv.Milestone_ID as varchar(255)) = dbo.fn_StripMDXKey(@MDXMIlestone_ID )

order by rp.StartDateID ASC


--end
GO
PRINT N'Creating [dbo].[uspAlterAllTableswithsys_XX]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE  uspAlterAllTableswithsys_XX
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @i int
DECLARE @FTN Nvarchar(500)
DECLARE @TableList TABLE (
    idx smallint Primary Key IDENTITY(1,1)
    , FTN Nvarchar(500) 
)



INSERT @TableList
  Select s.name + '.' + o.name as FTN 
 from Sys.objects o 
 Inner Join sys.schemas s on o.schema_id=s.schema_id
 where o.type like 'U ' 

SET @i = 1
Declare @numrows int = (SELECT COUNT(*) FROM @TableList)
IF @numrows > 0
    WHILE (@i <= (SELECT MAX(idx) FROM @TableList))
    BEGIN


        -- get the next employee primary key
        SET @FTN = (SELECT FTN FROM @TableList WHERE idx = @i)


        --
        -- do something with this employee
        EXEC	 [dbo].[uspCreateSysDefaultColumns]
		@@FTable = @FTN
    

        -- increment counter for next employee
        SET @i = @i + 1
    END
    

 
 

END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
/*Activity Type */
INSERT [Core].[ActiveType] ([ID], [Code], [Name], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (-1, N'Deleted', N'Deleted', N'dbo', CAST(0x0000A1CC00FA3229 AS DateTime), N'dbo', CAST(0x0000A1CC00FA3229 AS DateTime))
GO
INSERT [Core].[ActiveType] ([ID], [Code], [Name], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (0, N'Inactive', N'Inactive', N'dbo', CAST(0x0000A1CC00FA3229 AS DateTime), N'dbo', CAST(0x0000A1CC00FA3229 AS DateTime))
GO
INSERT [Core].[ActiveType] ([ID], [Code], [Name], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (1, N'Active', N'Active', N'dbo', CAST(0x0000A1CC00FA3229 AS DateTime), N'dbo', CAST(0x0000A1CC00FA3229 AS DateTime))
GO


/*Dim Date */
SET NOCOUNT ON;
IF (SELECT COUNT(1) FROM Core.DimDate) = 0
BEGIN
--Alter start

DECLARE
@StartDate DATETIME
,@EndDate DATETIME
,@Date DATETIME;

SET @StartDate = '1990/01/01';
SET @EndDate = '2025/12/31';
SET @Date = @StartDate;

WHILE @Date <= @EndDate
BEGIN

DECLARE @IsLeapYear BIT
IF ((Year(@Date) % 4 = 0) AND (Year(@Date) % 100 != 0 OR Year(@Date) % 400 = 0))
BEGIN

SELECT @IsLeapYear = 1;

END
ELSE
BEGIN

SELECT @IsLeapYear = 0;

END

DECLARE @IsWeekend BIT
IF (DATEPART(dw, @Date) = 1 OR DATEPART(dw, @Date) = 7)
BEGIN

SELECT @IsWeekend = 1;

END
ELSE
BEGIN

SELECT @IsWeekend = 0;

END

INSERT INTO Core.DimDate 
(DateID,Date,Day,DaySuffix,USDayOfWeek,DayOfWeek,DOWInMonth,DayOfYear,WeekOfYear,WeekOfMonth,MonthNumber,MonthName,Quarter,QuarterName,YearName,YearNumber,StandardDate,IsPublicHoliday,HolidayText)

VALUES
(
REPLACE(CONVERT(NVARCHAR(50),CONVERT(DATE,@Date)),'-','')
,@Date
,DATEPART(DAY,@Date)
,SUBSTRING(CONVERT(CHAR(3),DATENAME(DW, @Date)),1,3)
,DATEPART(WEEKDAY,@Date)
,CASE WHEN DATEPART(WEEKDAY,@Date)-1 = 0 THEN 1  
         WHEN DATEPART(WEEKDAY,@Date)-1 = 6 THEN 7  
         ELSE DATEPART(WEEKDAY,@Date)-1 
 END
,DATEPART(DAY,(DATEADD(S,-1,DATEADD(MM, DATEDIFF(M,0,@Date)+1,0))))
,DATEPART(DAYOFYEAR,@Date)
,DATEPART(WEEK,@Date)
,(DATEPART(DAY,@Date) / 7) + 1
,DATEPART(MONTH,@Date)
,DATENAME(MONTH,@Date)
,DATEPART(QUARTER,@Date)
,'Quarter ' + CONVERT(NVARCHAR(255),DATEPART(QUARTER,@Date))
,CONVERT(CHAR(4),DATEPART(YEAR,@Date))
,DATEPART(YEAR,@Date)
,NULL
,NULL
,NULL 
);

SET @Date += 1;

END

PRINT 'Updated Table [Shared.DimDate]';

END
GO
/*Reporting Period*/
insert into core.ReportingPeriod ( [ReportingPeriod]
      ,[StartDateID]
      ,[EndDateID]
      ,[FirstCycleDate]
      ,[LastCycleDate]
      ,[YearName]
      ,[YearNumber])
SELECT  [ReportingPeriod]
      ,[StartDateID]
      ,[EndDateID]
      ,[FirstCycleDate]
      ,[LastCycleDate]
      ,[YearName]
      ,[YearNumber]
  FROM [Core].[ReportCycle]


  /*DataVersion Level*/
  
SET IDENTITY_INSERT [Core].[DataVersionLevel] ON 

GO
INSERT [Core].[DataVersionLevel] ([DataVersionLevel_ID], [VersionLevelCode], [VersionOrder], [Name], [Description], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (2, N'0', 10, N'Working Group', N'Output to Working Group', 1, N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime))
GO
INSERT [Core].[DataVersionLevel] ([DataVersionLevel_ID], [VersionLevelCode], [VersionOrder], [Name], [Description], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (3, N'1', 20, N'Public Release', N'Final Release to public - not used where public information is not allowed', 1, N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime))
GO
INSERT [Core].[DataVersionLevel] ([DataVersionLevel_ID], [VersionLevelCode], [VersionOrder], [Name], [Description], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (4, N'2', 30, N'Final Release', N'Final numbers internally', 1, N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime))
GO
INSERT [Core].[DataVersionLevel] ([DataVersionLevel_ID], [VersionLevelCode], [VersionOrder], [Name], [Description], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (5, N'3', 40, N'Pre release', N'Numbers for discussion within outcome at national level', 1, N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime))
GO
INSERT [Core].[DataVersionLevel] ([DataVersionLevel_ID], [VersionLevelCode], [VersionOrder], [Name], [Description], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (6, N'4', 50, N'Pre release - 2', N'2 versions prior to release', 1, N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime))
GO
INSERT [Core].[DataVersionLevel] ([DataVersionLevel_ID], [VersionLevelCode], [VersionOrder], [Name], [Description], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (7, N'5', 60, N'Pre release - 3', N'3 versions prior to release', 1, N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime))
GO
INSERT [Core].[DataVersionLevel] ([DataVersionLevel_ID], [VersionLevelCode], [VersionOrder], [Name], [Description], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (8, N'6', 70, N'Pre release - 4', N'4 versions prior to release', 1, N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1C AS DateTime))
GO
INSERT [Core].[DataVersionLevel] ([DataVersionLevel_ID], [VersionLevelCode], [VersionOrder], [Name], [Description], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (9, N'7', 80, N'Pre release - 5', N'5 versions prior to release', 1, N'dbo', CAST(0x0000A1EF0144CDDE AS DateTime), N'mneadmin', CAST(0x0000A1EF0144CDE7 AS DateTime))
GO
SET IDENTITY_INSERT [Core].[DataVersionLevel] OFF
GO

/*Outcomes Generic*/

SET IDENTITY_INSERT [app].[Outcome] ON 

GO
INSERT [app].[Outcome] ([OutcomeID], [Code], [LongName], [BusinessKey], [ShortName], [TextDescription], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn], [OutcomeSiteName]) VALUES (7, N'Outcome 1', N'Outcome 1 Long name', N'Outcome 1', N'Shortname', N'Text Description', 1, N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'Test User', CAST(0x0000A1CC00FC9E10 AS DateTime), N'Outcome1')
GO
INSERT [app].[Outcome] ([OutcomeID], [Code], [LongName], [BusinessKey], [ShortName], [TextDescription], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn], [OutcomeSiteName]) VALUES (9, N'Outcome 2', N'Outcome 2 Long name', N'Outcome 2', N'Shortname', N'Text Description', 1, N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'Outcome2')
GO
INSERT [app].[Outcome] ([OutcomeID], [Code], [LongName], [BusinessKey], [ShortName], [TextDescription], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn], [OutcomeSiteName]) VALUES (10, N'Outcome 3', N'Outcome 3 Long name', N'Outcome 3', N'Shortname', N'Text Description', 1, N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'Outcome3')
GO
INSERT [app].[Outcome] ([OutcomeID], [Code], [LongName], [BusinessKey], [ShortName], [TextDescription], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn], [OutcomeSiteName]) VALUES (11, N'Outcome 4', N'Outcome 4 Long name', N'Outcome 4', N'Shortname', N'Text Description', 1, N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'Outcome4')
GO
INSERT [app].[Outcome] ([OutcomeID], [Code], [LongName], [BusinessKey], [ShortName], [TextDescription], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn], [OutcomeSiteName]) VALUES (12, N'Outcome 5', N'Outcome 5 Long name', N'Outcome 5', N'Shortname', N'Text Description', 1, N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'Outcome5')
GO
INSERT [app].[Outcome] ([OutcomeID], [Code], [LongName], [BusinessKey], [ShortName], [TextDescription], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn], [OutcomeSiteName]) VALUES (13, N'Outcome 6', N'Outcome 6 Long name', N'Outcome 6', N'Shortname', N'Text Description', 1, N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'Outcome6')
GO
INSERT [app].[Outcome] ([OutcomeID], [Code], [LongName], [BusinessKey], [ShortName], [TextDescription], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn], [OutcomeSiteName]) VALUES (14, N'Outcome 7', N'Outcome 7 Long name', N'Outcome 7', N'Shortname', N'Text Description', 1, N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'Outcome7')
GO
INSERT [app].[Outcome] ([OutcomeID], [Code], [LongName], [BusinessKey], [ShortName], [TextDescription], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn], [OutcomeSiteName]) VALUES (15, N'Outcome 8', N'Outcome 8 Long name', N'Outcome 7', N'Shortname', N'Text Description', 1, N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B1B AS DateTime), N'Outcome8')
GO
SET IDENTITY_INSERT [app].[Outcome] OFF
GO

/*MilestoneType*/


SET IDENTITY_INSERT [app].[MilestoneType] ON 

GO
INSERT [app].[MilestoneType] ([MilestoneTypeID], [Code], [Name], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (1, N'Outcome', N'Outcome', 1, N'dbo', CAST(0x0000A1CC00FA5B0A AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B0A AS DateTime))
GO
INSERT [app].[MilestoneType] ([MilestoneTypeID], [Code], [Name], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (4, N'Project', N'Project', 1, N'dbo', CAST(0x0000A1CC00FA5B0A AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B0A AS DateTime))
GO
INSERT [app].[MilestoneType] ([MilestoneTypeID], [Code], [Name], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (5, N'Activity', N'Activity', 1, N'dbo', CAST(0x0000A1CC00FA5B0A AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B0A AS DateTime))
GO
SET IDENTITY_INSERT [app].[MilestoneType] OFF
GO


/*IndicatorType*/


SET IDENTITY_INSERT [app].[IndicatorType] ON 

GO
INSERT [app].[IndicatorType] ([IndicatorType_ID], [Code], [Name], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (1, N'Outcome', N'Outcome', 1, N'dbo', CAST(0x0000A1CC00FA5B15 AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B15 AS DateTime))
GO
INSERT [app].[IndicatorType] ([IndicatorType_ID], [Code], [Name], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (2, N'Output', N'Output', 1, N'dbo', CAST(0x0000A1CC00FA5B15 AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B15 AS DateTime))
GO
INSERT [app].[IndicatorType] ([IndicatorType_ID], [Code], [Name], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (3, N'SubOutput', N'Suboutput', 1, N'dbo', CAST(0x0000A1CC00FA5B15 AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B15 AS DateTime))
GO
INSERT [app].[IndicatorType] ([IndicatorType_ID], [Code], [Name], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (4, N'Activity', N'Activity', 1, N'dbo', CAST(0x0000A1CC00FA5B15 AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B15 AS DateTime))
GO
INSERT [app].[IndicatorType] ([IndicatorType_ID], [Code], [Name], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (5, N'Milestone', N'Milestone', 1, N'dbo', CAST(0x0000A1CC00FA5B15 AS DateTime), N'dbo', CAST(0x0000A1CC00FA5B15 AS DateTime))
GO
INSERT [app].[IndicatorType] ([IndicatorType_ID], [Code], [Name], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn]) VALUES (6, N'OS', N'Overall Status', 1, N'mneadmin', CAST(0x0000A1EF014B3065 AS DateTime), N'mneadmin', CAST(0x0000A1EF014B3073 AS DateTime))
GO
SET IDENTITY_INSERT [app].[IndicatorType] OFF
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [app].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_ActiveType];

ALTER TABLE [app].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_Outcome];

ALTER TABLE [app].[Project] WITH CHECK CHECK CONSTRAINT [FK_Project_Project];

ALTER TABLE [app].[Output] WITH CHECK CHECK CONSTRAINT [FK_Output_ActiveType];

ALTER TABLE [app].[Output] WITH CHECK CHECK CONSTRAINT [FK_Output_Outcome];

ALTER TABLE [app].[Status] WITH CHECK CHECK CONSTRAINT [FK_Status_ActiveType];

ALTER TABLE [app].[Status] WITH CHECK CHECK CONSTRAINT [FK_Status_Activity];

ALTER TABLE [app].[Status] WITH CHECK CHECK CONSTRAINT [FK_Status_Outcome];

ALTER TABLE [app].[Status] WITH CHECK CHECK CONSTRAINT [FK_Status_Output];

ALTER TABLE [app].[Status] WITH CHECK CHECK CONSTRAINT [FK_Status_SubOutput];

ALTER TABLE [app].[Milestone] WITH CHECK CHECK CONSTRAINT [FK_Milestone_ActiveType];

ALTER TABLE [app].[Milestone] WITH CHECK CHECK CONSTRAINT [FK_Milestone_Activity];

ALTER TABLE [app].[Milestone] WITH CHECK CHECK CONSTRAINT [FK_Milestone_MilestoneType];

ALTER TABLE [app].[Milestone] WITH CHECK CHECK CONSTRAINT [FK_Milestone_Outcome];

ALTER TABLE [app].[Milestone] WITH CHECK CHECK CONSTRAINT [FK_Milestone_Project];

ALTER TABLE [app].[MilestoneType] WITH CHECK CHECK CONSTRAINT [FK_MilestoneType_ActiveType];

ALTER TABLE [app].[SubOutputSubOutputLink] WITH CHECK CHECK CONSTRAINT [FK_SubOutputSubOutputLink_ActiveType];

ALTER TABLE [app].[SubOutputSubOutputLink] WITH CHECK CHECK CONSTRAINT [FK_SubOutputSubOutputLink_SubOutput];

ALTER TABLE [app].[SubOutputPersonRole] WITH CHECK CHECK CONSTRAINT [FK_SubOutputPersonRole_ActiveType];

ALTER TABLE [app].[SubOutputPersonRole] WITH CHECK CHECK CONSTRAINT [FK_SubOutputPersonRole_Person];

ALTER TABLE [app].[SubOutputPersonRole] WITH CHECK CHECK CONSTRAINT [FK_SubOutputPersonRole_Role];

ALTER TABLE [app].[SubOutputPersonRole] WITH CHECK CHECK CONSTRAINT [FK_SubOutputPersonRole_SubOutput];

ALTER TABLE [app].[SubOutput] WITH CHECK CHECK CONSTRAINT [FK_SubOutput_ActiveType];

ALTER TABLE [app].[SubOutput] WITH CHECK CHECK CONSTRAINT [FK_SubOutput_Output];

ALTER TABLE [app].[Indicator] WITH CHECK CHECK CONSTRAINT [FK_Indicator_ActiveType];

ALTER TABLE [app].[Indicator] WITH CHECK CHECK CONSTRAINT [FK_Indicator_Activity];

ALTER TABLE [app].[Indicator] WITH CHECK CHECK CONSTRAINT [FK_Indicator_IndicatorType];

ALTER TABLE [app].[Indicator] WITH CHECK CHECK CONSTRAINT [FK_Indicator_Outcome];

ALTER TABLE [app].[Indicator] WITH CHECK CHECK CONSTRAINT [FK_Indicator_Output];

ALTER TABLE [app].[Indicator] WITH CHECK CHECK CONSTRAINT [FK_Indicator_SubOutput];

ALTER TABLE [app].[IndicatorLocation] WITH CHECK CHECK CONSTRAINT [FK_IndicatorLocation_ActiveType];

ALTER TABLE [app].[IndicatorLocation] WITH CHECK CHECK CONSTRAINT [FK_IndicatorLocation_Indicator];

ALTER TABLE [app].[IndicatorLocation] WITH CHECK CHECK CONSTRAINT [FK_IndicatorLocation_Location];

ALTER TABLE [app].[IndicatorType] WITH CHECK CHECK CONSTRAINT [FK_IndicatorType_ActiveType];

ALTER TABLE [app].[OutcomePersonRole] WITH CHECK CHECK CONSTRAINT [FK_OutcomePersonRole_ActiveType];

ALTER TABLE [app].[OutcomePersonRole] WITH CHECK CHECK CONSTRAINT [FK_OutcomePersonRole_Outcome];

ALTER TABLE [app].[OutcomeOrganization] WITH CHECK CHECK CONSTRAINT [FK_OutcomeOrganization_ActiveType];

ALTER TABLE [app].[OutcomeOrganization] WITH CHECK CHECK CONSTRAINT [FK_OutcomeOrganization_Organization];

ALTER TABLE [app].[OutcomeOrganization] WITH CHECK CHECK CONSTRAINT [FK_OutcomeOrganization_Outcome];

ALTER TABLE [app].[OutputPersonRole] WITH CHECK CHECK CONSTRAINT [FK_OutputPersonRole_ActiveType];

ALTER TABLE [app].[OutputPersonRole] WITH CHECK CHECK CONSTRAINT [FK_OutputPersonRole_Output];

ALTER TABLE [app].[OutputOutputLink] WITH CHECK CHECK CONSTRAINT [FK_OutputOutputLink_ActiveType];

ALTER TABLE [app].[OutputOutputLink] WITH CHECK CHECK CONSTRAINT [FK_OutputOutputLink_Output];

ALTER TABLE [app].[OutputOutputLink] WITH CHECK CHECK CONSTRAINT [FK_OutputOutputLink_Output1];

ALTER TABLE [app].[MilestoneLocation] WITH CHECK CHECK CONSTRAINT [FK_MilestoneLocation_ActiveType];

ALTER TABLE [app].[MilestoneLocation] WITH CHECK CHECK CONSTRAINT [FK_MilestoneLocation_Location];

ALTER TABLE [app].[MilestoneLocation] WITH CHECK CHECK CONSTRAINT [FK_MilestoneLocation_Milestone];

ALTER TABLE [app].[Outcome] WITH CHECK CHECK CONSTRAINT [FK_Outcome_ActiveType];

ALTER TABLE [app].[Activity] WITH CHECK CHECK CONSTRAINT [FK_Activity_ActiveType];

ALTER TABLE [app].[Activity] WITH CHECK CHECK CONSTRAINT [FK_Activity_Project];

ALTER TABLE [Core].[Location] WITH CHECK CHECK CONSTRAINT [FK_Location_ActiveType];

ALTER TABLE [Core].[Location] WITH CHECK CHECK CONSTRAINT [FK_Location_LocationType];

ALTER TABLE [Core].[DimDate] WITH CHECK CHECK CONSTRAINT [FK_DimDate_ActiveType];

ALTER TABLE [Core].[Role] WITH CHECK CHECK CONSTRAINT [FK_Role_ActiveType];

ALTER TABLE [Core].[DataVersion] WITH CHECK CHECK CONSTRAINT [FK_DataVersion_ActiveType];

ALTER TABLE [Core].[DataVersion] WITH CHECK CHECK CONSTRAINT [FK_DataVersion_DataVersion];

ALTER TABLE [Core].[DataVersion] WITH CHECK CHECK CONSTRAINT [FK_DataVersion_DataVersionLevel];

ALTER TABLE [Core].[DataVersion] WITH CHECK CHECK CONSTRAINT [FK_DataVersion_Outcome];

ALTER TABLE [Core].[DataSource] WITH CHECK CHECK CONSTRAINT [FK_DataSource_ActiveType];

ALTER TABLE [Core].[OrganizationType] WITH CHECK CHECK CONSTRAINT [FK_OrganizationType_ActiveType];

ALTER TABLE [Core].[OrganizationPersonRole] WITH CHECK CHECK CONSTRAINT [FK_OrganizationPersonRole_ActiveType];

ALTER TABLE [Core].[OrganizationPersonRole] WITH CHECK CHECK CONSTRAINT [FK_OrganizationPersonRole_Organization];

ALTER TABLE [Core].[OrganizationPersonRole] WITH CHECK CHECK CONSTRAINT [FK_OrganizationPersonRole_Person];

ALTER TABLE [Core].[OrganizationPersonRole] WITH CHECK CHECK CONSTRAINT [FK_OrganizationPersonRole_Role];

ALTER TABLE [Core].[Organization] WITH CHECK CHECK CONSTRAINT [FK_Organization_ActiveType];

ALTER TABLE [Core].[Organization] WITH CHECK CHECK CONSTRAINT [FK_Organization_Organization];

ALTER TABLE [Core].[Organization] WITH CHECK CHECK CONSTRAINT [FK_Organization_OrganizationType];

ALTER TABLE [Core].[Person] WITH CHECK CHECK CONSTRAINT [FK_Person_ActiveType];

ALTER TABLE [Core].[LocationType] WITH CHECK CHECK CONSTRAINT [FK_LocationType_ActiveType];

ALTER TABLE [Core].[DataVersionLevel] WITH CHECK CHECK CONSTRAINT [FK_DataVersionLevel_ActiveType];

ALTER TABLE [Core].[ReportingPeriod] WITH CHECK CHECK CONSTRAINT [FK_ReportingPeriod_ActiveType];

ALTER TABLE [RBM].[MilestoneValues] WITH CHECK CHECK CONSTRAINT [FK_MilestoneValues_ActiveType];

ALTER TABLE [RBM].[MilestoneValues] WITH CHECK CHECK CONSTRAINT [FK_MilestoneValues_DataVersion];

ALTER TABLE [RBM].[MilestoneValues] WITH CHECK CHECK CONSTRAINT [FK_MilestoneValues_Location];

ALTER TABLE [RBM].[MilestoneValues] WITH CHECK CHECK CONSTRAINT [FK_MilestoneValues_Milestone];

ALTER TABLE [RBM].[MilestoneValues] WITH CHECK CHECK CONSTRAINT [FK_MilestoneValues_Organization];

ALTER TABLE [RBM].[MilestoneValues] WITH CHECK CHECK CONSTRAINT [FK_MilestoneValues_ReportingPeriod];

ALTER TABLE [RBM].[IndicatorValues] WITH CHECK CHECK CONSTRAINT [FK_IndicatorValues_ActiveType];

ALTER TABLE [RBM].[IndicatorValues] WITH CHECK CHECK CONSTRAINT [FK_IndicatorValues_DataVersion];

ALTER TABLE [RBM].[IndicatorValues] WITH CHECK CHECK CONSTRAINT [FK_IndicatorValues_Indicator1];

ALTER TABLE [RBM].[IndicatorValues] WITH CHECK CHECK CONSTRAINT [FK_IndicatorValues_Location];

ALTER TABLE [RBM].[IndicatorValues] WITH CHECK CHECK CONSTRAINT [FK_IndicatorValues_Organization];

ALTER TABLE [RBM].[IndicatorValues] WITH CHECK CHECK CONSTRAINT [FK_IndicatorValues_ReportingPeriod];

ALTER TABLE [app].[Status] WITH CHECK CHECK CONSTRAINT [CK_ENFORCE_SINGLE_PARENT_LINK_Status];

ALTER TABLE [app].[Milestone] WITH CHECK CHECK CONSTRAINT [CK_ENFORCE_SINGLE_PARENT_LINK_MIlestone];

ALTER TABLE [app].[Indicator] WITH CHECK CHECK CONSTRAINT [CK_ENFORCE_SINGLE_PARENT_LINK_Indicator];

ALTER TABLE [Core].[DimMunicipalityGEOM] WITH CHECK CHECK CONSTRAINT [enforce_srid_geometry_DimMunicipalityGEOM];


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
