/*
Deployment script for Meerkat

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

/* Create Meerkat Database */

USE [master]
GO
/****** Object:  Database [Meerkat]    Script Date: 2013-03-06 08:42:07 AM ******/
IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = N'Meerkat')
BEGIN
CREATE DATABASE [Meerkat]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'Meerkat', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\Meerkat_v1.0.mdf' , SIZE = 5120KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
 LOG ON 
( NAME = N'Meerkat_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\Meerkat_v1.0_log.ldf' , SIZE = 1024KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
END

GO
ALTER DATABASE [Meerkat] SET COMPATIBILITY_LEVEL = 110
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [Meerkat].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [Meerkat] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [Meerkat] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [Meerkat] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [Meerkat] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [Meerkat] SET ARITHABORT OFF 
GO
ALTER DATABASE [Meerkat] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [Meerkat] SET AUTO_CREATE_STATISTICS ON 
GO
ALTER DATABASE [Meerkat] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [Meerkat] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [Meerkat] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [Meerkat] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [Meerkat] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [Meerkat] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [Meerkat] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [Meerkat] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [Meerkat] SET  DISABLE_BROKER 
GO
ALTER DATABASE [Meerkat] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [Meerkat] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [Meerkat] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [Meerkat] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [Meerkat] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [Meerkat] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [Meerkat] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [Meerkat] SET RECOVERY FULL 
GO
ALTER DATABASE [Meerkat] SET  MULTI_USER 
GO
ALTER DATABASE [Meerkat] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [Meerkat] SET DB_CHAINING OFF 
GO
ALTER DATABASE [Meerkat] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [Meerkat] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
EXEC sys.sp_db_vardecimal_storage_format N'Meerkat', N'ON'
GO
ALTER DATABASE [Meerkat] SET  READ_WRITE 
GO

/* End Create Meerkat Database */


GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Meerkat"
:setvar DefaultFilePrefix "Meerkat"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Latin1_General_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [app]...';


GO
CREATE SCHEMA [app]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Core]...';


GO
CREATE SCHEMA [Core]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [disagg]...';


GO
CREATE SCHEMA [disagg]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [forms]...';


GO
CREATE SCHEMA [forms]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [mm]...';


GO
CREATE SCHEMA [mm]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [POA]...';


GO
CREATE SCHEMA [POA]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [RBM]...';


GO
CREATE SCHEMA [RBM]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [rpt]...';


GO
CREATE SCHEMA [rpt]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [app].[SubOutputSubOutputLink]...';


GO
CREATE TABLE [app].[SubOutputSubOutputLink] (
    [SubOutputSubOutputLink_ID] INT           IDENTITY (1, 1) NOT NULL,
    [PrimarySubOutput_ID]       INT           NOT NULL,
    [SecondarySubOutput_ID]     INT           NOT NULL,
    [Active]                    INT           NOT NULL,
    [sys_CreatedBy]             VARCHAR (255) NOT NULL,
    [sys_CreatedOn]             DATETIME      NOT NULL,
    [sys_ModifiedBy]            VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]            DATETIME      NOT NULL,
    CONSTRAINT [PK_SubOutputSubOutputLink] PRIMARY KEY CLUSTERED ([SubOutputSubOutputLink_ID] ASC)
);


GO
PRINT N'Creating [app].[SubOutputPersonRole]...';


GO
CREATE TABLE [app].[SubOutputPersonRole] (
    [SubOutputPersonRole_ID] INT           IDENTITY (1, 1) NOT NULL,
    [SubOutput_ID]           INT           NULL,
    [Person_ID]              INT           NULL,
    [Role_ID]                INT           NULL,
    [Active]                 INT           NOT NULL,
    [sys_CreatedBy]          VARCHAR (255) NOT NULL,
    [sys_CreatedOn]          DATETIME      NOT NULL,
    [sys_ModifiedBy]         VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]         DATETIME      NOT NULL,
    CONSTRAINT [PK_SubOutputPersonRole] PRIMARY KEY CLUSTERED ([SubOutputPersonRole_ID] ASC)
);


GO
PRINT N'Creating [app].[SubOutput]...';


GO
CREATE TABLE [app].[SubOutput] (
    [SubOutput_ID]    INT           IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (50)  NOT NULL,
    [ShortName]       VARCHAR (50)  NOT NULL,
    [BusinessKey]     VARCHAR (MAX) NULL,
    [Output_ID]       INT           NOT NULL,
    [LongName]        VARCHAR (500) NOT NULL,
    [TextDescription] VARCHAR (MAX) NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_SubOutput] PRIMARY KEY CLUSTERED ([SubOutput_ID] ASC),
    CONSTRAINT [UQ_SubOutput_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [app].[Indicator]...';


GO
CREATE TABLE [app].[Indicator] (
    [IndicatorID]      INT             IDENTITY (1, 1) NOT NULL,
    [LongName]         VARCHAR (500)   NOT NULL,
    [TextDescription]  VARCHAR (MAX)   NULL,
    [Baseline]         DECIMAL (20, 5) NULL,
    [BaselineString]   VARCHAR (MAX)   NULL,
    [BaselineDate]     DATETIME        NOT NULL,
    [Target]           DECIMAL (20, 5) NULL,
    [TargetString]     VARCHAR (MAX)   NULL,
    [TargetDate]       DATETIME        NOT NULL,
    [ReleaseDate]      DATE            NULL,
    [ReportingDate]    DATE            NULL,
    [Output_ID]        INT             NULL,
    [Outcome_ID]       INT             NULL,
    [BusinessKey]      NVARCHAR (MAX)  NULL,
    [Notes]            NVARCHAR (MAX)  NULL,
    [Code]             VARCHAR (50)    NOT NULL,
    [IndicatorType_ID] INT             NOT NULL,
    [SubOutput_ID]     INT             NULL,
    [ShortName]        VARCHAR (50)    NOT NULL,
    [BaselineDate_ID]  AS              (CONVERT (INT, CONVERT (VARCHAR (8), [BaselineDate], (112)))),
    [TargetDate_ID]    AS              (CONVERT (INT, CONVERT (VARCHAR (8), [TargetDate], (112)))),
    [UnitOfMeasure]    VARCHAR (50)    NOT NULL,
    [Active]           INT             NOT NULL,
    [sys_CreatedBy]    VARCHAR (255)   NOT NULL,
    [sys_CreatedOn]    DATETIME        NOT NULL,
    [sys_ModifiedBy]   VARCHAR (255)   NOT NULL,
    [sys_ModifiedOn]   DATETIME        NOT NULL,
    [Programme_ID]     INT             NULL,
    [Sector_ID]        INT             NULL,
    [SubSector_ID]     INT             NULL,
    [ProjectID]        INT             NULL,
    CONSTRAINT [PK_Indicator] PRIMARY KEY CLUSTERED ([IndicatorID] ASC),
    CONSTRAINT [UQ_Indicator_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [app].[IndicatorLocation]...';


GO
CREATE TABLE [app].[IndicatorLocation] (
    [IndicatorLocation_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Location_ID]          INT           NULL,
    [Indicator_ID]         INT           NULL,
    [Active]               INT           NOT NULL,
    [sys_CreatedBy]        VARCHAR (255) NOT NULL,
    [sys_CreatedOn]        DATETIME      NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]       DATETIME      NOT NULL,
    CONSTRAINT [PK_IndicatorLocation] PRIMARY KEY CLUSTERED ([IndicatorLocation_ID] ASC)
);


GO
PRINT N'Creating [app].[IndicatorType]...';


GO
CREATE TABLE [app].[IndicatorType] (
    [IndicatorType_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]             VARCHAR (50)  NOT NULL,
    [Name]             VARCHAR (255) NULL,
    [Active]           INT           NOT NULL,
    [sys_CreatedBy]    VARCHAR (255) NOT NULL,
    [sys_CreatedOn]    DATETIME      NOT NULL,
    [sys_ModifiedBy]   VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]   DATETIME      NOT NULL,
    CONSTRAINT [PK_IndicatorType] PRIMARY KEY CLUSTERED ([IndicatorType_ID] ASC),
    CONSTRAINT [FK_IndicatorType_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [app].[OutcomePersonRole]...';


GO
CREATE TABLE [app].[OutcomePersonRole] (
    [OutcomePersonRole_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Outcome_ID]           INT           NULL,
    [Person_ID]            INT           NULL,
    [Role_ID]              INT           NULL,
    [Active]               INT           NOT NULL,
    [sys_CreatedBy]        VARCHAR (255) NOT NULL,
    [sys_CreatedOn]        DATETIME      NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]       DATETIME      NOT NULL,
    CONSTRAINT [PK_OutcomePersonRole] PRIMARY KEY CLUSTERED ([OutcomePersonRole_ID] ASC)
);


GO
PRINT N'Creating [app].[OutcomeOrganization]...';


GO
CREATE TABLE [app].[OutcomeOrganization] (
    [OutcomeOrganization_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Organization_ID]        INT           NULL,
    [Outcome_ID]             INT           NULL,
    [Active]                 INT           NOT NULL,
    [sys_CreatedBy]          VARCHAR (255) NOT NULL,
    [sys_CreatedOn]          DATETIME      NOT NULL,
    [sys_ModifiedBy]         VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]         DATETIME      NOT NULL,
    CONSTRAINT [PK_OutcomeOrganization] PRIMARY KEY CLUSTERED ([OutcomeOrganization_ID] ASC)
);


GO
PRINT N'Creating [app].[Output]...';


GO
CREATE TABLE [app].[Output] (
    [Output_ID]       INT            IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (50)   NOT NULL,
    [LongName]        NVARCHAR (500) NOT NULL,
    [BusinessKey]     NVARCHAR (MAX) NULL,
    [Outcome_ID]      INT            NOT NULL,
    [ShortName]       VARCHAR (50)   NOT NULL,
    [TextDescription] VARCHAR (MAX)  NULL,
    [Active]          INT            NOT NULL,
    [sys_CreatedBy]   VARCHAR (255)  NOT NULL,
    [sys_CreatedOn]   DATETIME       NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255)  NOT NULL,
    [sys_ModifiedOn]  DATETIME       NOT NULL,
    CONSTRAINT [PK_Output_] PRIMARY KEY CLUSTERED ([Output_ID] ASC),
    CONSTRAINT [UQ_Output_Code] UNIQUE NONCLUSTERED ([Code] ASC),
    CONSTRAINT [UQ_Output_ShortName] UNIQUE NONCLUSTERED ([ShortName] ASC)
);


GO
PRINT N'Creating [app].[Milestone]...';


GO
CREATE TABLE [app].[Milestone] (
    [MilestoneID]     INT             IDENTITY (1, 1) NOT NULL,
    [LongName]        VARCHAR (500)   NOT NULL,
    [TextDescription] VARCHAR (MAX)   NULL,
    [Baseline]        DECIMAL (20, 5) NULL,
    [BaselineString]  VARCHAR (MAX)   NULL,
    [BaselineDate]    DATETIME        NOT NULL,
    [Target]          DECIMAL (20, 5) NULL,
    [TargetString]    VARCHAR (MAX)   NULL,
    [TargetDate]      DATETIME        NOT NULL,
    [ReleaseDate]     DATE            NULL,
    [ReportingDate]   DATE            NULL,
    [ProjectID]       INT             NULL,
    [BusinessKey]     NVARCHAR (MAX)  NULL,
    [Notes]           NVARCHAR (MAX)  NULL,
    [Code]            VARCHAR (50)    NOT NULL,
    [MilestoneTypeID] INT             NOT NULL,
    [Activity_ID]     INT             NULL,
    [ShortName]       VARCHAR (50)    NOT NULL,
    [BaselineDateID]  AS              (CONVERT (INT, CONVERT (VARCHAR (8), [BaselineDate], (112)))),
    [TargetDateID]    AS              (CONVERT (INT, CONVERT (VARCHAR (8), [TargetDate], (112)))),
    [UnitOfMeasure]   VARCHAR (50)    NOT NULL,
    [Active]          INT             NOT NULL,
    [sys_CreatedBy]   VARCHAR (255)   NOT NULL,
    [sys_CreatedOn]   DATETIME        NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255)   NOT NULL,
    [sys_ModifiedOn]  DATETIME        NOT NULL,
    CONSTRAINT [PK_Milestone] PRIMARY KEY CLUSTERED ([MilestoneID] ASC),
    CONSTRAINT [UQ_Milestone_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [app].[MilestoneType]...';


GO
CREATE TABLE [app].[MilestoneType] (
    [MilestoneTypeID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (50)  NOT NULL,
    [Name]            VARCHAR (255) NOT NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_MilestoneType] PRIMARY KEY CLUSTERED ([MilestoneTypeID] ASC),
    CONSTRAINT [UQ_MilestoneType_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [app].[Activity]...';


GO
CREATE TABLE [app].[Activity] (
    [Activity_ID]     INT           IDENTITY (1, 1) NOT NULL,
    [ShortName]       VARCHAR (50)  NOT NULL,
    [LongName]        VARCHAR (500) NOT NULL,
    [TextDescription] VARCHAR (MAX) NOT NULL,
    [ProjectID]       INT           NOT NULL,
    [Active]          INT           NOT NULL,
    [Code]            VARCHAR (50)  NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_Activity] PRIMARY KEY CLUSTERED ([Activity_ID] ASC),
    CONSTRAINT [UQ_Activity_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [app].[OutputPersonRole]...';


GO
CREATE TABLE [app].[OutputPersonRole] (
    [OutputPersonRole_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Output_ID]           INT           NULL,
    [Person_ID]           INT           NULL,
    [Role_ID]             INT           NULL,
    [Active]              INT           NOT NULL,
    [sys_CreatedBy]       VARCHAR (255) NOT NULL,
    [sys_CreatedOn]       DATETIME      NOT NULL,
    [sys_ModifiedBy]      VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]      DATETIME      NOT NULL,
    CONSTRAINT [PK_OutputPersonRole] PRIMARY KEY CLUSTERED ([OutputPersonRole_ID] ASC)
);


GO
PRINT N'Creating [app].[OutputOutputLink]...';


GO
CREATE TABLE [app].[OutputOutputLink] (
    [OutputOutputLink_ID] INT           IDENTITY (1, 1) NOT NULL,
    [PrimaryOutput_ID]    INT           NOT NULL,
    [SecondaryOutput_ID]  INT           NOT NULL,
    [Active]              INT           NOT NULL,
    [sys_CreatedBy]       VARCHAR (255) NOT NULL,
    [sys_CreatedOn]       DATETIME      NOT NULL,
    [sys_ModifiedBy]      VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]      DATETIME      NOT NULL,
    CONSTRAINT [PK_OutputOutputLink] PRIMARY KEY CLUSTERED ([OutputOutputLink_ID] ASC)
);


GO
PRINT N'Creating [app].[MilestoneLocation]...';


GO
CREATE TABLE [app].[MilestoneLocation] (
    [MilestoneLocation_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Location_ID]          INT           NOT NULL,
    [MilestoneID]          INT           NOT NULL,
    [Active]               INT           NOT NULL,
    [sys_CreatedBy]        VARCHAR (255) NOT NULL,
    [sys_CreatedOn]        DATETIME      NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]       DATETIME      NOT NULL,
    CONSTRAINT [PK_MilestoneLocation] PRIMARY KEY CLUSTERED ([MilestoneLocation_ID] ASC)
);


GO
PRINT N'Creating [app].[Outcome]...';


GO
CREATE TABLE [app].[Outcome] (
    [Outcome_ID]      INT            IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (50)   NOT NULL,
    [LongName]        NVARCHAR (500) NOT NULL,
    [BusinessKey]     NVARCHAR (MAX) NOT NULL,
    [ShortName]       NVARCHAR (50)  NOT NULL,
    [TextDescription] NVARCHAR (MAX) NULL,
    [OutcomeSiteName] NVARCHAR (50)  NULL,
    [DataVersion]     INT            NOT NULL,
    [Active]          INT            NOT NULL,
    [sys_CreatedBy]   VARCHAR (255)  NOT NULL,
    [sys_CreatedOn]   DATETIME       NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255)  NOT NULL,
    [sys_ModifiedOn]  DATETIME       NOT NULL,
    CONSTRAINT [PK_Outcome] PRIMARY KEY CLUSTERED ([Outcome_ID] ASC),
    CONSTRAINT [UQ_OutCome_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [app].[Programme]...';


GO
CREATE TABLE [app].[Programme] (
    [Programme_ID]      INT           IDENTITY (1, 1) NOT NULL,
    [Code]              VARCHAR (50)  NULL,
    [LongName]          VARCHAR (500) NULL,
    [BusinessKey]       VARCHAR (255) NULL,
    [ShortName]         VARCHAR (50)  NULL,
    [TextDescription]   VARCHAR (MAX) NULL,
    [ProgrammeSiteName] VARCHAR (50)  NULL,
    [Active]            INT           NOT NULL,
    [sys_CreatedBy]     VARCHAR (255) NOT NULL,
    [sys_CreatedOn]     DATETIME      NOT NULL,
    [sys_ModifiedBy]    VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]    DATETIME      NOT NULL,
    CONSTRAINT [PK_Programme_1] PRIMARY KEY CLUSTERED ([Programme_ID] ASC)
);


GO
PRINT N'Creating [app].[Sector]...';


GO
CREATE TABLE [app].[Sector] (
    [Sector_ID]       INT           IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (50)  NULL,
    [LongName]        VARCHAR (500) NULL,
    [BusinessKey]     VARCHAR (255) NULL,
    [Programme_ID]    INT           NOT NULL,
    [ShortName]       VARCHAR (50)  NOT NULL,
    [TextDescription] VARCHAR (MAX) NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_Sector_] PRIMARY KEY CLUSTERED ([Sector_ID] ASC),
    UNIQUE NONCLUSTERED ([ShortName] ASC)
);


GO
PRINT N'Creating [app].[SubSector]...';


GO
CREATE TABLE [app].[SubSector] (
    [SubSector_ID]    INT           IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (50)  NULL,
    [ShortName]       VARCHAR (50)  NOT NULL,
    [BusinessKey]     VARCHAR (255) NULL,
    [Sector_ID]       INT           NOT NULL,
    [LongName]        VARCHAR (500) NOT NULL,
    [TextDescription] VARCHAR (MAX) NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_SubSector] PRIMARY KEY CLUSTERED ([SubSector_ID] ASC)
);


GO
PRINT N'Creating [app].[Project]...';


GO
CREATE TABLE [app].[Project] (
    [ProjectID]       INT            IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (50)   NOT NULL,
    [ShortName]       NVARCHAR (255) NOT NULL,
    [LongName]        VARCHAR (255)  NOT NULL,
    [TextDescription] VARCHAR (MAX)  NOT NULL,
    [ProjectParentID] INT            NULL,
    [Outcome_ID]      INT            NULL,
    [Programme_ID]    INT            NULL,
    [Sector_ID]       INT            NULL,
    [SubSector_ID]    INT            NULL,
    [ProjectSiteName] VARCHAR (255)  NOT NULL,
    [Active]          INT            NOT NULL,
    [sys_CreatedBy]   VARCHAR (255)  NOT NULL,
    [sys_CreatedOn]   DATETIME       NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255)  NOT NULL,
    [sys_ModifiedOn]  DATETIME       NOT NULL,
    CONSTRAINT [PK_Project] PRIMARY KEY CLUSTERED ([ProjectID] ASC),
    CONSTRAINT [UW_Project_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [Core].[DataSource]...';


GO
CREATE TABLE [Core].[DataSource] (
    [DataSource_ID]    INT           IDENTITY (1, 1) NOT NULL,
    [Name]             VARCHAR (255) NOT NULL,
    [ContactDetails]   VARCHAR (MAX) NULL,
    [Custodian]        VARCHAR (MAX) NULL,
    [Format]           VARCHAR (MAX) NULL,
    [CollectionMethod] VARCHAR (MAX) NULL,
    [MetadataStatus]   VARCHAR (MAX) NULL,
    [BusinessKey]      VARCHAR (MAX) NULL,
    [Active]           INT           NOT NULL,
    [sys_CreatedBy]    VARCHAR (255) NOT NULL,
    [sys_CreatedOn]    DATETIME      NOT NULL,
    [sys_ModifiedBy]   VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]   DATETIME      NOT NULL,
    CONSTRAINT [PK_DataSource] PRIMARY KEY CLUSTERED ([DataSource_ID] ASC)
);


GO
PRINT N'Creating [Core].[Location]...';


GO
CREATE TABLE [Core].[Location] (
    [Location_ID]       INT               IDENTITY (1, 1) NOT NULL,
    [Code]              VARCHAR (50)      NOT NULL,
    [Name]              VARCHAR (255)     NOT NULL,
    [AreaKM]            DECIMAL (18, 2)   NULL,
    [Population]        DECIMAL (18, 2)   NULL,
    [Density]           VARCHAR (MAX)     NULL,
    [BusinessKey]       NVARCHAR (MAX)    NULL,
    [LocationType_ID]   INT               NULL,
    [ParentLocation_ID] INT               NULL,
    [Geog]              [sys].[geography] NULL,
    [Active]            INT               NOT NULL,
    [sys_CreatedBy]     VARCHAR (255)     NOT NULL,
    [sys_CreatedOn]     DATETIME          NOT NULL,
    [sys_ModifiedBy]    VARCHAR (255)     NOT NULL,
    [sys_ModifiedOn]    DATETIME          NOT NULL,
    CONSTRAINT [PK_Location] PRIMARY KEY CLUSTERED ([Location_ID] ASC),
    CONSTRAINT [UQ_Location_Code] UNIQUE NONCLUSTERED ([Code] ASC),
    CONSTRAINT [UQ_Location_Name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [Core].[DimDate]...';


GO
CREATE TABLE [Core].[DimDate] (
    [DateSK]          INT           IDENTITY (1, 1) NOT NULL,
    [DateID]          INT           NOT NULL,
    [Date]            DATETIME      NOT NULL,
    [Day]             INT           NOT NULL,
    [DaySuffix]       CHAR (3)      NOT NULL,
    [USDayOfWeek]     VARCHAR (9)   NOT NULL,
    [DayOfWeek]       VARCHAR (9)   NOT NULL,
    [DOWInMonth]      INT           NOT NULL,
    [DayOfYear]       INT           NOT NULL,
    [WeekOfYear]      INT           NOT NULL,
    [WeekOfMonth]     INT           NOT NULL,
    [MonthNumber]     INT           NOT NULL,
    [MonthName]       VARCHAR (9)   NOT NULL,
    [Quarter]         INT           NOT NULL,
    [QuarterName]     VARCHAR (255) NOT NULL,
    [YearName]        CHAR (4)      NOT NULL,
    [YearNumber]      INT           NOT NULL,
    [StandardDate]    VARCHAR (10)  NULL,
    [IsPublicHoliday] BIT           NULL,
    [HolidayText]     VARCHAR (50)  NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_DimDate] PRIMARY KEY CLUSTERED ([DateID] ASC) WITH (FILLFACTOR = 90)
);


GO
PRINT N'Creating [Core].[ActiveType]...';


GO
CREATE TABLE [Core].[ActiveType] (
    [ID]             INT           NOT NULL,
    [Code]           VARCHAR (50)  NOT NULL,
    [Name]           VARCHAR (255) NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_ActiveType] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQ_ActiveType_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [Core].[Role]...';


GO
CREATE TABLE [Core].[Role] (
    [RoleID]         INT           IDENTITY (1, 1) NOT NULL,
    [Code]           VARCHAR (50)  NOT NULL,
    [Name]           VARCHAR (255) NOT NULL,
    [Description]    VARCHAR (MAX) NULL,
    [Active]         INT           NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_Role] PRIMARY KEY CLUSTERED ([RoleID] ASC),
    CONSTRAINT [UQ_Role_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [Core].[DataVersion]...';


GO
CREATE TABLE [Core].[DataVersion] (
    [DataVersion_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]           VARCHAR (50)  NOT NULL,
    [Name]           VARCHAR (255) NOT NULL,
    [Description]    VARCHAR (MAX) NOT NULL,
    [Order]          INT           NOT NULL,
    [Active]         INT           NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_Version] PRIMARY KEY CLUSTERED ([DataVersion_ID] ASC),
    CONSTRAINT [UQ_DataVersion_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [Core].[DimMunicipalityGEOM]...';


GO
CREATE TABLE [Core].[DimMunicipalityGEOM] (
    [PK_ID]          INT               IDENTITY (1, 1) NOT NULL,
    [ID]             BIGINT            NULL,
    [LBL]            NVARCHAR (255)    NULL,
    [FIP]            NVARCHAR (255)    NULL,
    [MMT_ID]         NVARCHAR (255)    NULL,
    [SHORT__FRM]     NVARCHAR (255)    NULL,
    [LONG_FRM]       NVARCHAR (255)    NULL,
    [ADM0]           NVARCHAR (255)    NULL,
    [ADM1]           NVARCHAR (255)    NULL,
    [ADM2]           NVARCHAR (255)    NULL,
    [ADM3]           NVARCHAR (255)    NULL,
    [ADM4]           NVARCHAR (255)    NULL,
    [ADM5]           NVARCHAR (255)    NULL,
    [geom]           [sys].[geography] NULL,
    [Active]         INT               NOT NULL,
    [sys_CreatedBy]  VARCHAR (255)     NOT NULL,
    [sys_CreatedOn]  DATETIME          NOT NULL,
    [sys_ModifiedBy] VARCHAR (255)     NOT NULL,
    [sys_ModifiedOn] DATETIME          NOT NULL,
    CONSTRAINT [PK_DimMuicipalityGEOM] PRIMARY KEY CLUSTERED ([PK_ID] ASC)
);


GO
PRINT N'Creating [Core].[ReportingPeriod]...';


GO
CREATE TABLE [Core].[ReportingPeriod] (
    [ID]              INT           IDENTITY (1, 1) NOT NULL,
    [ReportingPeriod] INT           NOT NULL,
    [StartDateID]     INT           NOT NULL,
    [EndDateID]       INT           NOT NULL,
    [FirstCycleDate]  DATETIME      NOT NULL,
    [LastCycleDate]   DATETIME      NOT NULL,
    [YearName]        CHAR (4)      NOT NULL,
    [YearNumber]      INT           NOT NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    [Summary]         VARCHAR (50)  NOT NULL,
    CONSTRAINT [PK_ReportingPeriod] PRIMARY KEY CLUSTERED ([ID] ASC),
    UNIQUE NONCLUSTERED ([EndDateID] ASC),
    UNIQUE NONCLUSTERED ([StartDateID] ASC)
);


GO
PRINT N'Creating [Core].[OrganizationType]...';


GO
CREATE TABLE [Core].[OrganizationType] (
    [OrganizationType_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Description]         VARCHAR (MAX) NULL,
    [Active]              INT           NOT NULL,
    [sys_CreatedBy]       VARCHAR (255) NOT NULL,
    [sys_CreatedOn]       DATETIME      NOT NULL,
    [sys_ModifiedBy]      VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]      DATETIME      NOT NULL,
    CONSTRAINT [PK_OrganizationType] PRIMARY KEY CLUSTERED ([OrganizationType_ID] ASC)
);


GO
PRINT N'Creating [Core].[OrganizationPersonRole]...';


GO
CREATE TABLE [Core].[OrganizationPersonRole] (
    [OrganizationPersonRole_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Person_ID]                 INT           NULL,
    [Role_ID]                   INT           NULL,
    [Organization_ID]           INT           NULL,
    [StartDate]                 DATETIME2 (7) NULL,
    [EndDate]                   DATETIME2 (7) NULL,
    [Active]                    INT           NOT NULL,
    [sys_CreatedBy]             VARCHAR (255) NOT NULL,
    [sys_CreatedOn]             DATETIME      NOT NULL,
    [sys_ModifiedBy]            VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]            DATETIME      NOT NULL,
    CONSTRAINT [PK_OrganizationPersonRole] PRIMARY KEY CLUSTERED ([OrganizationPersonRole_ID] ASC)
);


GO
PRINT N'Creating [Core].[Organization]...';


GO
CREATE TABLE [Core].[Organization] (
    [Organization_ID]       INT           IDENTITY (1, 1) NOT NULL,
    [Name]                  NVARCHAR (50) NOT NULL,
    [Code]                  VARCHAR (50)  NULL,
    [BusinessKey]           VARCHAR (MAX) NULL,
    [OrganizationType_ID]   INT           NULL,
    [ParentOrganization_ID] INT           NULL,
    [Active]                INT           NOT NULL,
    [sys_CreatedBy]         VARCHAR (255) NOT NULL,
    [sys_CreatedOn]         DATETIME      NOT NULL,
    [sys_ModifiedBy]        VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]        DATETIME      NOT NULL,
    CONSTRAINT [PK_Organization] PRIMARY KEY CLUSTERED ([Organization_ID] ASC),
    CONSTRAINT [UQ_Organization_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [Core].[Person]...';


GO
CREATE TABLE [Core].[Person] (
    [Person_ID]      INT           IDENTITY (1, 1) NOT NULL,
    [Title]          VARCHAR (MAX) NULL,
    [Name]           VARCHAR (255) NOT NULL,
    [ContactDetails] VARCHAR (MAX) NULL,
    [Category]       VARCHAR (MAX) NULL,
    [BusinessKey]    VARCHAR (MAX) NULL,
    [UserDetails]    VARCHAR (50)  NULL,
    [Active]         INT           NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_Person] PRIMARY KEY CLUSTERED ([Person_ID] ASC)
);


GO
PRINT N'Creating [Core].[LocationType]...';


GO
CREATE TABLE [Core].[LocationType] (
    [LocationType_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (50)  NOT NULL,
    [Name]            VARCHAR (255) NOT NULL,
    [Description]     VARCHAR (MAX) NOT NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_LocationType] PRIMARY KEY CLUSTERED ([LocationType_ID] ASC),
    CONSTRAINT [FK_LocationType_Code] UNIQUE NONCLUSTERED ([Code] ASC),
    CONSTRAINT [FK_LocationType_Name] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [Core].[StatusType]...';


GO
CREATE TABLE [Core].[StatusType] (
    [ID]             INT             NOT NULL,
    [Code]           VARCHAR (50)    NOT NULL,
    [Name]           VARCHAR (255)   NOT NULL,
    [Value]          DECIMAL (20, 2) NOT NULL,
    [sys_CreatedBy]  VARCHAR (255)   NOT NULL,
    [sys_CreatedOn]  DATETIME        NOT NULL,
    [sys_ModifiedBy] VARCHAR (255)   NOT NULL,
    [sys_ModifiedOn] DATETIME        NOT NULL,
    [Active]         INT             NOT NULL,
    CONSTRAINT [PK_StatusType] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQ_StatusType_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [disagg].[Framework_Indicator]...';


GO
CREATE TABLE [disagg].[Framework_Indicator] (
    [Framework_Indicator_ID] INT           IDENTITY (1, 1) NOT NULL,
    [FrameworkID]            INT           NULL,
    [IndicatorID]            INT           NULL,
    [Active]                 INT           NOT NULL,
    [sys_CreatedBy]          VARCHAR (255) NOT NULL,
    [sys_CreatedOn]          DATETIME      NOT NULL,
    [sys_ModifiedBy]         VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]         DATETIME      NOT NULL,
    CONSTRAINT [PK_IndicatorFramework] PRIMARY KEY CLUSTERED ([Framework_Indicator_ID] ASC)
);


GO
PRINT N'Creating [disagg].[StrategicElement]...';


GO
CREATE TABLE [disagg].[StrategicElement] (
    [StrategicElement_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]                VARCHAR (50)  NOT NULL,
    [Name]                VARCHAR (255) NOT NULL,
    [BusinessKey]         VARCHAR (255) NULL,
    [Active]              INT           NOT NULL,
    [sys_CreatedBy]       VARCHAR (255) NOT NULL,
    [sys_CreatedOn]       DATETIME      NOT NULL,
    [sys_ModifiedBy]      VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]      DATETIME      NOT NULL,
    CONSTRAINT [PK_StrategicElement] PRIMARY KEY CLUSTERED ([StrategicElement_ID] ASC)
);


GO
PRINT N'Creating [disagg].[ResultArea]...';


GO
CREATE TABLE [disagg].[ResultArea] (
    [ResultArea_ID]  INT           IDENTITY (1, 1) NOT NULL,
    [Code]           VARCHAR (50)  NOT NULL,
    [Name]           VARCHAR (255) NOT NULL,
    [BusinessKey]    VARCHAR (255) NULL,
    [Active]         INT           NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_ResultArea] PRIMARY KEY CLUSTERED ([ResultArea_ID] ASC)
);


GO
PRINT N'Creating [disagg].[Project_ResultArea]...';


GO
CREATE TABLE [disagg].[Project_ResultArea] (
    [Project_ResultArea_ID] INT           IDENTITY (1, 1) NOT NULL,
    [ResultAreaID]          INT           NULL,
    [ProjectID]             INT           NULL,
    [Active]                INT           NOT NULL,
    [sys_CreatedBy]         VARCHAR (255) NOT NULL,
    [sys_CreatedOn]         DATETIME      NOT NULL,
    [sys_ModifiedBy]        VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]        DATETIME      NOT NULL,
    CONSTRAINT [PK_ProjectResultArea] PRIMARY KEY CLUSTERED ([Project_ResultArea_ID] ASC)
);


GO
PRINT N'Creating [disagg].[Institution]...';


GO
CREATE TABLE [disagg].[Institution] (
    [Institution_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]           VARCHAR (50)  NOT NULL,
    [Name]           VARCHAR (255) NOT NULL,
    [BusinessKey]    VARCHAR (255) NULL,
    [Active]         INT           NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_Institution] PRIMARY KEY CLUSTERED ([Institution_ID] ASC)
);


GO
PRINT N'Creating [disagg].[Group]...';


GO
CREATE TABLE [disagg].[Group] (
    [Group_ID]       INT           IDENTITY (1, 1) NOT NULL,
    [Code]           VARCHAR (50)  NOT NULL,
    [Name]           VARCHAR (255) NOT NULL,
    [BusinessKey]    VARCHAR (255) NULL,
    [Active]         INT           NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_Group] PRIMARY KEY CLUSTERED ([Group_ID] ASC)
);


GO
PRINT N'Creating [disagg].[Donor]...';


GO
CREATE TABLE [disagg].[Donor] (
    [Donor_ID]       INT           IDENTITY (1, 1) NOT NULL,
    [Code]           VARCHAR (50)  NOT NULL,
    [Name]           VARCHAR (255) NOT NULL,
    [BusinessKey]    VARCHAR (255) NULL,
    [Active]         INT           NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_Donor] PRIMARY KEY CLUSTERED ([Donor_ID] ASC)
);


GO
PRINT N'Creating [disagg].[CommunityType]...';


GO
CREATE TABLE [disagg].[CommunityType] (
    [CommunityType_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]             VARCHAR (50)  NOT NULL,
    [Name]             VARCHAR (255) NOT NULL,
    [BusinessKey]      VARCHAR (255) NULL,
    [Active]           INT           NOT NULL,
    [sys_CreatedBy]    VARCHAR (255) NOT NULL,
    [sys_CreatedOn]    DATETIME      NOT NULL,
    [sys_ModifiedBy]   VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]   DATETIME      NOT NULL,
    CONSTRAINT [PK_CommunityType] PRIMARY KEY CLUSTERED ([CommunityType_ID] ASC)
);


GO
PRINT N'Creating [disagg].[Age]...';


GO
CREATE TABLE [disagg].[Age] (
    [Age_ID]         INT           IDENTITY (1, 1) NOT NULL,
    [Active]         INT           NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_Age] PRIMARY KEY CLUSTERED ([Age_ID] ASC)
);


GO
PRINT N'Creating [disagg].[AgeBand]...';


GO
CREATE TABLE [disagg].[AgeBand] (
    [AgeBand_ID]      INT           IDENTITY (1, 1) NOT NULL,
    [AgeBandMin_ID]   INT           NOT NULL,
    [AgeBandMax_ID]   INT           NOT NULL,
    [TextDescription] VARCHAR (MAX) NULL,
    [Name]            VARCHAR (255) NULL,
    [Code]            VARCHAR (50)  NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    [ProjectID]       INT           NOT NULL,
    CONSTRAINT [PK_AgeBand_] PRIMARY KEY CLUSTERED ([AgeBand_ID] ASC)
);


GO
PRINT N'Creating [disagg].[Framework]...';


GO
CREATE TABLE [disagg].[Framework] (
    [Framework_ID]         INT           IDENTITY (1, 1) NOT NULL,
    [Code]                 VARCHAR (50)  NOT NULL,
    [Name]                 VARCHAR (255) NOT NULL,
    [BusinessKey]          VARCHAR (255) NULL,
    [Active]               INT           NOT NULL,
    [SourceOrganizationID] INT           NULL,
    [sys_CreatedBy]        VARCHAR (255) NOT NULL,
    [sys_CreatedOn]        DATETIME      NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]       DATETIME      NOT NULL,
    CONSTRAINT [PK_Framework] PRIMARY KEY CLUSTERED ([Framework_ID] ASC)
);


GO
PRINT N'Creating [disagg].[Framework_Project]...';


GO
CREATE TABLE [disagg].[Framework_Project] (
    [Framework_Project_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Framework_ID]         INT           NULL,
    [ProjectID]            INT           NULL,
    [Active]               INT           NOT NULL,
    [sys_CreatedBy]        VARCHAR (255) NOT NULL,
    [sys_CreatedOn]        DATETIME      NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]       DATETIME      NOT NULL,
    CONSTRAINT [PK_ProjectFramework] PRIMARY KEY CLUSTERED ([Framework_Project_ID] ASC)
);


GO
PRINT N'Creating [disagg].[Gender]...';


GO
CREATE TABLE [disagg].[Gender] (
    [Gender_ID]      INT           IDENTITY (1, 1) NOT NULL,
    [Code]           VARCHAR (50)  NOT NULL,
    [Name]           VARCHAR (255) NOT NULL,
    [Active]         INT           NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_Gender] PRIMARY KEY CLUSTERED ([Gender_ID] ASC)
);


GO
PRINT N'Creating [forms].[RollupType]...';


GO
CREATE TABLE [forms].[RollupType] (
    [RollupType_ID]   INT           IDENTITY (1, 1) NOT NULL,
    [Name]            VARCHAR (50)  NOT NULL,
    [Code]            VARCHAR (50)  NOT NULL,
    [TextDescription] VARCHAR (MAX) NOT NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_RollupType_3] PRIMARY KEY CLUSTERED ([RollupType_ID] ASC),
    CONSTRAINT [UQ__RollupType_Code] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [forms].[Question_Indicator_Rollup]...';


GO
CREATE TABLE [forms].[Question_Indicator_Rollup] (
    [Question_Indicator_RollupID] INT           IDENTITY (1, 1) NOT NULL,
    [Question_ID]                 INT           NOT NULL,
    [Indicator_ID]                INT           NOT NULL,
    [Active]                      INT           NOT NULL,
    [sys_CreatedBy]               VARCHAR (255) NOT NULL,
    [sys_CreatedOn]               DATETIME      NOT NULL,
    [sys_ModifiedBy]              VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]              DATETIME      NOT NULL,
    CONSTRAINT [PK_Question_Indicator_Rollup_3] PRIMARY KEY CLUSTERED ([Question_Indicator_RollupID] ASC)
);


GO
PRINT N'Creating [forms].[Event_Indicator_Rollup]...';


GO
CREATE TABLE [forms].[Event_Indicator_Rollup] (
    [Event_Indicator_RollupID] INT           IDENTITY (1, 1) NOT NULL,
    [Event_ID]                 INT           NOT NULL,
    [Indicator_ID]             INT           NOT NULL,
    [Active]                   INT           NOT NULL,
    [sys_CreatedBy]            VARCHAR (255) NOT NULL,
    [sys_CreatedOn]            DATETIME      NOT NULL,
    [sys_ModifiedBy]           VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]           DATETIME      NOT NULL,
    CONSTRAINT [PK_Event_Indicator_Rollup_3] PRIMARY KEY CLUSTERED ([Event_Indicator_RollupID] ASC)
);


GO
PRINT N'Creating [forms].[Event]...';


GO
CREATE TABLE [forms].[Event] (
    [Event_ID]                INT           IDENTITY (1, 1) NOT NULL,
    [Name]                    VARCHAR (255) NOT NULL,
    [Code]                    VARCHAR (50)  NOT NULL,
    [TextDescription]         VARCHAR (MAX) NOT NULL,
    [EventDate]               DATE          NOT NULL,
    [ScheduledEventStartTime] TIME (7)      NULL,
    [ScheduledEventEndTime]   TIME (7)      NULL,
    [EventStartTime]          TIME (7)      NULL,
    [EventEndTime]            TIME (7)      NULL,
    [Project_ID]              INT           NOT NULL,
    [Location_ID]             INT           NULL,
    [TrainingInstitution_ID]  INT           NULL,
    [Active]                  INT           NOT NULL,
    [sys_CreatedBy]           VARCHAR (255) NOT NULL,
    [sys_CreatedOn]           DATETIME      NOT NULL,
    [sys_ModifiedBy]          VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]          DATETIME      NOT NULL,
    CONSTRAINT [PK_Event_3] PRIMARY KEY CLUSTERED ([Event_ID] ASC)
);


GO
PRINT N'Creating [forms].[EventRegister]...';


GO
CREATE TABLE [forms].[EventRegister] (
    [EventRegister_ID]     INT           IDENTITY (1, 1) NOT NULL,
    [Event_ID]             INT           NOT NULL,
    [FirstName]            VARCHAR (255) NULL,
    [Surname]              VARCHAR (255) NULL,
    [IdentificationNumber] VARCHAR (255) NULL,
    [Age_ID]               INT           NULL,
    [DateOfBirth]          DATE          NULL,
    [Gender_ID]            INT           NULL,
    [Active]               INT           NOT NULL,
    [sys_CreatedBy]        VARCHAR (255) NOT NULL,
    [sys_CreatedOn]        DATETIME      NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]       DATETIME      NOT NULL,
    CONSTRAINT [PK_EventRegister_3] PRIMARY KEY CLUSTERED ([EventRegister_ID] ASC)
);


GO
PRINT N'Creating [forms].[Form]...';


GO
CREATE TABLE [forms].[Form] (
    [Form_ID]         INT           IDENTITY (1, 1) NOT NULL,
    [Name]            VARCHAR (50)  NOT NULL,
    [Code]            VARCHAR (50)  NOT NULL,
    [TextDescription] VARCHAR (MAX) NOT NULL,
    [Active]          INT           NOT NULL,
    [ProjectID]       INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_Form_3] PRIMARY KEY CLUSTERED ([Form_ID] ASC),
    CONSTRAINT [UQ__Form__A25C5AA73EDF24B3] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [forms].[QuestionType]...';


GO
CREATE TABLE [forms].[QuestionType] (
    [QuestionType_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Name]            VARCHAR (50)  NOT NULL,
    [Code]            VARCHAR (50)  NOT NULL,
    [TextDescription] VARCHAR (MAX) NOT NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_QuestionType_3] PRIMARY KEY CLUSTERED ([QuestionType_ID] ASC),
    CONSTRAINT [UQ__Question__A25C5AA73ACB3951] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [forms].[Category]...';


GO
CREATE TABLE [forms].[Category] (
    [Category_ID]     INT           IDENTITY (1, 1) NOT NULL,
    [Name]            VARCHAR (50)  NOT NULL,
    [Code]            VARCHAR (50)  NOT NULL,
    [TextDescription] VARCHAR (MAX) NOT NULL,
    [Form_ID]         INT           NOT NULL,
    [CategoryOrder]   INT           NOT NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_Category_3] PRIMARY KEY CLUSTERED ([Category_ID] ASC),
    CONSTRAINT [IX_Category] UNIQUE NONCLUSTERED ([Form_ID] ASC, [CategoryOrder] ASC)
);


GO
PRINT N'Creating [forms].[FormResponse]...';


GO
CREATE TABLE [forms].[FormResponse] (
    [FormResponse_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Text]            VARCHAR (MAX) NULL,
    [TrueFalse]       BIT           NULL,
    [Form_ID]         INT           NOT NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_FormResponse_3] PRIMARY KEY CLUSTERED ([FormResponse_ID] ASC)
);


GO
PRINT N'Creating [forms].[PotentialResponse]...';


GO
CREATE TABLE [forms].[PotentialResponse] (
    [PotentialResponse_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Name]                 VARCHAR (50)  NOT NULL,
    [Code]                 VARCHAR (50)  NOT NULL,
    [TextDescription]      VARCHAR (MAX) NOT NULL,
    [Question_ID]          INT           NOT NULL,
    [ResponseOrder]        INT           NOT NULL,
    [Active]               INT           NOT NULL,
    [sys_CreatedBy]        VARCHAR (255) NOT NULL,
    [sys_CreatedOn]        DATETIME      NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]       DATETIME      NOT NULL,
    CONSTRAINT [PK_PotentialResponse_3] PRIMARY KEY CLUSTERED ([PotentialResponse_ID] ASC)
);


GO
PRINT N'Creating [forms].[Question]...';


GO
CREATE TABLE [forms].[Question] (
    [Question_ID]              INT           IDENTITY (1, 1) NOT NULL,
    [Name]                     VARCHAR (50)  NOT NULL,
    [Code]                     VARCHAR (50)  NOT NULL,
    [TextDescription]          VARCHAR (MAX) NOT NULL,
    [QuestionType_ID]          INT           NOT NULL,
    [Category_ID]              INT           NOT NULL,
    [QuestionOrder]            INT           NOT NULL,
    [Active]                   INT           NOT NULL,
    [sys_CreatedBy]            VARCHAR (255) NOT NULL,
    [sys_CreatedOn]            DATETIME      NOT NULL,
    [sys_ModifiedBy]           VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]           DATETIME      NOT NULL,
    [MultipleChoiceResponseID] INT           NULL,
    [Response]                 VARCHAR (MAX) NULL,
    [TrueOrFalse]              BIT           NULL,
    CONSTRAINT [PK_Question_3] PRIMARY KEY CLUSTERED ([Question_ID] ASC),
    CONSTRAINT [IX_Question] UNIQUE NONCLUSTERED ([Category_ID] ASC, [QuestionOrder] ASC)
);


GO
PRINT N'Creating [RBM].[MilestoneValues]...';


GO
CREATE TABLE [RBM].[MilestoneValues] (
    [MilestoneValues_ID]  INT              IDENTITY (1, 1) NOT NULL,
    [Milestone_ID]        INT              NOT NULL,
    [ActualLabel]         VARCHAR (50)     NOT NULL,
    [ActualValue]         DECIMAL (20, 5)  NULL,
    [ActualDate]          DATE             NULL,
    [BusinessKey]         VARCHAR (MAX)    NULL,
    [Notes]               VARCHAR (MAX)    NULL,
    [DataVersion_ID]      INT              NOT NULL,
    [Location_ID]         INT              NOT NULL,
    [ReportPeriodID]      INT              NOT NULL,
    [Organization_ID]     INT              NULL,
    [Active]              INT              NOT NULL,
    [sys_CreatedBy]       VARCHAR (255)    NOT NULL,
    [sys_CreatedOn]       DATETIME         NOT NULL,
    [sys_ModifiedBy]      VARCHAR (255)    NOT NULL,
    [sys_ModifiedOn]      DATETIME         NOT NULL,
    [MilestoneValueGroup] UNIQUEIDENTIFIER NOT NULL,
    [GroupVersion]        INT              NOT NULL,
    [AgeBand_ID]          INT              NULL,
    [CommunityType_ID]    INT              NULL,
    [Donor_ID]            INT              NULL,
    [Framework_ID]        INT              NULL,
    [Gender_ID]           INT              NULL,
    [Group_ID]            INT              NULL,
    [Institution_ID]      INT              NULL,
    [ResultArea_ID]       INT              NULL,
    [StrategicElement_ID] INT              NULL,
    CONSTRAINT [PK_MilestoneValues] PRIMARY KEY CLUSTERED ([MilestoneValues_ID] ASC),
    CONSTRAINT [UQ_IDS_MS] UNIQUE NONCLUSTERED ([Milestone_ID] ASC, [Location_ID] ASC, [ReportPeriodID] ASC, [DataVersion_ID] ASC, [Organization_ID] ASC)
);


GO
PRINT N'Creating [RBM].[IndicatorValues]...';


GO
CREATE TABLE [RBM].[IndicatorValues] (
    [IndicatorValues_ID]  INT              IDENTITY (1, 1) NOT NULL,
    [Indicator_ID]        INT              NOT NULL,
    [ActualLabel]         VARCHAR (50)     NOT NULL,
    [ActualValue]         DECIMAL (20, 5)  NULL,
    [ActualDate]          DATE             NULL,
    [BusinessKey]         VARCHAR (MAX)    NULL,
    [Notes]               VARCHAR (MAX)    NULL,
    [DataVersion_ID]      INT              NOT NULL,
    [Location_ID]         INT              NOT NULL,
    [ReportPeriodID]      INT              NOT NULL,
    [Organization_ID]     INT              NULL,
    [Active]              INT              NOT NULL,
    [sys_CreatedBy]       VARCHAR (255)    NOT NULL,
    [sys_CreatedOn]       DATETIME         NOT NULL,
    [sys_ModifiedBy]      VARCHAR (255)    NOT NULL,
    [sys_ModifiedOn]      DATETIME         NOT NULL,
    [IndicatorValueGroup] UNIQUEIDENTIFIER NOT NULL,
    [GroupVersion]        INT              NOT NULL,
    [AgeBand_ID]          INT              NULL,
    [CommunityType_ID]    INT              NULL,
    [Donor_ID]            INT              NULL,
    [Framework_ID]        INT              NULL,
    [Gender_ID]           INT              NULL,
    [Group_ID]            INT              NULL,
    [Institution_ID]      INT              NULL,
    [ResultArea_ID]       INT              NULL,
    [StrategicElement_ID] INT              NULL,
    CONSTRAINT [PK_IndicatorValues] PRIMARY KEY CLUSTERED ([IndicatorValues_ID] ASC),
    CONSTRAINT [UQ_IDS] UNIQUE NONCLUSTERED ([Indicator_ID] ASC, [Location_ID] ASC, [ReportPeriodID] ASC, [DataVersion_ID] ASC, [Organization_ID] ASC)
);


GO
PRINT N'Creating [RBM].[StatusValues]...';


GO
CREATE TABLE [RBM].[StatusValues] (
    [StatusValuesID]    INT            IDENTITY (1, 1) NOT NULL,
    [Output_ID]         INT            NULL,
    [Outcome_ID]        INT            NULL,
    [Activity_ID]       INT            NULL,
    [SubOutput_ID]      INT            NULL,
    [Programme_ID]      INT            NULL,
    [ProjectID]         INT            NULL,
    [StatusTypeID]      INT            NULL,
    [ReportingPeriodID] INT            NOT NULL,
    [LocationID]        INT            NOT NULL,
    [DataVersionID]     INT            NOT NULL,
    [Notes]             NVARCHAR (MAX) NULL,
    [Active]            INT            NOT NULL,
    [sys_CreatedBy]     VARCHAR (255)  NOT NULL,
    [sys_CreatedOn]     DATETIME       NOT NULL,
    [sys_ModifiedBy]    VARCHAR (255)  NOT NULL,
    [sys_ModifiedOn]    DATETIME       NOT NULL,
    CONSTRAINT [PK_StatusValues] PRIMARY KEY CLUSTERED ([StatusValuesID] ASC)
);


GO
PRINT N'Creating [RBM].[PeopleReachedValues]...';


GO
CREATE TABLE [RBM].[PeopleReachedValues] (
    [PeopleReachedValuesID]  INT            IDENTITY (1, 1) NOT NULL,
    [Outcome_ID]             INT            NULL,
    [Output_ID]              INT            NULL,
    [SubOutput_ID]           INT            NULL,
    [Programme_ID]           INT            NULL,
    [ProjectID]              INT            NULL,
    [Activity_ID]            INT            NULL,
    [StatusType_ID]          INT            NULL,
    [ReportingPeriod_ID]     INT            NOT NULL,
    [Location_ID]            INT            NOT NULL,
    [DataVersion_ID]         INT            NOT NULL,
    [Notes]                  NVARCHAR (MAX) NULL,
    [Active]                 INT            NOT NULL,
    [sys_CreatedBy]          VARCHAR (255)  NOT NULL,
    [sys_CreatedOn]          DATETIME       NOT NULL,
    [sys_ModifiedBy]         VARCHAR (255)  NOT NULL,
    [sys_ModifiedOn]         DATETIME       NOT NULL,
    [AgeBand_ID]             INT            NULL,
    [CommunityType_ID]       INT            NULL,
    [Donor_ID]               INT            NULL,
    [Framework_ID]           INT            NULL,
    [Framework_Indicator_ID] INT            NULL,
    [Gender_ID]              INT            NULL,
    [Group_ID]               INT            NULL,
    [Institution_ID]         INT            NULL,
    [ResultArea_ID]          INT            NULL,
    [StrategicElement_ID]    INT            NULL,
    CONSTRAINT [PK_PeopleReachedValues] PRIMARY KEY CLUSTERED ([PeopleReachedValuesID] ASC)
);


GO
PRINT N'Creating [rpt].[CustomReport]...';


GO
CREATE TABLE [rpt].[CustomReport] (
    [CustomReport_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]            VARCHAR (50)  NOT NULL,
    [Name]            VARCHAR (255) NOT NULL,
    [BusinessKey]     VARCHAR (255) NULL,
    [Active]          INT           NOT NULL,
    [sys_CreatedBy]   VARCHAR (255) NOT NULL,
    [sys_CreatedOn]   DATETIME      NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]  DATETIME      NOT NULL,
    CONSTRAINT [PK_CustomReport] PRIMARY KEY CLUSTERED ([CustomReport_ID] ASC)
);


GO
PRINT N'Creating [rpt].[CustomReport_Indicator]...';


GO
CREATE TABLE [rpt].[CustomReport_Indicator] (
    [CustomReport_Indicator_ID] INT           IDENTITY (1, 1) NOT NULL,
    [CustomReport_ID]           INT           NULL,
    [IndicatorID]               INT           NULL,
    [Active]                    INT           NOT NULL,
    [sys_CreatedBy]             VARCHAR (255) NOT NULL,
    [sys_CreatedOn]             DATETIME      NOT NULL,
    [sys_ModifiedBy]            VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]            DATETIME      NOT NULL,
    CONSTRAINT [PK_IndicatorCustomReport] PRIMARY KEY CLUSTERED ([CustomReport_Indicator_ID] ASC)
);


GO
PRINT N'Creating [rpt].[CustomReport_Project]...';


GO
CREATE TABLE [rpt].[CustomReport_Project] (
    [CustomReport_Project_ID] INT           IDENTITY (1, 1) NOT NULL,
    [CustomReport_ID]         INT           NULL,
    [ProjectID]               INT           NULL,
    [Active]                  INT           NOT NULL,
    [sys_CreatedBy]           VARCHAR (255) NOT NULL,
    [sys_CreatedOn]           DATETIME      NOT NULL,
    [sys_ModifiedBy]          VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]          DATETIME      NOT NULL,
    CONSTRAINT [PK_ProjectCustomReport] PRIMARY KEY CLUSTERED ([CustomReport_Project_ID] ASC)
);


GO
PRINT N'Creating [rpt].[CustomReportType]...';


GO
CREATE TABLE [rpt].[CustomReportType] (
    [CustomReportType_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]                VARCHAR (50)  NOT NULL,
    [Name]                VARCHAR (255) NOT NULL,
    [BusinessKey]         VARCHAR (255) NULL,
    [Active]              INT           NOT NULL,
    [sys_CreatedBy]       VARCHAR (255) NOT NULL,
    [sys_CreatedOn]       DATETIME      NOT NULL,
    [sys_ModifiedBy]      VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]      DATETIME      NOT NULL,
    CONSTRAINT [PK_CustomReportType] PRIMARY KEY CLUSTERED ([CustomReportType_ID] ASC)
);


GO
PRINT N'Creating [rpt].[DonorReport]...';


GO
CREATE TABLE [rpt].[DonorReport] (
    [DonorReport_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]           VARCHAR (50)  NOT NULL,
    [Name]           VARCHAR (255) NOT NULL,
    [BusinessKey]    VARCHAR (255) NULL,
    [Active]         INT           NOT NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL,
    CONSTRAINT [PK_DonorReport] PRIMARY KEY CLUSTERED ([DonorReport_ID] ASC)
);


GO
PRINT N'Creating [rpt].[DonorReport_Indicator]...';


GO
CREATE TABLE [rpt].[DonorReport_Indicator] (
    [DonorReport_Indicator_ID] INT           IDENTITY (1, 1) NOT NULL,
    [DonorReportID]            INT           NULL,
    [IndicatorID]              INT           NULL,
    [Active]                   INT           NOT NULL,
    [sys_CreatedBy]            VARCHAR (255) NOT NULL,
    [sys_CreatedOn]            DATETIME      NOT NULL,
    [sys_ModifiedBy]           VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]           DATETIME      NOT NULL,
    CONSTRAINT [PK_IndicatorDonorReport] PRIMARY KEY CLUSTERED ([DonorReport_Indicator_ID] ASC)
);


GO
PRINT N'Creating [rpt].[DonorReport_Project]...';


GO
CREATE TABLE [rpt].[DonorReport_Project] (
    [DonorReport_Project_ID] INT           IDENTITY (1, 1) NOT NULL,
    [DonorReportID]          INT           NULL,
    [ProjectID]              INT           NULL,
    [Active]                 INT           NOT NULL,
    [sys_CreatedBy]          VARCHAR (255) NOT NULL,
    [sys_CreatedOn]          DATETIME      NOT NULL,
    [sys_ModifiedBy]         VARCHAR (255) NOT NULL,
    [sys_ModifiedOn]         DATETIME      NOT NULL,
    CONSTRAINT [PK_ProjectDonorReport] PRIMARY KEY CLUSTERED ([DonorReport_Project_ID] ASC)
);


GO
PRINT N'Creating [dbo].[templateMenueGroup]...';


GO
CREATE TABLE [dbo].[templateMenueGroup] (
    [Title]          VARCHAR (148) NULL,
    [Link]           VARCHAR (119) NULL,
    [Parent]         INT           NULL,
    [ID]             INT           NULL,
    [sys_CreatedBy]  VARCHAR (255) NOT NULL,
    [sys_CreatedOn]  DATETIME      NOT NULL,
    [sys_ModifiedBy] VARCHAR (255) NOT NULL,
    [sys_ModifiedOn] DATETIME      NOT NULL
);


GO
PRINT N'Creating DF_SubOutputSubOutputLink_Active...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [DF_SubOutputSubOutputLink_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_SubOutputSubOutputLink_sys_CreatedBy...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [DF_SubOutputSubOutputLink_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_SubOutputSubOutputLink_sys_CreatedOn...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [DF_SubOutputSubOutputLink_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_SubOutputSubOutputLink_sys_ModifiedBy...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [DF_SubOutputSubOutputLink_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_SubOutputSubOutputLink_sys_ModifiedOn...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [DF_SubOutputSubOutputLink_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_SubOutputPersonRole_Active...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [DF_SubOutputPersonRole_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_SubOutputPersonRole_sys_CreatedBy...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [DF_SubOutputPersonRole_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_SubOutputPersonRole_sys_CreatedOn...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [DF_SubOutputPersonRole_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_SubOutputPersonRole_sys_ModifiedBy...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [DF_SubOutputPersonRole_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_SubOutputPersonRole_sys_ModifiedOn...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [DF_SubOutputPersonRole_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_SubOutput_Active...';


GO
ALTER TABLE [app].[SubOutput]
    ADD CONSTRAINT [DF_SubOutput_Active] DEFAULT (1) FOR [Active];


GO
PRINT N'Creating DF_SubOutput_sys_CreatedBy...';


GO
ALTER TABLE [app].[SubOutput]
    ADD CONSTRAINT [DF_SubOutput_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_SubOutput_sys_CreatedOn...';


GO
ALTER TABLE [app].[SubOutput]
    ADD CONSTRAINT [DF_SubOutput_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_SubOutput_sys_ModifiedBy...';


GO
ALTER TABLE [app].[SubOutput]
    ADD CONSTRAINT [DF_SubOutput_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_SubOutput_sys_ModifiedOn...';


GO
ALTER TABLE [app].[SubOutput]
    ADD CONSTRAINT [DF_SubOutput_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_Indicator_Active...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [DF_Indicator_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Indicator_sys_CreatedBy...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [DF_Indicator_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Indicator_sys_CreatedOn...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [DF_Indicator_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Indicator_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [DF_Indicator_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Indicator_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [DF_Indicator_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_IndicatorLocation_Active...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [DF_IndicatorLocation_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_IndicatorLocation_sys_CreatedBy...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [DF_IndicatorLocation_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_IndicatorLocation_sys_CreatedOn...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [DF_IndicatorLocation_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_IndicatorLocation_sys_ModifiedBy...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [DF_IndicatorLocation_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_IndicatorLocation_sys_ModifiedOn...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [DF_IndicatorLocation_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_IndicatorType_Active...';


GO
ALTER TABLE [app].[IndicatorType]
    ADD CONSTRAINT [DF_IndicatorType_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_IndicatorType_sys_CreatedBy...';


GO
ALTER TABLE [app].[IndicatorType]
    ADD CONSTRAINT [DF_IndicatorType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_IndicatorType_sys_CreatedOn...';


GO
ALTER TABLE [app].[IndicatorType]
    ADD CONSTRAINT [DF_IndicatorType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_IndicatorType_sys_ModifiedBy...';


GO
ALTER TABLE [app].[IndicatorType]
    ADD CONSTRAINT [DF_IndicatorType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_IndicatorType_sys_ModifiedOn...';


GO
ALTER TABLE [app].[IndicatorType]
    ADD CONSTRAINT [DF_IndicatorType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_OutcomePersonRole_Active...';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD CONSTRAINT [DF_OutcomePersonRole_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OutcomePersonRole_sys_CreatedBy...';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD CONSTRAINT [DF_OutcomePersonRole_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OutcomePersonRole_sys_CreatedOn...';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD CONSTRAINT [DF_OutcomePersonRole_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OutcomePersonRole_sys_ModifiedBy...';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD CONSTRAINT [DF_OutcomePersonRole_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OutcomePersonRole_sys_ModifiedOn...';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD CONSTRAINT [DF_OutcomePersonRole_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_OutcomeOrganization_Active...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [DF_OutcomeOrganization_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OutcomeOrganization_sys_CreatedBy...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [DF_OutcomeOrganization_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OutcomeOrganization_sys_CreatedOn...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [DF_OutcomeOrganization_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OutcomeOrganization_sys_ModifiedBy...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [DF_OutcomeOrganization_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OutcomeOrganization_sys_ModifiedOn...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [DF_OutcomeOrganization_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_Output_Active...';


GO
ALTER TABLE [app].[Output]
    ADD CONSTRAINT [DF_Output_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Output_sys_CreatedBy...';


GO
ALTER TABLE [app].[Output]
    ADD CONSTRAINT [DF_Output_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Output_sys_CreatedOn...';


GO
ALTER TABLE [app].[Output]
    ADD CONSTRAINT [DF_Output_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Output_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Output]
    ADD CONSTRAINT [DF_Output_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Output_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Output]
    ADD CONSTRAINT [DF_Output_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_Milestone_Active...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [DF_Milestone_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Milestone_sys_CreatedBy...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [DF_Milestone_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Milestone_sys_CreatedOn...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [DF_Milestone_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Milestone_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [DF_Milestone_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Milestone_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [DF_Milestone_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_MilestoneType_Active...';


GO
ALTER TABLE [app].[MilestoneType]
    ADD CONSTRAINT [DF_MilestoneType_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_MilestoneType_sys_CreatedBy...';


GO
ALTER TABLE [app].[MilestoneType]
    ADD CONSTRAINT [DF_MilestoneType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_MilestoneType_sys_CreatedOn...';


GO
ALTER TABLE [app].[MilestoneType]
    ADD CONSTRAINT [DF_MilestoneType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_MilestoneType_sys_ModifiedBy...';


GO
ALTER TABLE [app].[MilestoneType]
    ADD CONSTRAINT [DF_MilestoneType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_MilestoneType_sys_ModifiedOn...';


GO
ALTER TABLE [app].[MilestoneType]
    ADD CONSTRAINT [DF_MilestoneType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_Activity_Active...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [DF_Activity_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Activity_sys_CreatedBy...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [DF_Activity_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Activity_sys_CreatedOn...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [DF_Activity_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Activity_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [DF_Activity_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Activity_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [DF_Activity_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_OutputPersonRole_Active...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [DF_OutputPersonRole_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OutputPersonRole_sys_CreatedBy...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [DF_OutputPersonRole_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OutputPersonRole_sys_CreatedOn...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [DF_OutputPersonRole_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OutputPersonRole_sys_ModifiedBy...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [DF_OutputPersonRole_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OutputPersonRole_sys_ModifiedOn...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [DF_OutputPersonRole_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_OutputOutputLink_Active...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [DF_OutputOutputLink_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OutputOutputLink_sys_CreatedBy...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [DF_OutputOutputLink_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OutputOutputLink_sys_CreatedOn...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [DF_OutputOutputLink_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OutputOutputLink_sys_ModifiedBy...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [DF_OutputOutputLink_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OutputOutputLink_sys_ModifiedOn...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [DF_OutputOutputLink_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_MilestoneLocation_Active...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [DF_MilestoneLocation_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_MilestoneLocation_sys_CreatedBy...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [DF_MilestoneLocation_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_MilestoneLocation_sys_CreatedOn...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [DF_MilestoneLocation_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_MilestoneLocation_sys_ModifiedBy...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [DF_MilestoneLocation_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_MilestoneLocation_sys_ModifiedOn...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [DF_MilestoneLocation_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[Outcome]....';


GO
ALTER TABLE [app].[Outcome]
    ADD DEFAULT ((0)) FOR [DataVersion];


GO
PRINT N'Creating DF_Outcome_Active...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [DF_Outcome_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Outcome_sys_CreatedBy...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [DF_Outcome_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Outcome_sys_CreatedOn...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [DF_Outcome_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Outcome_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [DF_Outcome_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Outcome_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [DF_Outcome_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[Programme]....';


GO
ALTER TABLE [app].[Programme]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Programme_sys_CreatedBy...';


GO
ALTER TABLE [app].[Programme]
    ADD CONSTRAINT [DF_Programme_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Programme_sys_CreatedOn...';


GO
ALTER TABLE [app].[Programme]
    ADD CONSTRAINT [DF_Programme_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Programme_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Programme]
    ADD CONSTRAINT [DF_Programme_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Programme_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Programme]
    ADD CONSTRAINT [DF_Programme_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[Sector]....';


GO
ALTER TABLE [app].[Sector]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Sector_sys_CreatedBy...';


GO
ALTER TABLE [app].[Sector]
    ADD CONSTRAINT [DF_Sector_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Sector_sys_CreatedOn...';


GO
ALTER TABLE [app].[Sector]
    ADD CONSTRAINT [DF_Sector_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Sector_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Sector]
    ADD CONSTRAINT [DF_Sector_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Sector_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Sector]
    ADD CONSTRAINT [DF_Sector_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [app].[SubSector]....';


GO
ALTER TABLE [app].[SubSector]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_SubSector_sys_CreatedBy...';


GO
ALTER TABLE [app].[SubSector]
    ADD CONSTRAINT [DF_SubSector_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_SubSector_sys_CreatedOn...';


GO
ALTER TABLE [app].[SubSector]
    ADD CONSTRAINT [DF_SubSector_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_SubSector_sys_ModifiedBy...';


GO
ALTER TABLE [app].[SubSector]
    ADD CONSTRAINT [DF_SubSector_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_SubSector_sys_ModifiedOn...';


GO
ALTER TABLE [app].[SubSector]
    ADD CONSTRAINT [DF_SubSector_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_Project_ProjectSiteName...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF_Project_ProjectSiteName] DEFAULT ('ShortName') FOR [ProjectSiteName];


GO
PRINT N'Creating DF_Project_Active...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF_Project_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Project_sys_CreatedBy...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF_Project_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Project_sys_CreatedOn...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF_Project_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Project_sys_ModifiedBy...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF_Project_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Project_sys_ModifiedOn...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [DF_Project_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_DataSource_Active...';


GO
ALTER TABLE [Core].[DataSource]
    ADD CONSTRAINT [DF_DataSource_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DataSource_sys_CreatedBy...';


GO
ALTER TABLE [Core].[DataSource]
    ADD CONSTRAINT [DF_DataSource_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DataSource_sys_CreatedOn...';


GO
ALTER TABLE [Core].[DataSource]
    ADD CONSTRAINT [DF_DataSource_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DataSource_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[DataSource]
    ADD CONSTRAINT [DF_DataSource_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DataSource_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[DataSource]
    ADD CONSTRAINT [DF_DataSource_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_Location_Active...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [DF_Location_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Location_sys_CreatedBy...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [DF_Location_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Location_sys_CreatedOn...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [DF_Location_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Location_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [DF_Location_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Location_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [DF_Location_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [Core].[DimDate]....';


GO
ALTER TABLE [Core].[DimDate]
    ADD DEFAULT ((0)) FOR [IsPublicHoliday];


GO
PRINT N'Creating DF_DimDate_Active...';


GO
ALTER TABLE [Core].[DimDate]
    ADD CONSTRAINT [DF_DimDate_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DimDate_sys_CreatedBy...';


GO
ALTER TABLE [Core].[DimDate]
    ADD CONSTRAINT [DF_DimDate_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DimDate_sys_CreatedOn...';


GO
ALTER TABLE [Core].[DimDate]
    ADD CONSTRAINT [DF_DimDate_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DimDate_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[DimDate]
    ADD CONSTRAINT [DF_DimDate_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DimDate_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[DimDate]
    ADD CONSTRAINT [DF_DimDate_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_ActiveType_sys_CreatedBy...';


GO
ALTER TABLE [Core].[ActiveType]
    ADD CONSTRAINT [DF_ActiveType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_ActiveType_sys_CreatedOn...';


GO
ALTER TABLE [Core].[ActiveType]
    ADD CONSTRAINT [DF_ActiveType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_ActiveType_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[ActiveType]
    ADD CONSTRAINT [DF_ActiveType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_ActiveType_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[ActiveType]
    ADD CONSTRAINT [DF_ActiveType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_Role_Active...';


GO
ALTER TABLE [Core].[Role]
    ADD CONSTRAINT [DF_Role_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Role_sys_CreatedBy...';


GO
ALTER TABLE [Core].[Role]
    ADD CONSTRAINT [DF_Role_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Role_sys_CreatedOn...';


GO
ALTER TABLE [Core].[Role]
    ADD CONSTRAINT [DF_Role_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Role_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[Role]
    ADD CONSTRAINT [DF_Role_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Role_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[Role]
    ADD CONSTRAINT [DF_Role_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_DataVersion_Order...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [DF_DataVersion_Order] DEFAULT ((10)) FOR [Order];


GO
PRINT N'Creating DF_DataVersion_Active...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [DF_DataVersion_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DataVersion_sys_CreatedBy...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [DF_DataVersion_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DataVersion_sys_CreatedOn...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [DF_DataVersion_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DataVersion_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [DF_DataVersion_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DataVersion_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [DF_DataVersion_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_DimMunicipalityGEOM_Active...';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM]
    ADD CONSTRAINT [DF_DimMunicipalityGEOM_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DimMunicipalityGEOM_sys_CreatedBy...';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM]
    ADD CONSTRAINT [DF_DimMunicipalityGEOM_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DimMunicipalityGEOM_sys_CreatedOn...';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM]
    ADD CONSTRAINT [DF_DimMunicipalityGEOM_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DimMunicipalityGEOM_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM]
    ADD CONSTRAINT [DF_DimMunicipalityGEOM_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DimMunicipalityGEOM_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM]
    ADD CONSTRAINT [DF_DimMunicipalityGEOM_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_ReportingPeriod_Active...';


GO
ALTER TABLE [Core].[ReportingPeriod]
    ADD CONSTRAINT [DF_ReportingPeriod_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_ReportingPeriod_sys_CreatedBy...';


GO
ALTER TABLE [Core].[ReportingPeriod]
    ADD CONSTRAINT [DF_ReportingPeriod_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_ReportingPeriod_sys_CreatedOn...';


GO
ALTER TABLE [Core].[ReportingPeriod]
    ADD CONSTRAINT [DF_ReportingPeriod_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_ReportingPeriod_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[ReportingPeriod]
    ADD CONSTRAINT [DF_ReportingPeriod_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_ReportingPeriod_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[ReportingPeriod]
    ADD CONSTRAINT [DF_ReportingPeriod_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_OrganizationType_Active...';


GO
ALTER TABLE [Core].[OrganizationType]
    ADD CONSTRAINT [DF_OrganizationType_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OrganizationType_sys_CreatedBy...';


GO
ALTER TABLE [Core].[OrganizationType]
    ADD CONSTRAINT [DF_OrganizationType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OrganizationType_sys_CreatedOn...';


GO
ALTER TABLE [Core].[OrganizationType]
    ADD CONSTRAINT [DF_OrganizationType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OrganizationType_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[OrganizationType]
    ADD CONSTRAINT [DF_OrganizationType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OrganizationType_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[OrganizationType]
    ADD CONSTRAINT [DF_OrganizationType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_OrganizationPersonRole_Active...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [DF_OrganizationPersonRole_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_OrganizationPersonRole_sys_CreatedBy...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [DF_OrganizationPersonRole_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_OrganizationPersonRole_sys_CreatedOn...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [DF_OrganizationPersonRole_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_OrganizationPersonRole_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [DF_OrganizationPersonRole_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_OrganizationPersonRole_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [DF_OrganizationPersonRole_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_Organization_Active...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [DF_Organization_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Organization_sys_CreatedBy...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [DF_Organization_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Organization_sys_CreatedOn...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [DF_Organization_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Organization_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [DF_Organization_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Organization_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [DF_Organization_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_Person_sys_Active...';


GO
ALTER TABLE [Core].[Person]
    ADD CONSTRAINT [DF_Person_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Person_sys_CreatedBy...';


GO
ALTER TABLE [Core].[Person]
    ADD CONSTRAINT [DF_Person_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Person_sys_CreatedOn...';


GO
ALTER TABLE [Core].[Person]
    ADD CONSTRAINT [DF_Person_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Person_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[Person]
    ADD CONSTRAINT [DF_Person_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Person_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[Person]
    ADD CONSTRAINT [DF_Person_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_LocationType_Active...';


GO
ALTER TABLE [Core].[LocationType]
    ADD CONSTRAINT [DF_LocationType_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_LocationType_sys_CreatedBy...';


GO
ALTER TABLE [Core].[LocationType]
    ADD CONSTRAINT [DF_LocationType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_LocationType_sys_CreatedOn...';


GO
ALTER TABLE [Core].[LocationType]
    ADD CONSTRAINT [DF_LocationType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_LocationType_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[LocationType]
    ADD CONSTRAINT [DF_LocationType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_LocationType_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[LocationType]
    ADD CONSTRAINT [DF_LocationType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_StatusType_sys_CreatedBy...';


GO
ALTER TABLE [Core].[StatusType]
    ADD CONSTRAINT [DF_StatusType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_StatusType_sys_CreatedOn...';


GO
ALTER TABLE [Core].[StatusType]
    ADD CONSTRAINT [DF_StatusType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_StatusType_sys_ModifiedBy...';


GO
ALTER TABLE [Core].[StatusType]
    ADD CONSTRAINT [DF_StatusType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_StatusType_sys_ModifiedOn...';


GO
ALTER TABLE [Core].[StatusType]
    ADD CONSTRAINT [DF_StatusType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_StatusType_Active...';


GO
ALTER TABLE [Core].[StatusType]
    ADD CONSTRAINT [DF_StatusType_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating Default Constraint on [disagg].[Framework_Indicator]....';


GO
ALTER TABLE [disagg].[Framework_Indicator]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Framework_Indicator_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[Framework_Indicator]
    ADD CONSTRAINT [DF_Framework_Indicator_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Framework_Indicator_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[Framework_Indicator]
    ADD CONSTRAINT [DF_Framework_Indicator_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Framework_Indicator_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[Framework_Indicator]
    ADD CONSTRAINT [DF_Framework_Indicator_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Framework_Indicator_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[Framework_Indicator]
    ADD CONSTRAINT [DF_Framework_Indicator_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [disagg].[StrategicElement]....';


GO
ALTER TABLE [disagg].[StrategicElement]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_StrategicElement_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[StrategicElement]
    ADD CONSTRAINT [DF_StrategicElement_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_StrategicElement_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[StrategicElement]
    ADD CONSTRAINT [DF_StrategicElement_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_StrategicElement_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[StrategicElement]
    ADD CONSTRAINT [DF_StrategicElement_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_StrategicElement_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[StrategicElement]
    ADD CONSTRAINT [DF_StrategicElement_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [disagg].[ResultArea]....';


GO
ALTER TABLE [disagg].[ResultArea]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_ResultArea_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[ResultArea]
    ADD CONSTRAINT [DF_ResultArea_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_ResultArea_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[ResultArea]
    ADD CONSTRAINT [DF_ResultArea_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_ResultArea_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[ResultArea]
    ADD CONSTRAINT [DF_ResultArea_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_ResultArea_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[ResultArea]
    ADD CONSTRAINT [DF_ResultArea_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [disagg].[Project_ResultArea]....';


GO
ALTER TABLE [disagg].[Project_ResultArea]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Project_ResultArea_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[Project_ResultArea]
    ADD CONSTRAINT [DF_Project_ResultArea_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Project_ResultArea_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[Project_ResultArea]
    ADD CONSTRAINT [DF_Project_ResultArea_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Project_ResultArea_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[Project_ResultArea]
    ADD CONSTRAINT [DF_Project_ResultArea_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Project_ResultArea_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[Project_ResultArea]
    ADD CONSTRAINT [DF_Project_ResultArea_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [disagg].[Institution]....';


GO
ALTER TABLE [disagg].[Institution]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Institution_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[Institution]
    ADD CONSTRAINT [DF_Institution_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Institution_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[Institution]
    ADD CONSTRAINT [DF_Institution_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Institution_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[Institution]
    ADD CONSTRAINT [DF_Institution_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Institution_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[Institution]
    ADD CONSTRAINT [DF_Institution_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [disagg].[Group]....';


GO
ALTER TABLE [disagg].[Group]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Group_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[Group]
    ADD CONSTRAINT [DF_Group_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Group_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[Group]
    ADD CONSTRAINT [DF_Group_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Group_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[Group]
    ADD CONSTRAINT [DF_Group_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Group_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[Group]
    ADD CONSTRAINT [DF_Group_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [disagg].[Donor]....';


GO
ALTER TABLE [disagg].[Donor]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Donor_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[Donor]
    ADD CONSTRAINT [DF_Donor_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Donor_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[Donor]
    ADD CONSTRAINT [DF_Donor_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Donor_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[Donor]
    ADD CONSTRAINT [DF_Donor_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Donor_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[Donor]
    ADD CONSTRAINT [DF_Donor_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [disagg].[CommunityType]....';


GO
ALTER TABLE [disagg].[CommunityType]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_CommunityType_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[CommunityType]
    ADD CONSTRAINT [DF_CommunityType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_CommunityType_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[CommunityType]
    ADD CONSTRAINT [DF_CommunityType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_CommunityType_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[CommunityType]
    ADD CONSTRAINT [DF_CommunityType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_CommunityType_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[CommunityType]
    ADD CONSTRAINT [DF_CommunityType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [disagg].[Age]....';


GO
ALTER TABLE [disagg].[Age]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Age_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[Age]
    ADD CONSTRAINT [DF_Age_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Age_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[Age]
    ADD CONSTRAINT [DF_Age_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Age_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[Age]
    ADD CONSTRAINT [DF_Age_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Age_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[Age]
    ADD CONSTRAINT [DF_Age_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__AgeBand__Active__1B7E091A...';


GO
ALTER TABLE [disagg].[AgeBand]
    ADD CONSTRAINT [DF__AgeBand__Active__1B7E091A] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_AgeBand_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[AgeBand]
    ADD CONSTRAINT [DF_AgeBand_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_AgeBand_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[AgeBand]
    ADD CONSTRAINT [DF_AgeBand_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_AgeBand_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[AgeBand]
    ADD CONSTRAINT [DF_AgeBand_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_AgeBand_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[AgeBand]
    ADD CONSTRAINT [DF_AgeBand_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Framework__Activ__168449D3...';


GO
ALTER TABLE [disagg].[Framework]
    ADD CONSTRAINT [DF__Framework__Activ__168449D3] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Framework_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[Framework]
    ADD CONSTRAINT [DF_Framework_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Framework_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[Framework]
    ADD CONSTRAINT [DF_Framework_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Framework_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[Framework]
    ADD CONSTRAINT [DF_Framework_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Framework_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[Framework]
    ADD CONSTRAINT [DF_Framework_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [disagg].[Framework_Project]....';


GO
ALTER TABLE [disagg].[Framework_Project]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Framework_Project_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[Framework_Project]
    ADD CONSTRAINT [DF_Framework_Project_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Framework_Project_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[Framework_Project]
    ADD CONSTRAINT [DF_Framework_Project_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Framework_Project_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[Framework_Project]
    ADD CONSTRAINT [DF_Framework_Project_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Framework_Project_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[Framework_Project]
    ADD CONSTRAINT [DF_Framework_Project_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [disagg].[Gender]....';


GO
ALTER TABLE [disagg].[Gender]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Gender_sys_CreatedBy...';


GO
ALTER TABLE [disagg].[Gender]
    ADD CONSTRAINT [DF_Gender_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Gender_sys_CreatedOn...';


GO
ALTER TABLE [disagg].[Gender]
    ADD CONSTRAINT [DF_Gender_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Gender_sys_ModifiedBy...';


GO
ALTER TABLE [disagg].[Gender]
    ADD CONSTRAINT [DF_Gender_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Gender_sys_ModifiedOn...';


GO
ALTER TABLE [disagg].[Gender]
    ADD CONSTRAINT [DF_Gender_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__RollupType_sys_Active...';


GO
ALTER TABLE [forms].[RollupType]
    ADD CONSTRAINT [DF__RollupType_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_RollupType_sys_CreatedBy...';


GO
ALTER TABLE [forms].[RollupType]
    ADD CONSTRAINT [DF_RollupType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_RollupType_sys_CreatedOn...';


GO
ALTER TABLE [forms].[RollupType]
    ADD CONSTRAINT [DF_RollupType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_RollupType_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[RollupType]
    ADD CONSTRAINT [DF_RollupType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_RollupType_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[RollupType]
    ADD CONSTRAINT [DF_RollupType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Question_Indicator_Rollup_sys_Active...';


GO
ALTER TABLE [forms].[Question_Indicator_Rollup]
    ADD CONSTRAINT [DF__Question_Indicator_Rollup_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Question_Indicator_Rollup_sys_CreatedBy...';


GO
ALTER TABLE [forms].[Question_Indicator_Rollup]
    ADD CONSTRAINT [DF_Question_Indicator_Rollup_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Question_Indicator_Rollup_sys_CreatedOn...';


GO
ALTER TABLE [forms].[Question_Indicator_Rollup]
    ADD CONSTRAINT [DF_Question_Indicator_Rollup_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Question_Indicator_Rollup_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[Question_Indicator_Rollup]
    ADD CONSTRAINT [DF_Question_Indicator_Rollup_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Question_Indicator_Rollup_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[Question_Indicator_Rollup]
    ADD CONSTRAINT [DF_Question_Indicator_Rollup_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Event_Indicator_Rollup_sys_Active...';


GO
ALTER TABLE [forms].[Event_Indicator_Rollup]
    ADD CONSTRAINT [DF__Event_Indicator_Rollup_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Event_Indicator_Rollup_sys_CreatedBy...';


GO
ALTER TABLE [forms].[Event_Indicator_Rollup]
    ADD CONSTRAINT [DF_Event_Indicator_Rollup_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Event_Indicator_Rollup_sys_CreatedOn...';


GO
ALTER TABLE [forms].[Event_Indicator_Rollup]
    ADD CONSTRAINT [DF_Event_Indicator_Rollup_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Event_Indicator_Rollup_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[Event_Indicator_Rollup]
    ADD CONSTRAINT [DF_Event_Indicator_Rollup_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Event_Indicator_Rollup_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[Event_Indicator_Rollup]
    ADD CONSTRAINT [DF_Event_Indicator_Rollup_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Event_sys_Active...';


GO
ALTER TABLE [forms].[Event]
    ADD CONSTRAINT [DF__Event_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Event_sys_CreatedBy...';


GO
ALTER TABLE [forms].[Event]
    ADD CONSTRAINT [DF_Event_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Event_sys_CreatedOn...';


GO
ALTER TABLE [forms].[Event]
    ADD CONSTRAINT [DF_Event_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Event_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[Event]
    ADD CONSTRAINT [DF_Event_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Event_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[Event]
    ADD CONSTRAINT [DF_Event_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__EventRegister_sys_Active...';


GO
ALTER TABLE [forms].[EventRegister]
    ADD CONSTRAINT [DF__EventRegister_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_EventRegister_sys_CreatedBy...';


GO
ALTER TABLE [forms].[EventRegister]
    ADD CONSTRAINT [DF_EventRegister_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_EventRegister_sys_CreatedOn...';


GO
ALTER TABLE [forms].[EventRegister]
    ADD CONSTRAINT [DF_EventRegister_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_EventRegister_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[EventRegister]
    ADD CONSTRAINT [DF_EventRegister_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_EventRegister_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[EventRegister]
    ADD CONSTRAINT [DF_EventRegister_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Form_sys_Active...';


GO
ALTER TABLE [forms].[Form]
    ADD CONSTRAINT [DF__Form_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Form_sys_CreatedBy...';


GO
ALTER TABLE [forms].[Form]
    ADD CONSTRAINT [DF_Form_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Form_sys_CreatedOn...';


GO
ALTER TABLE [forms].[Form]
    ADD CONSTRAINT [DF_Form_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Form_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[Form]
    ADD CONSTRAINT [DF_Form_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Form_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[Form]
    ADD CONSTRAINT [DF_Form_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__QuestionType_sys_Active...';


GO
ALTER TABLE [forms].[QuestionType]
    ADD CONSTRAINT [DF__QuestionType_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_QuestionType_sys_CreatedBy...';


GO
ALTER TABLE [forms].[QuestionType]
    ADD CONSTRAINT [DF_QuestionType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_QuestionType_sys_CreatedOn...';


GO
ALTER TABLE [forms].[QuestionType]
    ADD CONSTRAINT [DF_QuestionType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_QuestionType_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[QuestionType]
    ADD CONSTRAINT [DF_QuestionType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_QuestionType_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[QuestionType]
    ADD CONSTRAINT [DF_QuestionType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Category_sys_Active...';


GO
ALTER TABLE [forms].[Category]
    ADD CONSTRAINT [DF__Category_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Category_sys_CreatedBy...';


GO
ALTER TABLE [forms].[Category]
    ADD CONSTRAINT [DF_Category_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Category_sys_CreatedOn...';


GO
ALTER TABLE [forms].[Category]
    ADD CONSTRAINT [DF_Category_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Category_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[Category]
    ADD CONSTRAINT [DF_Category_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Category_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[Category]
    ADD CONSTRAINT [DF_Category_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__FormResponse_sys_Active...';


GO
ALTER TABLE [forms].[FormResponse]
    ADD CONSTRAINT [DF__FormResponse_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_FormResponse_sys_CreatedBy...';


GO
ALTER TABLE [forms].[FormResponse]
    ADD CONSTRAINT [DF_FormResponse_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_FormResponse_sys_CreatedOn...';


GO
ALTER TABLE [forms].[FormResponse]
    ADD CONSTRAINT [DF_FormResponse_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_FormResponse_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[FormResponse]
    ADD CONSTRAINT [DF_FormResponse_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_FormResponse_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[FormResponse]
    ADD CONSTRAINT [DF_FormResponse_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__PotentialResponse_sys_Active...';


GO
ALTER TABLE [forms].[PotentialResponse]
    ADD CONSTRAINT [DF__PotentialResponse_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_PotentialResponse_sys_CreatedBy...';


GO
ALTER TABLE [forms].[PotentialResponse]
    ADD CONSTRAINT [DF_PotentialResponse_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_PotentialResponse_sys_CreatedOn...';


GO
ALTER TABLE [forms].[PotentialResponse]
    ADD CONSTRAINT [DF_PotentialResponse_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_PotentialResponse_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[PotentialResponse]
    ADD CONSTRAINT [DF_PotentialResponse_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_PotentialResponse_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[PotentialResponse]
    ADD CONSTRAINT [DF_PotentialResponse_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF__Question_sys_Active...';


GO
ALTER TABLE [forms].[Question]
    ADD CONSTRAINT [DF__Question_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_Question_sys_CreatedBy...';


GO
ALTER TABLE [forms].[Question]
    ADD CONSTRAINT [DF_Question_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_Question_sys_CreatedOn...';


GO
ALTER TABLE [forms].[Question]
    ADD CONSTRAINT [DF_Question_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_Question_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[Question]
    ADD CONSTRAINT [DF_Question_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_Question_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[Question]
    ADD CONSTRAINT [DF_Question_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_MilestoneValues_Active...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [DF_MilestoneValues_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_MilestoneValues_sys_CreatedBy...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [DF_MilestoneValues_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_MilestoneValues_sys_CreatedOn...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [DF_MilestoneValues_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_MilestoneValues_sys_ModifiedBy...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [DF_MilestoneValues_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_MilestoneValues_sys_ModifiedOn...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [DF_MilestoneValues_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [RBM].[MilestoneValues]....';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD DEFAULT (newid()) FOR [MilestoneValueGroup];


GO
PRINT N'Creating DF_MilestoneValues_GroupVersion...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [DF_MilestoneValues_GroupVersion] DEFAULT ((0)) FOR [GroupVersion];


GO
PRINT N'Creating DF_IndicatorValues_Active...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [DF_IndicatorValues_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_IndicatorValues_sys_CreatedBy...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [DF_IndicatorValues_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_IndicatorValues_sys_CreatedOn...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [DF_IndicatorValues_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_IndicatorValues_sys_ModifiedBy...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [DF_IndicatorValues_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_IndicatorValues_sys_ModifiedOn...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [DF_IndicatorValues_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [RBM].[IndicatorValues]....';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD DEFAULT (newid()) FOR [IndicatorValueGroup];


GO
PRINT N'Creating Default Constraint on [RBM].[IndicatorValues]....';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD DEFAULT ((0)) FOR [GroupVersion];


GO
PRINT N'Creating DF_StatusValues_Active...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [DF_StatusValues_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_StatusValues_sys_CreatedBy...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [DF_StatusValues_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_StatusValues_sys_CreatedOn...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [DF_StatusValues_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_StatusValues_sys_ModifiedBy...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [DF_StatusValues_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_StatusValues_sys_ModifiedOn...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [DF_StatusValues_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_PeopleReachedValues_Active...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [DF_PeopleReachedValues_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_PeopleReachedValues_sys_CreatedBy...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [DF_PeopleReachedValues_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_PeopleReachedValues_sys_CreatedOn...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [DF_PeopleReachedValues_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_PeopleReachedValues_sys_ModifiedBy...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [DF_PeopleReachedValues_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_PeopleReachedValues_sys_ModifiedOn...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [DF_PeopleReachedValues_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [rpt].[CustomReport]....';


GO
ALTER TABLE [rpt].[CustomReport]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_CustomReport_sys_CreatedBy...';


GO
ALTER TABLE [rpt].[CustomReport]
    ADD CONSTRAINT [DF_CustomReport_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_CustomReport_sys_CreatedOn...';


GO
ALTER TABLE [rpt].[CustomReport]
    ADD CONSTRAINT [DF_CustomReport_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_CustomReport_sys_ModifiedBy...';


GO
ALTER TABLE [rpt].[CustomReport]
    ADD CONSTRAINT [DF_CustomReport_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_CustomReport_sys_ModifiedOn...';


GO
ALTER TABLE [rpt].[CustomReport]
    ADD CONSTRAINT [DF_CustomReport_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [rpt].[CustomReport_Indicator]....';


GO
ALTER TABLE [rpt].[CustomReport_Indicator]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_CustomReport_Indicator_sys_CreatedBy...';


GO
ALTER TABLE [rpt].[CustomReport_Indicator]
    ADD CONSTRAINT [DF_CustomReport_Indicator_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_CustomReport_Indicator_sys_CreatedOn...';


GO
ALTER TABLE [rpt].[CustomReport_Indicator]
    ADD CONSTRAINT [DF_CustomReport_Indicator_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_CustomReport_Indicator_sys_ModifiedBy...';


GO
ALTER TABLE [rpt].[CustomReport_Indicator]
    ADD CONSTRAINT [DF_CustomReport_Indicator_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_CustomReport_Indicator_sys_ModifiedOn...';


GO
ALTER TABLE [rpt].[CustomReport_Indicator]
    ADD CONSTRAINT [DF_CustomReport_Indicator_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [rpt].[CustomReport_Project]....';


GO
ALTER TABLE [rpt].[CustomReport_Project]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_CustomReport_Project_sys_CreatedBy...';


GO
ALTER TABLE [rpt].[CustomReport_Project]
    ADD CONSTRAINT [DF_CustomReport_Project_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_CustomReport_Project_sys_CreatedOn...';


GO
ALTER TABLE [rpt].[CustomReport_Project]
    ADD CONSTRAINT [DF_CustomReport_Project_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_CustomReport_Project_sys_ModifiedBy...';


GO
ALTER TABLE [rpt].[CustomReport_Project]
    ADD CONSTRAINT [DF_CustomReport_Project_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_CustomReport_Project_sys_ModifiedOn...';


GO
ALTER TABLE [rpt].[CustomReport_Project]
    ADD CONSTRAINT [DF_CustomReport_Project_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [rpt].[CustomReportType]....';


GO
ALTER TABLE [rpt].[CustomReportType]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_CustomReportType_sys_CreatedBy...';


GO
ALTER TABLE [rpt].[CustomReportType]
    ADD CONSTRAINT [DF_CustomReportType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_CustomReportType_sys_CreatedOn...';


GO
ALTER TABLE [rpt].[CustomReportType]
    ADD CONSTRAINT [DF_CustomReportType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_CustomReportType_sys_ModifiedBy...';


GO
ALTER TABLE [rpt].[CustomReportType]
    ADD CONSTRAINT [DF_CustomReportType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_CustomReportType_sys_ModifiedOn...';


GO
ALTER TABLE [rpt].[CustomReportType]
    ADD CONSTRAINT [DF_CustomReportType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [rpt].[DonorReport]....';


GO
ALTER TABLE [rpt].[DonorReport]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DonorReport_sys_CreatedBy...';


GO
ALTER TABLE [rpt].[DonorReport]
    ADD CONSTRAINT [DF_DonorReport_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DonorReport_sys_CreatedOn...';


GO
ALTER TABLE [rpt].[DonorReport]
    ADD CONSTRAINT [DF_DonorReport_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DonorReport_sys_ModifiedBy...';


GO
ALTER TABLE [rpt].[DonorReport]
    ADD CONSTRAINT [DF_DonorReport_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DonorReport_sys_ModifiedOn...';


GO
ALTER TABLE [rpt].[DonorReport]
    ADD CONSTRAINT [DF_DonorReport_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [rpt].[DonorReport_Indicator]....';


GO
ALTER TABLE [rpt].[DonorReport_Indicator]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DonorReport_Indicator_sys_CreatedBy...';


GO
ALTER TABLE [rpt].[DonorReport_Indicator]
    ADD CONSTRAINT [DF_DonorReport_Indicator_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DonorReport_Indicator_sys_CreatedOn...';


GO
ALTER TABLE [rpt].[DonorReport_Indicator]
    ADD CONSTRAINT [DF_DonorReport_Indicator_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DonorReport_Indicator_sys_ModifiedBy...';


GO
ALTER TABLE [rpt].[DonorReport_Indicator]
    ADD CONSTRAINT [DF_DonorReport_Indicator_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DonorReport_Indicator_sys_ModifiedOn...';


GO
ALTER TABLE [rpt].[DonorReport_Indicator]
    ADD CONSTRAINT [DF_DonorReport_Indicator_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating Default Constraint on [rpt].[DonorReport_Project]....';


GO
ALTER TABLE [rpt].[DonorReport_Project]
    ADD DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_DonorReport_Project_sys_CreatedBy...';


GO
ALTER TABLE [rpt].[DonorReport_Project]
    ADD CONSTRAINT [DF_DonorReport_Project_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_DonorReport_Project_sys_CreatedOn...';


GO
ALTER TABLE [rpt].[DonorReport_Project]
    ADD CONSTRAINT [DF_DonorReport_Project_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_DonorReport_Project_sys_ModifiedBy...';


GO
ALTER TABLE [rpt].[DonorReport_Project]
    ADD CONSTRAINT [DF_DonorReport_Project_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_DonorReport_Project_sys_ModifiedOn...';


GO
ALTER TABLE [rpt].[DonorReport_Project]
    ADD CONSTRAINT [DF_DonorReport_Project_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating DF_templateMenueGroup_sys_CreatedBy...';


GO
ALTER TABLE [dbo].[templateMenueGroup]
    ADD CONSTRAINT [DF_templateMenueGroup_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_templateMenueGroup_sys_CreatedOn...';


GO
ALTER TABLE [dbo].[templateMenueGroup]
    ADD CONSTRAINT [DF_templateMenueGroup_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_templateMenueGroup_sys_ModifiedBy...';


GO
ALTER TABLE [dbo].[templateMenueGroup]
    ADD CONSTRAINT [DF_templateMenueGroup_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_templateMenueGroup_sys_ModifiedOn...';


GO
ALTER TABLE [dbo].[templateMenueGroup]
    ADD CONSTRAINT [DF_templateMenueGroup_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating FK_SubOutputSubOutputLink_ActiveType...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [FK_SubOutputSubOutputLink_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_SubOutputSubOutputLink_SubOutput...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [FK_SubOutputSubOutputLink_SubOutput] FOREIGN KEY ([PrimarySubOutput_ID]) REFERENCES [app].[SubOutput] ([SubOutput_ID]);


GO
PRINT N'Creating FK_SubOutputSubOutputLink_SubOutput1...';


GO
ALTER TABLE [app].[SubOutputSubOutputLink]
    ADD CONSTRAINT [FK_SubOutputSubOutputLink_SubOutput1] FOREIGN KEY ([SecondarySubOutput_ID]) REFERENCES [app].[SubOutput] ([SubOutput_ID]) NOT FOR REPLICATION;


GO
ALTER TABLE [app].[SubOutputSubOutputLink] NOCHECK CONSTRAINT [FK_SubOutputSubOutputLink_SubOutput1];


GO
PRINT N'Creating FK_SubOutputPersonRole_ActiveType...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [FK_SubOutputPersonRole_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_SubOutputPersonRole_Person...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [FK_SubOutputPersonRole_Person] FOREIGN KEY ([Person_ID]) REFERENCES [Core].[Person] ([Person_ID]);


GO
PRINT N'Creating FK_SubOutputPersonRole_Role...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [FK_SubOutputPersonRole_Role] FOREIGN KEY ([Role_ID]) REFERENCES [Core].[Role] ([RoleID]);


GO
PRINT N'Creating FK_SubOutputPersonRole_SubOutput...';


GO
ALTER TABLE [app].[SubOutputPersonRole]
    ADD CONSTRAINT [FK_SubOutputPersonRole_SubOutput] FOREIGN KEY ([SubOutput_ID]) REFERENCES [app].[SubOutput] ([SubOutput_ID]);


GO
PRINT N'Creating FK_SubOutput_ActiveType...';


GO
ALTER TABLE [app].[SubOutput]
    ADD CONSTRAINT [FK_SubOutput_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_SubOutput_Output...';


GO
ALTER TABLE [app].[SubOutput]
    ADD CONSTRAINT [FK_SubOutput_Output] FOREIGN KEY ([Output_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_Indicator_ActiveType...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [FK_Indicator_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Indicator_IndicatorType...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [FK_Indicator_IndicatorType] FOREIGN KEY ([IndicatorType_ID]) REFERENCES [app].[IndicatorType] ([IndicatorType_ID]);


GO
PRINT N'Creating FK_Indicator_Outcome...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [FK_Indicator_Outcome] FOREIGN KEY ([Outcome_ID]) REFERENCES [app].[Outcome] ([Outcome_ID]);


GO
PRINT N'Creating FK_Indicator_Output...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [FK_Indicator_Output] FOREIGN KEY ([Output_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_Indicator_Programme...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [FK_Indicator_Programme] FOREIGN KEY ([Programme_ID]) REFERENCES [app].[Programme] ([Programme_ID]);


GO
PRINT N'Creating FK_Indicator_Project...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [FK_Indicator_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_Indicator_Sector...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [FK_Indicator_Sector] FOREIGN KEY ([Sector_ID]) REFERENCES [app].[Sector] ([Sector_ID]);


GO
PRINT N'Creating FK_Indicator_SubOutput...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [FK_Indicator_SubOutput] FOREIGN KEY ([SubOutput_ID]) REFERENCES [app].[SubOutput] ([SubOutput_ID]);


GO
PRINT N'Creating FK_Indicator_SubSector...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [FK_Indicator_SubSector] FOREIGN KEY ([SubSector_ID]) REFERENCES [app].[SubSector] ([SubSector_ID]);


GO
PRINT N'Creating FK_IndicatorLocation_ActiveType...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [FK_IndicatorLocation_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_IndicatorLocation_Indicator...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [FK_IndicatorLocation_Indicator] FOREIGN KEY ([Indicator_ID]) REFERENCES [app].[Indicator] ([IndicatorID]);


GO
PRINT N'Creating FK_IndicatorLocation_Location...';


GO
ALTER TABLE [app].[IndicatorLocation]
    ADD CONSTRAINT [FK_IndicatorLocation_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_IndicatorType_ActiveType...';


GO
ALTER TABLE [app].[IndicatorType]
    ADD CONSTRAINT [FK_IndicatorType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OutcomePersonRole_ActiveType...';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD CONSTRAINT [FK_OutcomePersonRole_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OutcomePersonRole_Outcome...';


GO
ALTER TABLE [app].[OutcomePersonRole]
    ADD CONSTRAINT [FK_OutcomePersonRole_Outcome] FOREIGN KEY ([Outcome_ID]) REFERENCES [app].[Outcome] ([Outcome_ID]);


GO
PRINT N'Creating FK_OutcomeOrganization_ActiveType...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [FK_OutcomeOrganization_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OutcomeOrganization_Organization...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [FK_OutcomeOrganization_Organization] FOREIGN KEY ([Organization_ID]) REFERENCES [Core].[Organization] ([Organization_ID]);


GO
PRINT N'Creating FK_OutcomeOrganization_Outcome...';


GO
ALTER TABLE [app].[OutcomeOrganization]
    ADD CONSTRAINT [FK_OutcomeOrganization_Outcome] FOREIGN KEY ([Outcome_ID]) REFERENCES [app].[Outcome] ([Outcome_ID]);


GO
PRINT N'Creating FK_Output_ActiveType...';


GO
ALTER TABLE [app].[Output]
    ADD CONSTRAINT [FK_Output_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Output_Outcome...';


GO
ALTER TABLE [app].[Output]
    ADD CONSTRAINT [FK_Output_Outcome] FOREIGN KEY ([Outcome_ID]) REFERENCES [app].[Outcome] ([Outcome_ID]);


GO
PRINT N'Creating FK_Milestone_ActiveType...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [FK_Milestone_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Milestone_Activity...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [FK_Milestone_Activity] FOREIGN KEY ([Activity_ID]) REFERENCES [app].[Activity] ([Activity_ID]);


GO
PRINT N'Creating FK_Milestone_MilestoneType...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [FK_Milestone_MilestoneType] FOREIGN KEY ([MilestoneTypeID]) REFERENCES [app].[MilestoneType] ([MilestoneTypeID]);


GO
PRINT N'Creating FK_Milestone_Project...';


GO
ALTER TABLE [app].[Milestone]
    ADD CONSTRAINT [FK_Milestone_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_MilestoneType_ActiveType...';


GO
ALTER TABLE [app].[MilestoneType]
    ADD CONSTRAINT [FK_MilestoneType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Activity_ActiveType...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [FK_Activity_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Activity_Project...';


GO
ALTER TABLE [app].[Activity]
    ADD CONSTRAINT [FK_Activity_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_OutputPersonRole_ActiveType...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [FK_OutputPersonRole_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OutputPersonRole_Output...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [FK_OutputPersonRole_Output] FOREIGN KEY ([Output_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_OutputPersonRole_Person...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [FK_OutputPersonRole_Person] FOREIGN KEY ([Person_ID]) REFERENCES [Core].[Person] ([Person_ID]) NOT FOR REPLICATION;


GO
ALTER TABLE [app].[OutputPersonRole] NOCHECK CONSTRAINT [FK_OutputPersonRole_Person];


GO
PRINT N'Creating FK_OutputPersonRole_Role...';


GO
ALTER TABLE [app].[OutputPersonRole]
    ADD CONSTRAINT [FK_OutputPersonRole_Role] FOREIGN KEY ([Role_ID]) REFERENCES [Core].[Role] ([RoleID]) NOT FOR REPLICATION;


GO
ALTER TABLE [app].[OutputPersonRole] NOCHECK CONSTRAINT [FK_OutputPersonRole_Role];


GO
PRINT N'Creating FK_OutputOutputLink_ActiveType...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [FK_OutputOutputLink_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OutputOutputLink_Output...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [FK_OutputOutputLink_Output] FOREIGN KEY ([PrimaryOutput_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_OutputOutputLink_Output1...';


GO
ALTER TABLE [app].[OutputOutputLink]
    ADD CONSTRAINT [FK_OutputOutputLink_Output1] FOREIGN KEY ([SecondaryOutput_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_MilestoneLocation_ActiveType...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [FK_MilestoneLocation_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_MilestoneLocation_Location...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [FK_MilestoneLocation_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_MilestoneLocation_Milestone...';


GO
ALTER TABLE [app].[MilestoneLocation]
    ADD CONSTRAINT [FK_MilestoneLocation_Milestone] FOREIGN KEY ([MilestoneID]) REFERENCES [app].[Milestone] ([MilestoneID]);


GO
PRINT N'Creating FK_Outcome_ActiveType...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [FK_Outcome_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OutCome_DataVersion...';


GO
ALTER TABLE [app].[Outcome]
    ADD CONSTRAINT [FK_OutCome_DataVersion] FOREIGN KEY ([DataVersion]) REFERENCES [Core].[DataVersion] ([DataVersion_ID]);


GO
PRINT N'Creating FK_Sector_ActiveType...';


GO
ALTER TABLE [app].[Sector]
    ADD CONSTRAINT [FK_Sector_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Sector_Programme...';


GO
ALTER TABLE [app].[Sector]
    ADD CONSTRAINT [FK_Sector_Programme] FOREIGN KEY ([Programme_ID]) REFERENCES [app].[Programme] ([Programme_ID]);


GO
PRINT N'Creating FK_SubSector_ActiveType...';


GO
ALTER TABLE [app].[SubSector]
    ADD CONSTRAINT [FK_SubSector_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_SubSector_Sector...';


GO
ALTER TABLE [app].[SubSector]
    ADD CONSTRAINT [FK_SubSector_Sector] FOREIGN KEY ([Sector_ID]) REFERENCES [app].[Sector] ([Sector_ID]);


GO
PRINT N'Creating FK_Project_ActiveType...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [FK_Project_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Project_Outcome...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [FK_Project_Outcome] FOREIGN KEY ([Outcome_ID]) REFERENCES [app].[Outcome] ([Outcome_ID]);


GO
PRINT N'Creating FK_Project_Programme...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [FK_Project_Programme] FOREIGN KEY ([Programme_ID]) REFERENCES [app].[Programme] ([Programme_ID]);


GO
PRINT N'Creating FK_Project_Project...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [FK_Project_Project] FOREIGN KEY ([ProjectParentID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_Project_Sector...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [FK_Project_Sector] FOREIGN KEY ([Sector_ID]) REFERENCES [app].[Sector] ([Sector_ID]);


GO
PRINT N'Creating FK_Project_SubSector...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [FK_Project_SubSector] FOREIGN KEY ([SubSector_ID]) REFERENCES [app].[SubSector] ([SubSector_ID]);


GO
PRINT N'Creating FK_DataSource_ActiveType...';


GO
ALTER TABLE [Core].[DataSource]
    ADD CONSTRAINT [FK_DataSource_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Location_ActiveType...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [FK_Location_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Location_LocationType...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [FK_Location_LocationType] FOREIGN KEY ([LocationType_ID]) REFERENCES [Core].[LocationType] ([LocationType_ID]);


GO
PRINT N'Creating FK_Location_ParentLocation...';


GO
ALTER TABLE [Core].[Location]
    ADD CONSTRAINT [FK_Location_ParentLocation] FOREIGN KEY ([ParentLocation_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_DimDate_ActiveType...';


GO
ALTER TABLE [Core].[DimDate]
    ADD CONSTRAINT [FK_DimDate_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Role_ActiveType...';


GO
ALTER TABLE [Core].[Role]
    ADD CONSTRAINT [FK_Role_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_DataVersion_ActiveType...';


GO
ALTER TABLE [Core].[DataVersion]
    ADD CONSTRAINT [FK_DataVersion_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_ReportingPeriod_ActiveType...';


GO
ALTER TABLE [Core].[ReportingPeriod]
    ADD CONSTRAINT [FK_ReportingPeriod_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OrganizationType_ActiveType...';


GO
ALTER TABLE [Core].[OrganizationType]
    ADD CONSTRAINT [FK_OrganizationType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OrganizationPersonRole_ActiveType...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [FK_OrganizationPersonRole_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_OrganizationPersonRole_Organization...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [FK_OrganizationPersonRole_Organization] FOREIGN KEY ([Organization_ID]) REFERENCES [Core].[Organization] ([Organization_ID]);


GO
PRINT N'Creating FK_OrganizationPersonRole_Person...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [FK_OrganizationPersonRole_Person] FOREIGN KEY ([Person_ID]) REFERENCES [Core].[Person] ([Person_ID]);


GO
PRINT N'Creating FK_OrganizationPersonRole_Role...';


GO
ALTER TABLE [Core].[OrganizationPersonRole]
    ADD CONSTRAINT [FK_OrganizationPersonRole_Role] FOREIGN KEY ([Role_ID]) REFERENCES [Core].[Role] ([RoleID]);


GO
PRINT N'Creating FK_Organization_ActiveType...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [FK_Organization_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Organization_Organization...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [FK_Organization_Organization] FOREIGN KEY ([ParentOrganization_ID]) REFERENCES [Core].[Organization] ([Organization_ID]);


GO
PRINT N'Creating FK_Organization_OrganizationType...';


GO
ALTER TABLE [Core].[Organization]
    ADD CONSTRAINT [FK_Organization_OrganizationType] FOREIGN KEY ([OrganizationType_ID]) REFERENCES [Core].[OrganizationType] ([OrganizationType_ID]);


GO
PRINT N'Creating FK_Person_ActiveType...';


GO
ALTER TABLE [Core].[Person]
    ADD CONSTRAINT [FK_Person_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_LocationType_ActiveType...';


GO
ALTER TABLE [Core].[LocationType]
    ADD CONSTRAINT [FK_LocationType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_StatusType_ActiveType...';


GO
ALTER TABLE [Core].[StatusType]
    ADD CONSTRAINT [FK_StatusType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Framework_Indicator_ActiveType...';


GO
ALTER TABLE [disagg].[Framework_Indicator]
    ADD CONSTRAINT [FK_Framework_Indicator_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Framework_Indicator_Indicator...';


GO
ALTER TABLE [disagg].[Framework_Indicator]
    ADD CONSTRAINT [FK_Framework_Indicator_Indicator] FOREIGN KEY ([IndicatorID]) REFERENCES [app].[Indicator] ([IndicatorID]);


GO
PRINT N'Creating FK_StrategicElement_ActiveType...';


GO
ALTER TABLE [disagg].[StrategicElement]
    ADD CONSTRAINT [FK_StrategicElement_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_ResultArea_ActiveType...';


GO
ALTER TABLE [disagg].[ResultArea]
    ADD CONSTRAINT [FK_ResultArea_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Project_ResultArea_ActiveType...';


GO
ALTER TABLE [disagg].[Project_ResultArea]
    ADD CONSTRAINT [FK_Project_ResultArea_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Project_ResultArea_Project...';


GO
ALTER TABLE [disagg].[Project_ResultArea]
    ADD CONSTRAINT [FK_Project_ResultArea_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_Institution_ActiveType...';


GO
ALTER TABLE [disagg].[Institution]
    ADD CONSTRAINT [FK_Institution_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Group_ActiveType...';


GO
ALTER TABLE [disagg].[Group]
    ADD CONSTRAINT [FK_Group_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Donor_ActiveType...';


GO
ALTER TABLE [disagg].[Donor]
    ADD CONSTRAINT [FK_Donor_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_CommunityType_ActiveType...';


GO
ALTER TABLE [disagg].[CommunityType]
    ADD CONSTRAINT [FK_CommunityType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Age_ActiveType...';


GO
ALTER TABLE [disagg].[Age]
    ADD CONSTRAINT [FK_Age_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_AgeBand_Age...';


GO
ALTER TABLE [disagg].[AgeBand]
    ADD CONSTRAINT [FK_AgeBand_Age] FOREIGN KEY ([AgeBandMin_ID]) REFERENCES [disagg].[Age] ([Age_ID]);


GO
PRINT N'Creating FK_AgeBand_Age1...';


GO
ALTER TABLE [disagg].[AgeBand]
    ADD CONSTRAINT [FK_AgeBand_Age1] FOREIGN KEY ([AgeBandMax_ID]) REFERENCES [disagg].[Age] ([Age_ID]);


GO
PRINT N'Creating FK_AgeBand_Project...';


GO
ALTER TABLE [disagg].[AgeBand]
    ADD CONSTRAINT [FK_AgeBand_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_Framework_ActiveType...';


GO
ALTER TABLE [disagg].[Framework]
    ADD CONSTRAINT [FK_Framework_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Framework_Organization...';


GO
ALTER TABLE [disagg].[Framework]
    ADD CONSTRAINT [FK_Framework_Organization] FOREIGN KEY ([SourceOrganizationID]) REFERENCES [Core].[Organization] ([Organization_ID]);


GO
PRINT N'Creating FK_Framework_Project_ActiveType...';


GO
ALTER TABLE [disagg].[Framework_Project]
    ADD CONSTRAINT [FK_Framework_Project_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Framework_Project_Framework...';


GO
ALTER TABLE [disagg].[Framework_Project]
    ADD CONSTRAINT [FK_Framework_Project_Framework] FOREIGN KEY ([Framework_ID]) REFERENCES [disagg].[Framework] ([Framework_ID]);


GO
PRINT N'Creating FK_Framework_Project_Project...';


GO
ALTER TABLE [disagg].[Framework_Project]
    ADD CONSTRAINT [FK_Framework_Project_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_Gender_ActiveType...';


GO
ALTER TABLE [disagg].[Gender]
    ADD CONSTRAINT [FK_Gender_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_RollupType_ActiveType...';


GO
ALTER TABLE [forms].[RollupType]
    ADD CONSTRAINT [FK_RollupType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Question_Indicator_Rollup_ActiveType...';


GO
ALTER TABLE [forms].[Question_Indicator_Rollup]
    ADD CONSTRAINT [FK_Question_Indicator_Rollup_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Question_Indicator_Rollup_PotentialQuestion_Indicator_Rollup...';


GO
ALTER TABLE [forms].[Question_Indicator_Rollup]
    ADD CONSTRAINT [FK_Question_Indicator_Rollup_PotentialQuestion_Indicator_Rollup] FOREIGN KEY ([Indicator_ID]) REFERENCES [app].[Indicator] ([IndicatorID]);


GO
PRINT N'Creating FK_Question_Indicator_Rollup_Question...';


GO
ALTER TABLE [forms].[Question_Indicator_Rollup]
    ADD CONSTRAINT [FK_Question_Indicator_Rollup_Question] FOREIGN KEY ([Question_ID]) REFERENCES [forms].[Question] ([Question_ID]);


GO
PRINT N'Creating FK_Event_Indicator_Rollup_ActiveType...';


GO
ALTER TABLE [forms].[Event_Indicator_Rollup]
    ADD CONSTRAINT [FK_Event_Indicator_Rollup_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Event_Indicator_Rollup_Event...';


GO
ALTER TABLE [forms].[Event_Indicator_Rollup]
    ADD CONSTRAINT [FK_Event_Indicator_Rollup_Event] FOREIGN KEY ([Event_ID]) REFERENCES [forms].[Event] ([Event_ID]);


GO
PRINT N'Creating FK_Event_Indicator_Rollup_PotentialEvent_Indicator_Rollup...';


GO
ALTER TABLE [forms].[Event_Indicator_Rollup]
    ADD CONSTRAINT [FK_Event_Indicator_Rollup_PotentialEvent_Indicator_Rollup] FOREIGN KEY ([Indicator_ID]) REFERENCES [app].[Indicator] ([IndicatorID]);


GO
PRINT N'Creating FK_Event_ActiveType...';


GO
ALTER TABLE [forms].[Event]
    ADD CONSTRAINT [FK_Event_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Event_Institution...';


GO
ALTER TABLE [forms].[Event]
    ADD CONSTRAINT [FK_Event_Institution] FOREIGN KEY ([TrainingInstitution_ID]) REFERENCES [disagg].[Institution] ([Institution_ID]);


GO
PRINT N'Creating FK_Event_Location...';


GO
ALTER TABLE [forms].[Event]
    ADD CONSTRAINT [FK_Event_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_Event_Project...';


GO
ALTER TABLE [forms].[Event]
    ADD CONSTRAINT [FK_Event_Project] FOREIGN KEY ([Project_ID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_EventRegister_ActiveType...';


GO
ALTER TABLE [forms].[EventRegister]
    ADD CONSTRAINT [FK_EventRegister_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_EventRegister_Age1...';


GO
ALTER TABLE [forms].[EventRegister]
    ADD CONSTRAINT [FK_EventRegister_Age1] FOREIGN KEY ([Age_ID]) REFERENCES [disagg].[Age] ([Age_ID]);


GO
PRINT N'Creating FK_EventRegister_Event...';


GO
ALTER TABLE [forms].[EventRegister]
    ADD CONSTRAINT [FK_EventRegister_Event] FOREIGN KEY ([Event_ID]) REFERENCES [forms].[Event] ([Event_ID]);


GO
PRINT N'Creating FK_EventRegister_Gender...';


GO
ALTER TABLE [forms].[EventRegister]
    ADD CONSTRAINT [FK_EventRegister_Gender] FOREIGN KEY ([Gender_ID]) REFERENCES [disagg].[Gender] ([Gender_ID]);


GO
PRINT N'Creating FK_Form_ActiveType...';


GO
ALTER TABLE [forms].[Form]
    ADD CONSTRAINT [FK_Form_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Form_Project...';


GO
ALTER TABLE [forms].[Form]
    ADD CONSTRAINT [FK_Form_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_QuestionType_ActiveType...';


GO
ALTER TABLE [forms].[QuestionType]
    ADD CONSTRAINT [FK_QuestionType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Category_ActiveType...';


GO
ALTER TABLE [forms].[Category]
    ADD CONSTRAINT [FK_Category_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Category_Form...';


GO
ALTER TABLE [forms].[Category]
    ADD CONSTRAINT [FK_Category_Form] FOREIGN KEY ([Form_ID]) REFERENCES [forms].[Form] ([Form_ID]);


GO
PRINT N'Creating FK_FormResponse_ActiveType...';


GO
ALTER TABLE [forms].[FormResponse]
    ADD CONSTRAINT [FK_FormResponse_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_FormResponse_Form...';


GO
ALTER TABLE [forms].[FormResponse]
    ADD CONSTRAINT [FK_FormResponse_Form] FOREIGN KEY ([Form_ID]) REFERENCES [forms].[Form] ([Form_ID]);


GO
PRINT N'Creating FK_PotentialResponse_ActiveType...';


GO
ALTER TABLE [forms].[PotentialResponse]
    ADD CONSTRAINT [FK_PotentialResponse_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_PotentialResponse_Question...';


GO
ALTER TABLE [forms].[PotentialResponse]
    ADD CONSTRAINT [FK_PotentialResponse_Question] FOREIGN KEY ([Question_ID]) REFERENCES [forms].[Question] ([Question_ID]);


GO
PRINT N'Creating FK_Question_ActiveType...';


GO
ALTER TABLE [forms].[Question]
    ADD CONSTRAINT [FK_Question_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Question_Category...';


GO
ALTER TABLE [forms].[Question]
    ADD CONSTRAINT [FK_Question_Category] FOREIGN KEY ([Category_ID]) REFERENCES [forms].[Category] ([Category_ID]);


GO
PRINT N'Creating FK_Question_PotentialResponse...';


GO
ALTER TABLE [forms].[Question]
    ADD CONSTRAINT [FK_Question_PotentialResponse] FOREIGN KEY ([MultipleChoiceResponseID]) REFERENCES [forms].[PotentialResponse] ([PotentialResponse_ID]);


GO
PRINT N'Creating FK_Question_QuestionType...';


GO
ALTER TABLE [forms].[Question]
    ADD CONSTRAINT [FK_Question_QuestionType] FOREIGN KEY ([QuestionType_ID]) REFERENCES [forms].[QuestionType] ([QuestionType_ID]);


GO
PRINT N'Creating FK_MilestoneValues_ActiveType...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_MilestoneValues_AgeBand...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_AgeBand] FOREIGN KEY ([AgeBand_ID]) REFERENCES [disagg].[AgeBand] ([AgeBand_ID]);


GO
PRINT N'Creating FK_MilestoneValues_CommunityType...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_CommunityType] FOREIGN KEY ([CommunityType_ID]) REFERENCES [disagg].[CommunityType] ([CommunityType_ID]);


GO
PRINT N'Creating FK_MilestoneValues_DataVersion...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_DataVersion] FOREIGN KEY ([DataVersion_ID]) REFERENCES [Core].[DataVersion] ([DataVersion_ID]);


GO
PRINT N'Creating FK_MilestoneValues_Donor...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_Donor] FOREIGN KEY ([Donor_ID]) REFERENCES [disagg].[Donor] ([Donor_ID]);


GO
PRINT N'Creating FK_MilestoneValues_Framework...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_Framework] FOREIGN KEY ([Framework_ID]) REFERENCES [disagg].[Framework] ([Framework_ID]);


GO
PRINT N'Creating FK_MilestoneValues_Gender...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_Gender] FOREIGN KEY ([Gender_ID]) REFERENCES [disagg].[Gender] ([Gender_ID]);


GO
PRINT N'Creating FK_MilestoneValues_Group...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_Group] FOREIGN KEY ([Group_ID]) REFERENCES [disagg].[Group] ([Group_ID]);


GO
PRINT N'Creating FK_MilestoneValues_Institution...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_Institution] FOREIGN KEY ([Institution_ID]) REFERENCES [disagg].[Institution] ([Institution_ID]);


GO
PRINT N'Creating FK_MilestoneValues_Location...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_MilestoneValues_Milestone...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_Milestone] FOREIGN KEY ([Milestone_ID]) REFERENCES [app].[Milestone] ([MilestoneID]);


GO
PRINT N'Creating FK_MilestoneValues_Organization...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_Organization] FOREIGN KEY ([Organization_ID]) REFERENCES [Core].[Organization] ([Organization_ID]);


GO
PRINT N'Creating FK_MilestoneValues_ReportingPeriod...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_ReportingPeriod] FOREIGN KEY ([ReportPeriodID]) REFERENCES [Core].[ReportingPeriod] ([ID]);


GO
PRINT N'Creating FK_MilestoneValues_ResultArea...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_ResultArea] FOREIGN KEY ([ResultArea_ID]) REFERENCES [disagg].[ResultArea] ([ResultArea_ID]);


GO
PRINT N'Creating FK_MilestoneValues_StrategicElement...';


GO
ALTER TABLE [RBM].[MilestoneValues]
    ADD CONSTRAINT [FK_MilestoneValues_StrategicElement] FOREIGN KEY ([StrategicElement_ID]) REFERENCES [disagg].[StrategicElement] ([StrategicElement_ID]);


GO
PRINT N'Creating FK_IndicatorValues_ActiveType...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_IndicatorValues_AgeBand...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_AgeBand] FOREIGN KEY ([AgeBand_ID]) REFERENCES [disagg].[AgeBand] ([AgeBand_ID]);


GO
PRINT N'Creating FK_IndicatorValues_CommunityType...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_CommunityType] FOREIGN KEY ([CommunityType_ID]) REFERENCES [disagg].[CommunityType] ([CommunityType_ID]);


GO
PRINT N'Creating FK_IndicatorValues_DataVersion...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_DataVersion] FOREIGN KEY ([DataVersion_ID]) REFERENCES [Core].[DataVersion] ([DataVersion_ID]);


GO
PRINT N'Creating FK_IndicatorValues_Donor...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_Donor] FOREIGN KEY ([Donor_ID]) REFERENCES [disagg].[Donor] ([Donor_ID]);


GO
PRINT N'Creating FK_IndicatorValues_Framework...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_Framework] FOREIGN KEY ([Framework_ID]) REFERENCES [disagg].[Framework] ([Framework_ID]);


GO
PRINT N'Creating FK_IndicatorValues_Gender...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_Gender] FOREIGN KEY ([Gender_ID]) REFERENCES [disagg].[Gender] ([Gender_ID]);


GO
PRINT N'Creating FK_IndicatorValues_Group...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_Group] FOREIGN KEY ([Group_ID]) REFERENCES [disagg].[Group] ([Group_ID]);


GO
PRINT N'Creating FK_IndicatorValues_Indicator1...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_Indicator1] FOREIGN KEY ([Indicator_ID]) REFERENCES [app].[Indicator] ([IndicatorID]);


GO
PRINT N'Creating FK_IndicatorValues_Institution...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_Institution] FOREIGN KEY ([Institution_ID]) REFERENCES [disagg].[Institution] ([Institution_ID]);


GO
PRINT N'Creating FK_IndicatorValues_Location...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_IndicatorValues_Organization...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_Organization] FOREIGN KEY ([Organization_ID]) REFERENCES [Core].[Organization] ([Organization_ID]);


GO
PRINT N'Creating FK_IndicatorValues_ReportingPeriod...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_ReportingPeriod] FOREIGN KEY ([ReportPeriodID]) REFERENCES [Core].[ReportingPeriod] ([ID]);


GO
PRINT N'Creating FK_IndicatorValues_ResultArea...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_ResultArea] FOREIGN KEY ([ResultArea_ID]) REFERENCES [disagg].[ResultArea] ([ResultArea_ID]);


GO
PRINT N'Creating FK_IndicatorValues_StrategicElement...';


GO
ALTER TABLE [RBM].[IndicatorValues]
    ADD CONSTRAINT [FK_IndicatorValues_StrategicElement] FOREIGN KEY ([StrategicElement_ID]) REFERENCES [disagg].[StrategicElement] ([StrategicElement_ID]);


GO
PRINT N'Creating FK_StatusValues_ActiveType...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [FK_StatusValues_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_StatusValues_Activity...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [FK_StatusValues_Activity] FOREIGN KEY ([Activity_ID]) REFERENCES [app].[Activity] ([Activity_ID]);


GO
PRINT N'Creating FK_StatusValues_DataVersion...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [FK_StatusValues_DataVersion] FOREIGN KEY ([DataVersionID]) REFERENCES [Core].[DataVersion] ([DataVersion_ID]);


GO
PRINT N'Creating FK_StatusValues_Location...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [FK_StatusValues_Location] FOREIGN KEY ([LocationID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_StatusValues_Outcome...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [FK_StatusValues_Outcome] FOREIGN KEY ([Outcome_ID]) REFERENCES [app].[Outcome] ([Outcome_ID]);


GO
PRINT N'Creating FK_StatusValues_Output...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [FK_StatusValues_Output] FOREIGN KEY ([Output_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_StatusValues_Project...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [FK_StatusValues_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_StatusValues_ReportingPeriod...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [FK_StatusValues_ReportingPeriod] FOREIGN KEY ([ReportingPeriodID]) REFERENCES [Core].[ReportingPeriod] ([ID]);


GO
PRINT N'Creating FK_StatusValues_StatusType...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [FK_StatusValues_StatusType] FOREIGN KEY ([StatusTypeID]) REFERENCES [Core].[StatusType] ([ID]);


GO
PRINT N'Creating FK_StatusValues_SubOutput...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [FK_StatusValues_SubOutput] FOREIGN KEY ([SubOutput_ID]) REFERENCES [app].[SubOutput] ([SubOutput_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_ActiveType...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Activity...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Activity] FOREIGN KEY ([Activity_ID]) REFERENCES [app].[Activity] ([Activity_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_AgeBand...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_AgeBand] FOREIGN KEY ([AgeBand_ID]) REFERENCES [disagg].[AgeBand] ([AgeBand_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_CommunityType...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_CommunityType] FOREIGN KEY ([CommunityType_ID]) REFERENCES [disagg].[CommunityType] ([CommunityType_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_DataVersion...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_DataVersion] FOREIGN KEY ([DataVersion_ID]) REFERENCES [Core].[DataVersion] ([DataVersion_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Donor...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Donor] FOREIGN KEY ([Donor_ID]) REFERENCES [disagg].[Donor] ([Donor_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Framework...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Framework] FOREIGN KEY ([Framework_ID]) REFERENCES [disagg].[Framework] ([Framework_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Framework_Indicator...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Framework_Indicator] FOREIGN KEY ([Framework_Indicator_ID]) REFERENCES [disagg].[Framework_Indicator] ([Framework_Indicator_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Gender...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Gender] FOREIGN KEY ([Gender_ID]) REFERENCES [disagg].[Gender] ([Gender_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Group...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Group] FOREIGN KEY ([Group_ID]) REFERENCES [disagg].[Group] ([Group_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Institution...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Institution] FOREIGN KEY ([Institution_ID]) REFERENCES [disagg].[Institution] ([Institution_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Location...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Outcome...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Outcome] FOREIGN KEY ([Outcome_ID]) REFERENCES [app].[Outcome] ([Outcome_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Output...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Output] FOREIGN KEY ([Output_ID]) REFERENCES [app].[Output] ([Output_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Programme...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Programme] FOREIGN KEY ([Programme_ID]) REFERENCES [app].[Programme] ([Programme_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_Project...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_PeopleReachedValues_ReportingPeriod...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_ReportingPeriod] FOREIGN KEY ([ReportingPeriod_ID]) REFERENCES [Core].[ReportingPeriod] ([ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_ResultArea...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_ResultArea] FOREIGN KEY ([ResultArea_ID]) REFERENCES [disagg].[ResultArea] ([ResultArea_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_StatusType...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_StatusType] FOREIGN KEY ([StatusType_ID]) REFERENCES [Core].[StatusType] ([ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_StrategicElement...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_StrategicElement] FOREIGN KEY ([StrategicElement_ID]) REFERENCES [disagg].[StrategicElement] ([StrategicElement_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_SubOutput...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [FK_PeopleReachedValues_SubOutput] FOREIGN KEY ([SubOutput_ID]) REFERENCES [app].[SubOutput] ([SubOutput_ID]);


GO
PRINT N'Creating FK_CustomReport_ActiveType...';


GO
ALTER TABLE [rpt].[CustomReport]
    ADD CONSTRAINT [FK_CustomReport_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_CustomReport_Indicator_ActiveType...';


GO
ALTER TABLE [rpt].[CustomReport_Indicator]
    ADD CONSTRAINT [FK_CustomReport_Indicator_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_CustomReport_Indicator_CustomReport...';


GO
ALTER TABLE [rpt].[CustomReport_Indicator]
    ADD CONSTRAINT [FK_CustomReport_Indicator_CustomReport] FOREIGN KEY ([CustomReport_ID]) REFERENCES [rpt].[CustomReport] ([CustomReport_ID]);


GO
PRINT N'Creating FK_CustomReport_Indicator_Indicator...';


GO
ALTER TABLE [rpt].[CustomReport_Indicator]
    ADD CONSTRAINT [FK_CustomReport_Indicator_Indicator] FOREIGN KEY ([IndicatorID]) REFERENCES [app].[Indicator] ([IndicatorID]);


GO
PRINT N'Creating FK_CustomReport_Project_ActiveType...';


GO
ALTER TABLE [rpt].[CustomReport_Project]
    ADD CONSTRAINT [FK_CustomReport_Project_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_CustomReport_Project_CustomReport...';


GO
ALTER TABLE [rpt].[CustomReport_Project]
    ADD CONSTRAINT [FK_CustomReport_Project_CustomReport] FOREIGN KEY ([CustomReport_ID]) REFERENCES [rpt].[CustomReport] ([CustomReport_ID]);


GO
PRINT N'Creating FK_CustomReport_Project_Project...';


GO
ALTER TABLE [rpt].[CustomReport_Project]
    ADD CONSTRAINT [FK_CustomReport_Project_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_CustomReportType_ActiveType...';


GO
ALTER TABLE [rpt].[CustomReportType]
    ADD CONSTRAINT [FK_CustomReportType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_DonorReport_ActiveType...';


GO
ALTER TABLE [rpt].[DonorReport]
    ADD CONSTRAINT [FK_DonorReport_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_DonorReport_Indicator_ActiveType...';


GO
ALTER TABLE [rpt].[DonorReport_Indicator]
    ADD CONSTRAINT [FK_DonorReport_Indicator_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_DonorReport_Indicator_DonorReport...';


GO
ALTER TABLE [rpt].[DonorReport_Indicator]
    ADD CONSTRAINT [FK_DonorReport_Indicator_DonorReport] FOREIGN KEY ([DonorReportID]) REFERENCES [rpt].[DonorReport] ([DonorReport_ID]);


GO
PRINT N'Creating FK_DonorReport_Indicator_Indicator...';


GO
ALTER TABLE [rpt].[DonorReport_Indicator]
    ADD CONSTRAINT [FK_DonorReport_Indicator_Indicator] FOREIGN KEY ([IndicatorID]) REFERENCES [app].[Indicator] ([IndicatorID]);


GO
PRINT N'Creating FK_DonorReport_Project_ActiveType...';


GO
ALTER TABLE [rpt].[DonorReport_Project]
    ADD CONSTRAINT [FK_DonorReport_Project_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_DonorReport_Project_DonorReport...';


GO
ALTER TABLE [rpt].[DonorReport_Project]
    ADD CONSTRAINT [FK_DonorReport_Project_DonorReport] FOREIGN KEY ([DonorReportID]) REFERENCES [rpt].[DonorReport] ([DonorReport_ID]);


GO
PRINT N'Creating FK_DonorReport_Project_Project...';


GO
ALTER TABLE [rpt].[DonorReport_Project]
    ADD CONSTRAINT [FK_DonorReport_Project_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating CK_Indicator...';


GO
ALTER TABLE [app].[Indicator]
    ADD CONSTRAINT [CK_Indicator] CHECK (((((((case when [Output_ID] IS NOT NULL then (1) else (0) end+case when [Outcome_ID] IS NOT NULL then (1) else (0) end)+case when [SubOutput_ID] IS NOT NULL then (1) else (0) end)+case when [Programme_ID] IS NOT NULL then (1) else (0) end)+case when [Sector_ID] IS NOT NULL then (1) else (0) end)+case when [SubSector_ID] IS NOT NULL then (1) else (0) end)+case when [ProjectID] IS NOT NULL then (1) else (0) end)=(1));


GO
PRINT N'Creating CK_Project...';


GO
ALTER TABLE [app].[Project]
    ADD CONSTRAINT [CK_Project] CHECK ((((case when [Outcome_ID] IS NOT NULL then (1) else (0) end+case when [Programme_ID] IS NOT NULL then (1) else (0) end)+case when [Sector_ID] IS NOT NULL then (1) else (0) end)+case when [SubSector_ID] IS NOT NULL then (1) else (0) end)=(1));


GO
PRINT N'Creating enforce_srid_geometry_DimMunicipalityGEOM...';


GO
ALTER TABLE [Core].[DimMunicipalityGEOM]
    ADD CONSTRAINT [enforce_srid_geometry_DimMunicipalityGEOM] CHECK ([geom].[STSrid]=(4326));


GO
PRINT N'Creating CK_ENFORCE_SINGLE_Parent_Link_StatusValues...';


GO
ALTER TABLE [RBM].[StatusValues]
    ADD CONSTRAINT [CK_ENFORCE_SINGLE_Parent_Link_StatusValues] CHECK ((((((case when [StatusValues].[ProjectID] IS NOT NULL then (1) else (0) end+case when [StatusValues].[Programme_ID] IS NOT NULL then (1) else (0) end)+case when [StatusValues].[Output_ID] IS NOT NULL then (1) else (0) end)+case when [StatusValues].[Outcome_ID] IS NOT NULL then (1) else (0) end)+case when [StatusValues].[Activity_ID] IS NOT NULL then (1) else (0) end)+case when [StatusValues].[SubOutput_ID] IS NOT NULL then (1) else (0) end)=(1));


GO
PRINT N'Creating CK_PeopleReachedValues...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD CONSTRAINT [CK_PeopleReachedValues] CHECK ((((((case when [PeopleReachedValues].[ProjectID] IS NOT NULL then (1) else (0) end+case when [PeopleReachedValues].[Output_ID] IS NOT NULL then (1) else (0) end)+case when [PeopleReachedValues].[Outcome_ID] IS NOT NULL then (1) else (0) end)+case when [PeopleReachedValues].[Activity_ID] IS NOT NULL then (1) else (0) end)+case when [PeopleReachedValues].[SubOutput_ID] IS NOT NULL then (1) else (0) end)+case when [PeopleReachedValues].[Programme_ID] IS NOT NULL then (1) else (0) end)=(1));


GO
PRINT N'Creating [dbo].[fn_ConcatenateIndicator_LocationTypeNames]...';


GO

-- =============================================
-- Author:		Mark Stacey
-- Create date: 
-- Description:	
-- =============================================
CREATE FUNCTION  [dbo].[fn_ConcatenateIndicator_LocationTypeNames] 
(
	-- Add the parameters for the function here
	@Indicator_ID int
)
RETURNS varchar(8000)
AS
BEGIN
	
	DECLARE @Result varchar(8000)
	Set @Result = ''
	SELECT @Result = @Result + CHAR(10) + CHAR(13) + src.Name
	FROM (SELECT 
	LT.Description name
	FROM app.Indicator I
	inner join RBM.IndicatorValues IV
	on I.IndicatorID = IV.Indicator_ID
	inner join Core.Location L
	on IV.Location_ID = L.Location_ID
	inner join Core.LocationType LT
	on L.LocationType_ID = LT.LocationType_ID
	WHERE i.IndicatorID = @Indicator_ID
	GROUP BY LT.Description) src
RETURN @Result
END
GO
PRINT N'Creating [dbo].[fn_StripMDXKey]...';


GO

-- =============================================
-- Author:		Mark Stacey
-- Create date: 2011/07/31
-- Description:	
-- =============================================
CREATE FUNCTION [dbo].[fn_StripMDXKey] 
(
	-- Add the parameters for the function here
	@MDXValue varchar(500)
)
RETURNS varchar(500)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @Result varchar(500)
	
	IF ISNUMERIC(@MDXValue) =1  set @Result = @MDXValue 
	
	else 
	BEGIN
	set @MDXValue = REPLACE(@MDXValue, '|','&')
SET @Result = 
 CASE WHEN CHARINDEX('&',@MDXValue) > 0 THEN REPLACE(REVERSE(LEFT(reverse(@MDXValue)
		, 
		CHARINDEX('&',reverse(@MDXValue)) -2
		
		)),']','')
		
		WHEN CHARINDEX('[', @MDXValue) > 0 THEN
		REPLACE(RIGHT (@MDXValue
,
CHARINDEX('[',REVERSE(@MDXValue))-1
), ']','')
		
ELSE CAST( @MDXValue  as varchar(255)) END
END
	-- Return the result of the function
	RETURN @Result

END
GO
PRINT N'Creating [app].[DimSubOutput]...';


GO

CREATE VIEW 
 [app].[DimSubOutput]
as
/****** Script for SelectTopNRows command from SSMS  ******/
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT  [SubOutput_ID]
            ,ShortName + ' : ' + left(LongName,80) as ShortName
      ,Left(LongName, 255) as LongName
      ,left(ShortName + ' : ' + left(LongName,80),255) as FullName
      ,Left(TextDescription,255) as TextDescription
      ,[BusinessKey]
      ,[Output_ID]
      --,[Target]
      ,[Code]

  FROM [app].[SubOutput]
GO
PRINT N'Creating [app].[DimOutput]...';


GO
CREATE VIEW 
 [app].[DimOutput]
as
/****** Script for SelectTopNRows command from SSMS  ******/
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT  [Output_ID]
            ,ShortName + ' : ' + left(LongName,80) as ShortName
      ,Left(LongName, 255) as LongName
      ,left(ShortName + ' : ' + left(LongName,80),255) as FullName
      ,Left(TextDescription,255) as TextDescription
      ,[BusinessKey]
      ,[Outcome_ID]
     -- ,[Target]
      ,[Code]

  FROM [app].[Output]
GO
PRINT N'Creating [app].[DimOutcome]...';


GO

CREATE VIEW [app].[DimOutcome]
as
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT  [Outcome_ID] as [Outcome_ID]
      ,[Code]
            ,ShortName + ' : ' + left(LongName,80) as ShortName
      ,Left(LongName, 255) as LongName
      ,left(ShortName + ' : ' + LongName,255) as FullName
      ,Left(TextDescription,255) as TextDescription
      ,[BusinessKey]
      --,[Target]

  FROM app.[Outcome]
GO
PRINT N'Creating [app].[DimActivity]...';


GO
CREATE view [app].[DimActivity] as
/****** Script for SelectTopNRows command from SSMS  ******/
SELECT  [Activity_ID] as Activity_ID
            ,ShortName + ' : ' + left(LongName,80) as ShortName
      ,Left(LongName, 255) as LongName
      ,left(Code + ' : ' + LongName,255) as FullName
      ,Left(TextDescription,255) as TextDescription
      --,[SubOutput_ID]
      --,[BusinessKey]
      --,[Target]
      ,[Code]
      --,[ActivityType_ID]

  FROM [app].[Activity]
GO
PRINT N'Creating [Core].[ReportCycle]...';


GO

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW [Core].[ReportCycle]
AS
SELECT        CASE WHEN MonthNumber BETWEEN 3 AND 5 THEN 1 WHEN MonthNumber BETWEEN 6 AND 8 THEN 2 WHEN MonthNumber BETWEEN 9 AND 
                         11 THEN 3 WHEN MonthNumber IN (12, 1, 2) THEN 4 END AS ReportingPeriod, DateID AS StartDateID, DATEPART(year, DATEADD(Day, - 1, DATEADD(month, 
                         3, Date))) * 10000 + DATEPART(month, DATEADD(Day, - 1, DATEADD(month, 3, Date))) * 100 + DATEPART(Day, DATEADD(Day, - 1, DATEADD(month, 3, Date))) 
                         AS EndDateID, Date AS FirstCycleDate, DATEADD(Day, - 1, DATEADD(month, 3, Date)) AS LastCycleDate, YearName, YearNumber
FROM            Core.DimDate
WHERE        (Day = 1) AND (MonthNumber IN (3, 6, 9, 12))
GO
PRINT N'Creating [mm].[ALL_OutcomeMenuCategory]...';


GO
CREATE VIEW [mm].[ALL_OutcomeMenuCategory] 
AS 
  SELECT Title = 'Outcome Pages', 
         Link = '', 
         ID = 10000, 
         [Outcome_ID], 
         [OutcomeSiteName] 
  FROM   [app].[Outcome] 
  WHERE Active = 1
  UNION ALL 
  SELECT Title = do.ShortName, 
         Link = '', 
         1 - do.Output_ID + 5000 AS ID, 
         do.Outcome_ID, 
         OC.[OutcomeSiteName] 
  FROM   [app].[Output] do 
         LEFT JOIN [app].[Outcome] AS OC 
                ON do.Outcome_ID = oc.[Outcome_ID] 
				WHERE do.Active = 1 AND oc.Active = 1
  UNION ALL 
  SELECT Title = 'Projects', 
         Link = '', 
         ID = 30000, 
         [Outcome_ID], 
         [OutcomeSiteName] 
  FROM   [app].[Outcome] 
  WHERE Active = 1
GO
PRINT N'Creating [mm].[ALL_ProgrammeMenuCategory]...';


GO

CREATE VIEW [mm].[ALL_ProgrammeMenuCategory] 
AS 
  SELECT Title = 'Programme Pages', 
         Link = '', 
         ID = 10000, 
         [Programme_ID], 
         [ProgrammeSiteName] [SiteName] 
  FROM   [app].[Programme] 
  WHERE Active = 1
  UNION ALL 
  SELECT Title = do.ShortName, 
         Link = '', 
         1 - do.Sector_ID + 5000 AS ID, 
         do.Programme_ID, 
         OC.[ProgrammeSiteName] SiteName
  FROM   [app].[Sector] do 
         LEFT JOIN [app].[Programme] AS OC 
                ON do.Programme_ID = oc.[Programme_ID] 
				WHERE do.Active = 1 AND oc.Active = 1
  UNION ALL 
  SELECT Title = 'Projects', 
         Link = '', 
         ID = 30000, 
         [Programme_ID], 
         [ProgrammeSiteName] 
  FROM   [app].[Programme] 
  WHERE Active = 1
GO
PRINT N'Creating [mm].[ALL_ProgrammeMenuGroup]...';


GO






CREATE VIEW [mm].[ALL_ProgrammeMenuGroup]
AS
    SELECT TOP ( 10000 )
            [t].[Title] ,
            [t].[Link] ,
            [t].[Parent] ,
            [t].[ID] ,
            [t].[Programme_ID]
    FROM    ( SELECT    dso.Code AS orderBy1 ,
                        1 AS orderby2 ,
                        dso.ShortName AS Title ,
                        '/' + oc.[ProgrammeSiteName]
                        + '/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode='
                        + '[Sub Sector].[Sub Sector].%26['
                        + CAST(dso.SubSector_ID AS VARCHAR(8)) + ']' AS Link ,
                        ( SELECT    [mm].[ALL_ProgrammeMenuCategory].[ID]
                          FROM      mm.ALL_ProgrammeMenuCategory
                          WHERE     ( [mm].[ALL_ProgrammeMenuCategory].[Title] = do.ShortName )
                                    AND [mm].[ALL_ProgrammeMenuCategory].[Programme_ID] = do.Programme_ID
                        ) AS Parent ,
                        1 - dso.SubSector_ID + 5000 AS ID ,
                        do.Programme_ID
              FROM      [app].[SubSector] AS dso
                        INNER JOIN app.Sector AS do ON dso.Sector_ID = do.Sector_ID
                        INNER JOIN [app].[Programme] AS OC ON do.Programme_ID = oc.Programme_ID
              WHERE     dso.Active = 1
                        AND do.Active = 1
                        AND oc.Active = 1
			UNION ALL
              SELECT    do.ShortName AS orderBy1 ,
                        1 AS orderby2 ,
                        'Indicators: ' + do.ShortName + ' ' AS Title ,
                        '/' + [dom].[ProgrammeSiteName]
                        + '/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode='
                        + '[Sector].[Sector].%26['
                        + CAST(do.Sector_ID AS VARCHAR(8)) + ']' AS Link ,
                        ( SELECT    [mm].[ALL_ProgrammeMenuCategory].[ID]
                          FROM      mm.ALL_ProgrammeMenuCategory
                          WHERE     ( [mm].[ALL_ProgrammeMenuCategory].[Title] = do.ShortName )
                                    AND [mm].[ALL_ProgrammeMenuCategory].[Programme_ID] = do.Programme_ID
                        ) AS Parent ,
                        100 + do.Sector_ID AS ID ,
                        dom.Programme_ID
              FROM      app.Sector AS do
                        INNER JOIN [app].[Programme] AS dom ON do.Programme_ID = dom.Programme_ID
              WHERE     do.Active = 1
                        AND dom.Active = 1
              UNION ALL
			 SELECT    '10002' AS OrderBy1 ,
                        0 AS OrderBy2 ,
                        'Programme Level Status' AS Title ,
                        '/' + [O].[ProgrammeSiteName]
                        + '/Dashboards/Template%20Pages/Programme%20Status%20Report.aspx?qsProgramme=' + substring([O].[ProgrammeSiteName],8,1) AS Link ,
                        ( SELECT    [OMC_2].[ID]
                          FROM      mm.ALL_ProgrammeMenuCategory AS OMC_2
                          WHERE     ( [OMC_2].[Title] = 'Programme Pages' )
                                    AND OMC_2.Programme_ID = O.Programme_ID
                        ) AS Parent ,
                        20 AS ID ,
                        [O].[Programme_ID]
              FROM      [app].[Programme] O
              WHERE     [O].[Active] = 1

              UNION ALL
              SELECT    '10003' AS OrderBy1 ,
                        0 AS OrderBy2 ,
                        'Programme Level Indicators' AS Title ,
                        '/' + [O].[ProgrammeSiteName]
                        + '/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode=[Programme].[Programme].%26['
                        + CAST(O.Programme_ID AS VARCHAR(8)) + ']' AS Link ,
                        ( SELECT    [OMC_7].[ID]
                          FROM      mm.ALL_ProgrammeMenuCategory AS OMC_7
                          WHERE     ( [OMC_7].[Title] = 'Programme Pages' )
                                    AND OMC_7.Programme_ID = O.Programme_ID
                        ) AS Parent ,
                        70 AS ID ,
                        [O].[Programme_ID]
              FROM      [app].[Programme] O
              WHERE     [O].[Active] = 1
              UNION ALL
              SELECT    '10006' AS OrderBy1 ,
                        0 AS OrderBy2 ,
                        'Programme Documents' AS Title ,
                        '/' + [O].[ProgrammeSiteName]
                        + '/Shared%20Documents/Forms/AllItems.aspx' AS Link ,
                        ( SELECT    [OMC_4].[ID]
                          FROM      mm.ALL_ProgrammeMenuCategory AS OMC_4
                          WHERE     ( [OMC_4].[Title] = 'Programme Pages' )
                                    AND OMC_4.Programme_ID = O.Programme_ID
                        ) AS Parent ,
                        40 AS ID ,
                        [O].[Programme_ID]
              FROM      [app].[Programme] O
              WHERE     [O].[Active] = 1
              UNION ALL
              SELECT    '10008' AS OrderBy1 ,
                        0 AS OrderBy2 ,
                        'Programme Contact Info' AS Title ,
                        '/' + [O].[ProgrammeSiteName]
                        + '/lists/Programme%20Contacts' AS Link ,
                        ( SELECT    [OMC_2].[ID]
                          FROM      mm.ALL_ProgrammeMenuCategory AS OMC_2
                          WHERE     ( [OMC_2].[Title] = 'Programme Pages' )
                                    AND OMC_2.Programme_ID = O.Programme_ID
                        ) AS Parent ,
                        20 AS ID ,
                        [O].[Programme_ID]
              FROM      [app].[Programme] O
              WHERE     [O].[Active] = 1
              UNION ALL
              SELECT    '10009' AS OrderBy1 ,
                        0 AS OrderBy2 ,
                        'FAQs' AS Title ,
                        '/' + [O].[ProgrammeSiteName] + '/Programme%20Wiki' AS Link ,
                        ( SELECT    [OMC_1].[ID]
                          FROM      mm.ALL_ProgrammeMenuCategory AS OMC_1
                          WHERE     ( [OMC_1].[Title] = 'Programme Pages' )
                                    AND OMC_1.Programme_ID = O.Programme_ID
                        ) AS Parent ,
                        10 AS ID ,
                        [O].[Programme_ID]
              FROM      [app].[Programme] O
              WHERE     [O].[Active] = 1

              UNION ALL
              SELECT    P.ShortName AS OrderBy1 ,
                        30000 AS OrderBy2 ,
                        P.ShortName AS Title ,
                        '/' + [O].[ProgrammeSiteName] + '/' + P.ProjectSiteName AS Link ,
                        Src.ID AS Parent ,
                        SRC.ID + P.ProjectID AS ID ,
                        [P].[Programme_ID]
              FROM      app.Project P
			  INNER JOIN [app].[Programme] O
			  ON P.Programme_ID = o.Programme_ID
                        CROSS APPLY ( SELECT    [mm].[ALL_ProgrammeMenuCategory].[ID]
                                      FROM      mm.ALL_ProgrammeMenuCategory
                                      WHERE     [mm].[ALL_ProgrammeMenuCategory].[Title] = 'Projects'
                                                AND [mm].[ALL_ProgrammeMenuCategory].[Programme_ID] = P.Programme_ID
                                    ) Src
            ) AS t
    ORDER BY [t].[orderBy1] ,
            [t].[orderby2]
GO
PRINT N'Creating [mm].[ALL_ProgrammeMenuLink]...';


GO


CREATE VIEW [mm].[ALL_ProgrammeMenuLink] 
AS 
   SELECT Title = 'Indicator Details', 
         Link = '/' + [ProgrammeSiteName] 
                + 
'/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode=' 
       + '[Sub Sector].[Sub Sector].%26[' 
       + Cast(dso.SubSector_ID AS VARCHAR(8)) + ']', 
ID = 100 * dso.SubSector_ID, 
Parent = (SELECT ID 
          FROM   [mm].[ALL_ProgrammeMenuGroup] G 
          WHERE  G.Title = dso.ShortName 
                 AND G.Programme_ID = do.Programme_ID), 
do.Programme_ID 
FROM   [app].[SubSector] dso 
INNER JOIN app.Sector do 
        ON dso.Sector_ID = do.Sector_ID 
INNER JOIN [app].[Programme] AS OC 
        ON do.Programme_ID = oc.Programme_ID 
WHERE  dso.Active = 1  AND do.Active = 1 AND oc.Active = 1
UNION ALL 
SELECT Title = 'Location Indicator Details', 
Link = '/' + [ProgrammeSiteName] 
       + 
'/Dashboards/Template%20Pages/Provincial%20Indicator%20Details%20Page.aspx?qsIndCode=' 
+ '[Sub Sector].[Sub Sector].%26[' 
+ Cast(dso.SubSector_ID AS VARCHAR(8)) + ']', 
Priority = 100 * dso.SubSector_ID, 
Parent = (SELECT ID 
   FROM   [mm].[ALL_ProgrammeMenuGroup] G 
   WHERE  G.Title = dso.ShortName 
          AND G.Programme_ID = DO.Programme_ID), 
do.Programme_ID 
FROM   [app].[SubSector] dso 
INNER JOIN app.Sector do 
        ON dso.Sector_ID = do.Sector_ID 
INNER JOIN [app].[Programme] AS OC 
        ON do.Programme_ID = oc.Programme_ID 
WHERE  dso.Active = 1 AND do.Active = 1 AND OC.Active = 1
/*UNION ALL 
SELECT Title = Da.ShortName, 
Link = '/' + [ProgrammeSiteName] 
       + 
'/Dashboards/Template%20Pages/Milestones%20Page.aspx?qsActivity='
	+ Cast(da.Activity_ID AS VARCHAR(8)) , 
Priority = 1 - da.Activity_ID + 5000, 
Parent = (SELECT SRC.ID + P.ProjectID AS ID 
          FROM   app.Project P 
                 CROSS apply (SELECT ID 
                              FROM   mm.ALL_ProgrammeMenuCategory O2MC 
                              WHERE  Title = 'Projects'
							  AND O2MC.Programme_ID = OC.Programme_ID
							  ) Src 
          WHERE  Programme_ID = dp.Programme_ID 
                 AND P.ProjectID = da.ProjectID), 
Dp.Programme_ID 
FROM   app.Activity da 
INNER JOIN app.Project dp 
        ON da.ProjectID = dp.ProjectID 
INNER JOIN [app].[Programme] AS OC 
        ON dp.Programme_ID = oc.Programme_ID 
WHERE  da.Active = 1 AND dp.Active = 1 AND oc.Active = 1
*/
GO
PRINT N'Creating [dbo].[DimIndicatorMultiLevel]...';


GO

CREATE  VIEW  [dbo].[DimIndicatorMultiLevel]
as 


      SELECT TermSetLevel1 = oc.ShortName        
      ,TermSetLevel2 = 'Indicators'
      ,TermSetLevel3 =   i.ShortName + ' : ' + left([i].[LongName],80)
      ,TermSetLevel4 = null
      ,TermSetLevel5 = null
      ,TermSetLevel6 = null
      ,TermSetLevel7 = null
      
      
      ,CodeLevel1 = oc.Code
      ,CodeLevel2 = 'Ind'
      ,CodeLevel3 =   i.Code
      ,CodeLevel4 = null
      ,CodeLevel5 = null
      ,CodeLevel6 = null
      ,CodeLevel7 = null
      
      ,NameLevel1 = oc.ShortName 
      ,NameLevel2 = 'Indicators'
      ,NameLevel3 =   i.ShortName
      ,NameLevel4 = null
      ,NameLevel5 = null
      ,NameLevel6 = null
      ,NameLevel7 = null
      
      ,LongNameLevel1 = oc.LongName 
      ,LongNameLevel2 = 'Indicators'
      ,LongNameLevel3 =   i.LongName
      ,LongNameLevel4 = null
      ,LongNameLevel5 = null
      ,LongNameLevel6 = null
      ,LongNameLevel7 = null
      
      
       ,TermSetID1 = RIGHT ('000' + Cast( oc.Outcome_ID as varchar(50)), 4)
      ,TermSetID2 = RIGHT ('000' + Cast( oc.Outcome_ID as varchar(50)), 4) + 'Indicators'
      ,TermSetID3 = RIGHT ('000' + Cast(   i.IndicatorID as varchar(50)), 4)
      ,TermSetID4 = null
      ,TermSetID5 = null
      ,TermSetID6 = null
      ,TermSetID7 = null
      ,Indicator_ID = i.IndicatorID
      ,i.UnitOfMeasure
      from [app].[Outcome] oc

      
       inner join app.Indicator I
      on oc.Outcome_ID = i.Outcome_ID
           UNION ALL
      ------------------------------------
      --Outputs
      


      SELECT TermSetLevel1 = oc.ShortName 
      ,TermSetLevel2 =  otp.ShortName + ' : ' + left(otp.[LongName],80)
      ,TermSetLevel3 = 'Indicators'
      ,TermSetLevel4 =  i.ShortName + ' : ' + left(i.[LongName],80)
      ,TermSetLevel5 = null
      ,TermSetLevel6 = null
      ,TermSetLevel7 = null
      
      ,CodeLevel1 = oc.Code
      ,CodeLevel2 = otp.Code
      ,CodeLevel3 = 'Ind'
      ,CodeLevel4 = i.Code
      ,CodeLevel5 = null
      ,CodeLevel6 = null
      ,CodeLevel7 = null
      
      ,NameLevel1 = oc.ShortName --+ ' : ' + LEFT(oc.Longname,80)
      ,NameLevel2 = otp.ShortName
      ,NameLevel3 = 'Indicators' 
      ,NameLevel4 =  i.ShortName
      ,NameLevel5 = null
      ,NameLevel6 = null
      ,NameLevel7 = null
      
       ,LongNameLevel1 = oc.LongName --+ ' : ' + LEFT(oc.LongLongName,80)
      ,LongNameLevel2 = otp.LongName
      ,LongNameLevel3 = 'Indicators' 
      ,LongNameLevel4 =  i.LongName
      ,LongNameLevel5 = null
      ,LongNameLevel6 = null
      ,LongNameLevel7 = null
      ,TermSetID1 = RIGHT ('000' + Cast( oc.Outcome_ID  as varchar(50)), 4) 
      ,TermSetID2 = RIGHT ('000' + Cast(  otp.Output_ID  as varchar(50)), 4) 
      ,TermSetID3 = RIGHT ('000' +Cast(  otp.Output_ID as varchar(50)), 4)  + 'Indicators' 
      ,TermSetID4 = RIGHT ('000' +Cast( i.IndicatorID as varchar(50)), 4) 
      ,TermSetID5 = null
      ,TermSetID6 = null
      ,TermSetID7 = null
      ,Indicator_ID = i.IndicatorID
      ,i.UnitOfMeasure
      from [app].[Outcome] oc
      inner join app.Output otp
      on oc.Outcome_ID = otp.Outcome_ID

      
       inner join app.Indicator I
      on otp.Output_ID = i.Output_ID
      
           
      
      
       UNION ALL
      SELECT TermSetLevel1 = oc.ShortName --+ ' : ' + LEFT(oc.Longname,80) 
      ,TermSetLevel2 =  otp.ShortName + ' : ' + left(otp.LongName,80)
      ,TermSetLevel3 = so.ShortName + ' : ' + left(so.LongName,80)
      ,TermSetLevel4 = 'Indicators'
      ,TermSetLevel5 = i.ShortName + ' : ' + left(i.LongName,80)
      ,TermSetLevel6 = null
      ,TermSetLevel7 = null
      ,CodeLevel1 = oc.Code
      ,CodeLevel2 = otp.Code
      ,CodeLevel3 = so.Code
      ,CodeLevel4 = 'Ind'
      ,CodeLevel5 = i.Code
      ,CodeLevel6 = null
      ,CodeLevel7 = null
      
      ,NameLevel1 = oc.ShortName --+ ' : ' + LEFT(oc.Longname,80) 
      ,NameLevel2 = otp.ShortName
      ,NameLevel3 =  so.ShortName
      ,NameLevel4 =  'Indicators'
      ,NameLevel5 = i.ShortName
      ,NameLevel6 = null
      ,NameLevel7 = null
            ,LongNameLevel1 = oc.TextDescription --+ ' : ' + LEFT(oc.LongName,80) 
      ,LongNameLevel2 = otp.TextDescription
      ,LongNameLevel3 =  so.TextDescription
      ,LongNameLevel4 =  'Indicators'
      ,LongNameLevel5 = i.LongName
      ,LongNameLevel6 = null
      ,LongNameLevel7 = null
       ,TermSetID1 = RIGHT ('000' + Cast( oc.Outcome_ID as varchar(50)), 4)
      ,TermSetID2 = RIGHT ('000' +Cast(  otp.Output_ID as varchar(50)),4)
      ,TermSetID3 = RIGHT ('000' +Cast( so.SubOutput_ID as varchar(50)),4)
      ,TermSetID4 = RIGHT ('000' +Cast( so.SubOutput_ID as varchar(50)),4) + 'Indicators'
      ,TermSetID5 = RIGHT ('000' +Cast( i.IndicatorID as varchar(50)),4)
      ,TermSetID6 = null
      ,TermSetID7 = null
       ,Indicator_ID = i.IndicatorID
       ,i.UnitOfMeasure
      from [app].[Outcome] oc
      inner join app.Output otp
      on oc.Outcome_ID = otp.Outcome_ID
       inner join [app].[SubOutput] so
      on otp.Output_ID = so.Output_ID
      
       inner join app.Indicator I
      on so.SubOutput_ID = i.SubOutput_ID
GO
PRINT N'Creating [app].[ReportingPeriod]...';


GO

CREATE VIEW [app].[ReportingPeriod]
AS
SELECT        CONVERT(int, CONVERT(Varchar(4), YearNumber) + CONVERT(Varchar(1), ReportingPeriod)) AS ReportingPeriodID, ReportingPeriod, StartDateID, EndDateID, 
                         FirstCycleDate, LastCycleDate, YearName, YearNumber
FROM            Core.ReportCycle
GO
PRINT N'Creating [mm].[Outcome7MenuCategory]...';


GO
CREATE VIEW [mm].[Outcome7MenuCategory] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuCategory] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 7)
GO
PRINT N'Creating [mm].[Outcome6MenuCategory]...';


GO
CREATE VIEW [mm].[Outcome6MenuCategory] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuCategory] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 6)
GO
PRINT N'Creating [mm].[Outcome5MenuCategory]...';


GO
CREATE VIEW [mm].[Outcome5MenuCategory] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuCategory] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 5)
GO
PRINT N'Creating [mm].[Outcome4MenuCategory]...';


GO
CREATE VIEW [mm].[Outcome4MenuCategory] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuCategory] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 4)
GO
PRINT N'Creating [mm].[Outcome3MenuCategory]...';


GO
CREATE VIEW [mm].[Outcome3MenuCategory] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuCategory] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 3)
GO
PRINT N'Creating [mm].[Outcome2MenuCategory]...';


GO






CREATE VIEW [mm].[Outcome2MenuCategory]
AS
SELECT Substring(Title,1,50) as Title, Link, ID 
FROM [mm].[ALL_OutcomeMenuCategory]
WHERE Outcome_ID		in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, Outcome_ID as ID
from [app].[Outcome] Where Active=1 ) as IDX

Where IDX.IDX=2)
GO
PRINT N'Creating [mm].[Outcome1MenuCategory]...';


GO
CREATE VIEW [mm].[Outcome1MenuCategory] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuCategory] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 1)
GO
PRINT N'Creating [mm].[Outcome8MenuCategory]...';


GO
CREATE VIEW [mm].[Outcome8MenuCategory] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
        ID 
  FROM   [mm].[ALL_OutcomeMenuCategory] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 8)
GO
PRINT N'Creating [mm].[ALL_OutcomeMenuGroup]...';


GO




CREATE VIEW [mm].[ALL_OutcomeMenuGroup]
AS
    SELECT TOP ( 10000 )
            [t].[Title] ,
            [t].[Link] ,
            [t].[Parent] ,
            [t].[ID] ,
            [t].[Outcome_ID]
    FROM    ( SELECT    dso.Code AS orderBy1 ,
                        1 AS orderby2 ,
                        dso.ShortName AS Title ,
                        '/' + oc.[OutcomeSiteName]
                        + '/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode='
                        + '[Sub Output].[Sub Output].%26['
                        + CAST(dso.SubOutput_ID AS VARCHAR(8)) + ']' AS Link ,
                        ( SELECT    [mm].[ALL_OutcomeMenuCategory].[ID]
                          FROM      mm.ALL_OutcomeMenuCategory
                          WHERE     ( [mm].[ALL_OutcomeMenuCategory].[Title] = do.ShortName )
                                    AND [mm].[ALL_OutcomeMenuCategory].[Outcome_ID] = do.Outcome_ID
                        ) AS Parent ,
                        1 - dso.SubOutput_ID + 5000 AS ID ,
                        do.Outcome_ID
              FROM      [app].[SubOutput] AS dso
                        INNER JOIN app.Output AS do ON dso.Output_ID = do.Output_ID
                        INNER JOIN [app].[Outcome] AS OC ON do.Outcome_ID = oc.Outcome_ID
              WHERE     dso.Active = 1
                        AND do.Active = 1
                        AND oc.Active = 1
			UNION ALL
              SELECT    do.ShortName AS orderBy1 ,
                        1 AS orderby2 ,
                        'Indicators: ' + do.ShortName + ' ' AS Title ,
                        '/' + [dom].[OutcomeSiteName]
                        + '/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode='
                        + '[Output].[Output].%26['
                        + CAST(do.Output_ID AS VARCHAR(8)) + ']' AS Link ,
                        ( SELECT    [mm].[ALL_OutcomeMenuCategory].[ID]
                          FROM      mm.ALL_OutcomeMenuCategory
                          WHERE     ( [mm].[ALL_OutcomeMenuCategory].[Title] = do.ShortName )
                                    AND [mm].[ALL_OutcomeMenuCategory].[Outcome_ID] = do.Outcome_ID
                        ) AS Parent ,
                        100 + do.Output_ID AS ID ,
                        dom.Outcome_ID
              FROM      app.Output AS do
                        INNER JOIN [app].[Outcome] AS dom ON do.Outcome_ID = dom.Outcome_ID
              WHERE     do.Active = 1
                        AND dom.Active = 1
              UNION ALL
			 SELECT    '10002' AS OrderBy1 ,
                        0 AS OrderBy2 ,
                        'Outcome Level Status' AS Title ,
                        '/' + [O].[OutcomeSiteName]
                        + '/Dashboards/Template%20Pages/Outcome%20Status%20Report.aspx?qsOutcome=' + substring([O].[OutcomeSiteName],8,1) AS Link ,
                        ( SELECT    [OMC_2].[ID]
                          FROM      mm.ALL_OutcomeMenuCategory AS OMC_2
                          WHERE     ( [OMC_2].[Title] = 'Outcome Pages' )
                                    AND OMC_2.Outcome_ID = O.Outcome_ID
                        ) AS Parent ,
                        20 AS ID ,
                        [O].[Outcome_ID]
              FROM      [app].[Outcome] O
              WHERE     [O].[Active] = 1

              UNION ALL
              SELECT    '10003' AS OrderBy1 ,
                        0 AS OrderBy2 ,
                        'Outcome Level Indicators' AS Title ,
                        '/' + [O].[OutcomeSiteName]
                        + '/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode=[Outcome].[Outcome].%26['
                        + CAST(O.Outcome_ID AS VARCHAR(8)) + ']' AS Link ,
                        ( SELECT    [OMC_7].[ID]
                          FROM      mm.ALL_OutcomeMenuCategory AS OMC_7
                          WHERE     ( [OMC_7].[Title] = 'Outcome Pages' )
                                    AND OMC_7.Outcome_ID = O.Outcome_ID
                        ) AS Parent ,
                        70 AS ID ,
                        [O].[Outcome_ID]
              FROM      [app].[Outcome] O
              WHERE     [O].[Active] = 1
              UNION ALL
              SELECT    '10006' AS OrderBy1 ,
                        0 AS OrderBy2 ,
                        'Outcome Documents' AS Title ,
                        '/' + [O].[OutcomeSiteName]
                        + '/Shared%20Documents/Forms/AllItems.aspx' AS Link ,
                        ( SELECT    [OMC_4].[ID]
                          FROM      mm.ALL_OutcomeMenuCategory AS OMC_4
                          WHERE     ( [OMC_4].[Title] = 'Outcome Pages' )
                                    AND OMC_4.Outcome_ID = O.Outcome_ID
                        ) AS Parent ,
                        40 AS ID ,
                        [O].[Outcome_ID]
              FROM      [app].[Outcome] O
              WHERE     [O].[Active] = 1
              UNION ALL
              SELECT    '10008' AS OrderBy1 ,
                        0 AS OrderBy2 ,
                        'Outcome Contact Info' AS Title ,
                        '/' + [O].[OutcomeSiteName]
                        + '/lists/Outcome%20Contacts' AS Link ,
                        ( SELECT    [OMC_2].[ID]
                          FROM      mm.ALL_OutcomeMenuCategory AS OMC_2
                          WHERE     ( [OMC_2].[Title] = 'Outcome Pages' )
                                    AND OMC_2.Outcome_ID = O.Outcome_ID
                        ) AS Parent ,
                        20 AS ID ,
                        [O].[Outcome_ID]
              FROM      [app].[Outcome] O
              WHERE     [O].[Active] = 1
              UNION ALL
              SELECT    '10009' AS OrderBy1 ,
                        0 AS OrderBy2 ,
                        'FAQs' AS Title ,
                        '/' + [O].[OutcomeSiteName] + '/Outcome%20Wiki' AS Link ,
                        ( SELECT    [OMC_1].[ID]
                          FROM      mm.ALL_OutcomeMenuCategory AS OMC_1
                          WHERE     ( [OMC_1].[Title] = 'Outcome Pages' )
                                    AND OMC_1.Outcome_ID = O.Outcome_ID
                        ) AS Parent ,
                        10 AS ID ,
                        [O].[Outcome_ID]
              FROM      [app].[Outcome] O
              WHERE     [O].[Active] = 1

              UNION ALL
              SELECT    P.ShortName AS OrderBy1 ,
                        30000 AS OrderBy2 ,
                        P.ShortName AS Title ,
                        '' AS Link ,
                        Src.ID AS Parent ,
                        SRC.ID + P.ProjectID AS ID ,
                        [P].[Outcome_ID]
              FROM      app.Project P
                        CROSS APPLY ( SELECT    [mm].[ALL_OutcomeMenuCategory].[ID]
                                      FROM      mm.ALL_OutcomeMenuCategory
                                      WHERE     [mm].[ALL_OutcomeMenuCategory].[Title] = 'Projects'
                                                AND [mm].[ALL_OutcomeMenuCategory].[Outcome_ID] = P.Outcome_ID
                                    ) Src
            ) AS t
    ORDER BY [t].[orderBy1] ,
            [t].[orderby2]
GO
PRINT N'Creating [mm].[Outcome8MenuGroup]...';


GO
CREATE VIEW [mm].[Outcome8MenuGroup] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         Parent, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuGroup] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 8)
GO
PRINT N'Creating [mm].[Outcome7MenuGroup]...';


GO
CREATE VIEW [mm].[Outcome7MenuGroup] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         Parent, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuGroup] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 7)
GO
PRINT N'Creating [mm].[Outcome6MenuGroup]...';


GO
CREATE VIEW [mm].[Outcome6MenuGroup] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         Parent, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuGroup] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 6)
GO
PRINT N'Creating [mm].[Outcome5MenuGroup]...';


GO
CREATE VIEW [mm].[Outcome5MenuGroup] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         Parent, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuGroup] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 5)
GO
PRINT N'Creating [mm].[Outcome4MenuGroup]...';


GO
CREATE VIEW [mm].[Outcome4MenuGroup] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         Parent, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuGroup] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 4)
GO
PRINT N'Creating [mm].[Outcome3MenuGroup]...';


GO
CREATE VIEW [mm].[Outcome3MenuGroup] 
AS 
  SELECT Title, 
         Link, 
         Parent, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuGroup] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 3)
GO
PRINT N'Creating [mm].[Outcome2MenuGroup]...';


GO
CREATE VIEW [mm].[Outcome2MenuGroup] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         Parent, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuGroup] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 2)
GO
PRINT N'Creating [mm].[Outcome1MenuGroup]...';


GO
CREATE VIEW [mm].[Outcome1MenuGroup] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         Parent, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuGroup] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = 1)
GO
PRINT N'Creating [mm].[ALL_OutcomeMenuLink]...';


GO
CREATE VIEW [mm].[ALL_OutcomeMenuLink] 
AS 
   SELECT Title = 'Indicator Details', 
         Link = '/' + [OutcomeSiteName] 
                + 
'/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode=' 
       + '[Sub Output].[Sub Output].%26[' 
       + Cast(dso.SubOutput_ID AS VARCHAR(8)) + ']', 
ID = 100 * dso.SubOutput_ID, 
Parent = (SELECT ID 
          FROM   [mm].[ALL_OutcomeMenuGroup] G 
          WHERE  G.Title = dso.ShortName 
                 AND G.Outcome_ID = do.Outcome_ID), 
do.Outcome_ID 
FROM   [app].[SubOutput] dso 
INNER JOIN app.Output do 
        ON dso.Output_ID = do.Output_ID 
INNER JOIN [app].[Outcome] AS OC 
        ON do.Outcome_ID = oc.Outcome_ID 
WHERE  dso.Active = 1  AND do.Active = 1 AND oc.Active = 1
UNION ALL 
SELECT Title = 'Location Indicator Details', 
Link = '/' + [OutcomeSiteName] 
       + 
'/Dashboards/Template%20Pages/Provincial%20Indicator%20Details%20Page.aspx?qsIndCode=' 
+ '[Sub Output].[Sub Output].%26[' 
+ Cast(dso.SubOutput_ID AS VARCHAR(8)) + ']', 
Priority = 100 * dso.SubOutput_ID, 
Parent = (SELECT ID 
   FROM   [mm].[ALL_OutcomeMenuGroup] G 
   WHERE  G.Title = dso.ShortName 
          AND G.Outcome_ID = DO.Outcome_ID), 
do.Outcome_ID 
FROM   [app].[SubOutput] dso 
INNER JOIN app.Output do 
        ON dso.Output_ID = do.Output_ID 
INNER JOIN [app].[Outcome] AS OC 
        ON do.Outcome_ID = oc.Outcome_ID 
WHERE  dso.Active = 1 AND do.Active = 1 AND OC.Active = 1
UNION ALL 
SELECT Title = Da.ShortName, 
Link = '/' + [OutcomeSiteName] 
       + 
'/Dashboards/Template%20Pages/Milestones%20Page.aspx?qsActivity='
	+ Cast(da.Activity_ID AS VARCHAR(8)) , 
Priority = 1 - da.Activity_ID + 5000, 
Parent = (SELECT SRC.ID + P.ProjectID AS ID 
          FROM   app.Project P 
                 CROSS apply (SELECT ID 
                              FROM   mm.ALL_OutcomeMenuCategory O2MC 
                              WHERE  Title = 'Projects'
							  AND O2MC.Outcome_ID = OC.Outcome_ID
							  ) Src 
          WHERE  Outcome_ID = dp.Outcome_ID 
                 AND P.ProjectID = da.ProjectID), 
Dp.Outcome_ID 
FROM   app.Activity da 
INNER JOIN app.Project dp 
        ON da.ProjectID = dp.ProjectID 
INNER JOIN [app].[Outcome] AS OC 
        ON dp.Outcome_ID = oc.Outcome_ID 
WHERE  da.Active = 1 AND dp.Active = 1 AND oc.Active = 1
GO
PRINT N'Creating [mm].[Outcome1MenuLink]...';


GO







CREATE VIEW [mm].[Outcome1MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE Outcome_ID in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, Outcome_ID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=1)
GO
PRINT N'Creating [mm].[Outcome8MenuLink]...';


GO







CREATE VIEW [mm].[Outcome8MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE Outcome_ID in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, Outcome_ID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=8)
GO
PRINT N'Creating [mm].[Outcome7MenuLink]...';


GO







CREATE VIEW [mm].[Outcome7MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE Outcome_ID in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, Outcome_ID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=7)
GO
PRINT N'Creating [mm].[Outcome6MenuLink]...';


GO







CREATE VIEW [mm].[Outcome6MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE Outcome_ID in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, Outcome_ID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=6)
GO
PRINT N'Creating [mm].[Outcome5MenuLink]...';


GO







CREATE VIEW [mm].[Outcome5MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE Outcome_ID in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, Outcome_ID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=5)
GO
PRINT N'Creating [mm].[Outcome4MenuLink]...';


GO







CREATE VIEW [mm].[Outcome4MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE Outcome_ID in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, Outcome_ID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=4)
GO
PRINT N'Creating [mm].[Outcome3MenuLink]...';


GO







CREATE VIEW [mm].[Outcome3MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE Outcome_ID in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, Outcome_ID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=3)
GO
PRINT N'Creating [mm].[Outcome2MenuLink]...';


GO







CREATE VIEW [mm].[Outcome2MenuLink]
AS
SELECT     Substring(Title,1,50) as Title, Link, ID, Parent 
FROM mm.ALL_OutcomeMenuLink
WHERE Outcome_ID in (Select ID from (
Select Row_Number() Over (Partition by 1 Order By Code) as IDX, Outcome_ID as ID
from app.Outcome Where Active=1 ) as IDX

Where IDX.IDX=2)
GO
PRINT N'Creating [Core].[uspModIndicatorValue]...';


GO


-- =============================================
-- Author:		Andreas Bergstedt
-- Create date: 2013-03-24
-- Description:	Procedure to insert or update Indicator Value table
-- =============================================
CREATE PROCEDURE [Core].[uspModIndicatorValue]

	-- Add the parameters for the stored procedure here
	@CRUD nvarchar(5),   -- C=Create,R=Read,U=Update,D=Delete
	@IndicatorValues_ID int ,
	@Indicator_ID as [int]  ,
	@BaselineLabel as [varchar](50)  ,
	@BaselineValue as [decimal](20, 5) ,
	@BaselineString as [varchar](max) ,
	@BaselineDate as [date] ,
	@TargetLabel as [varchar](50)  ,
	@TargetValue as [decimal](20, 5) ,
	@TargetValueString as [varchar](max) ,
	@TargetDate as [date] ,
	@ActualLabel as [varchar](50)  ,
	@ActualValue as [decimal](20, 5) ,
	@ActualValueString as [varchar](max) ,
	@ActualDate as [date] ,
	@BusinessKey as [varchar](max) ,
	@Notes as [varchar](max) ,
	@VerifiedActualValue as [decimal](20, 5) ,
	@VerifiedActualNotes as [varchar](max) ,
	@DataVersion_ID as [int]  ,
	@Location_ID as [int]  ,
	@IndicatorStatusValuesPercent as [decimal](18, 2) ,
	@ReportPeriodID as [int]  ,
	@Title as [varchar](255) ,
	@ModifiedDate as [datetime] ,
	@Organization_ID as [int] ,
	@Username as [varchar](255) 

AS
/*BEGIN
	
	SET NOCOUNT ON;
	--Generate Memory Table for Merge
IF @CRUD in ('C','U')
	Begin
	Declare @@TTin as Table(
	[IndicatorValues_ID] [int]  NOT NULL,
	[Indicator_ID] [int] NOT NULL,
	[BaselineLabel] [varchar](50) NOT NULL,
	[BaselineValue] [decimal](20, 5) NULL,
	[BaselineString] [varchar](max) NULL,
	[BaselineDate] [date] NULL,
	[TargetLabel] [varchar](50) NOT NULL,
	[TargetValue] [decimal](20, 5) NULL,
	[TargetValueString] [varchar](max) NULL,
	[TargetDate] [date] NULL,
	[ActualLabel] [varchar](50) NOT NULL,
	[ActualValue] [decimal](20, 5) NULL,
	[ActualValueString] [varchar](max) NULL,
	[ActualDate] [date] NULL,
	[BusinessKey] [varchar](max) NULL,
	[Notes] [varchar](max) NULL,
	[VerifiedActualValue] [decimal](20, 5) NULL,
	[VerifiedActualNotes] [varchar](max) NULL,
	[DataVersion_ID] [int] NOT NULL,
	[Location_ID] [int] NOT NULL,
	[IndicatorStatusValuesPercent] [decimal](18, 2) NULL,
	[ReportPeriodID] [int] NOT NULL,
	[Title] [varchar](255) NULL,
	[ModifiedDate] [datetime] NULL,
	[Organization_ID] [int] NULL,
	[Username] [varchar](255) NULL,
	[sys_CreatedOn] [datetime] NOT NULL,
	[sys_CreatedBy] [nvarchar](255) NOT NULL,
	[sys_ModifiedOn] [datetime] NOT NULL,
	[sys_ModifiedBy] [nvarchar](255) NOT NULL,
	[sys_Active] [int] NOT NULL)
    

	--Insert Parameter Values in temp Table
	
	Insert Into @@TTin
	Select 
	@IndicatorValues_ID,
	@Indicator_ID
      ,@BaselineLabel
      ,@BaselineValue
      ,@BaselineString
      ,@BaselineDate
      ,@TargetLabel
      ,@TargetValue
      ,@TargetValueString
      ,@TargetDate
      ,@ActualLabel
      ,@ActualValue
      ,@ActualValueString
      ,@ActualDate
      ,@BusinessKey
      ,@Notes
      ,@VerifiedActualValue
      ,@VerifiedActualNotes
      ,@DataVersion_ID
      ,@Location_ID
      ,@IndicatorStatusValuesPercent
      ,@ReportPeriodID
      ,@Title
      ,@ModifiedDate
      ,@Organization_ID
      ,@Username
      ,GetUTCDate()--@sys_CreatedOn
      ,''--@sys_CreatedBy
      ,GetUTCDate()--@sys_ModifiedOn
      ,''--@sys_ModifiedBy
      ,1--@sys_Active
	  
	  	--Execute Mege into Live
	Merge Into RBM.IndicatorValues as T
	USING @@TTin as S
	ON  s.IndicatorValues_ID=t.IndicatorValues_ID 
	When MATCHED 
	Then UPDATE
	
	Set 
	t.[Indicator_ID]=s.[Indicator_ID],
/*t.[BaselineLabel]=s.[BaselineLabel],
t.[BaselineValue]=s.[BaselineValue],
t.[BaselineString]=s.[BaselineString],
t.[BaselineDate]=s.[BaselineDate],
t.[TargetLabel]=s.[TargetLabel],
t.[TargetValue]=s.[TargetValue],
t.[TargetValueString]=s.[TargetValueString],
t.[TargetDate]=s.[TargetDate],*/
t.[ActualLabel]=s.[ActualLabel],
t.[ActualValue]=s.[ActualValue],
t.[ActualValueString]=s.[ActualValueString],
t.[ActualDate]=s.[ActualDate],
t.[BusinessKey]=s.[BusinessKey],
t.[Notes]=s.[Notes],
/*t.[VerifiedActualValue]=s.[VerifiedActualValue],
t.[VerifiedActualNotes]=s.[VerifiedActualNotes],*/
t.[DataVersion_ID]=s.[DataVersion_ID],
t.[Location_ID]=s.[Location_ID],
t.[IndicatorStatusValuesPercent]=s.[IndicatorStatusValuesPercent],
t.[ReportPeriodID]=s.[ReportPeriodID],
t.[Title]=s.[Title],
t.[ModifiedDate]=s.[ModifiedDate],
t.[Organization_ID]=s.[Organization_ID],
t.[Username]=s.[Username],
--t.[sys_CreatedOn]=s.[sys_CreatedOn],
--t.[sys_CreatedBy]=s.[sys_CreatedBy],
t.[sys_ModifiedOn]=s.[sys_ModifiedOn],
t.[sys_ModifiedBy]=s.[sys_ModifiedBy]


	WHEN NOT MATCHED Then Insert

	(
	[Indicator_ID]
/*,[BaselineLabel]
,[BaselineValue]
,[BaselineString]
,[BaselineDate]
,[TargetLabel]
,[TargetValue]
,[TargetValueString]
,[TargetDate]*/
,[ActualLabel]
,[ActualValue]
,[ActualValueString]
,[ActualDate]
,[BusinessKey]
,[Notes]
/*,[VerifiedActualValue]
,[VerifiedActualNotes]*/
,[DataVersion_ID]
,[Location_ID]
,[IndicatorStatusValuesPercent]
,[ReportPeriodID]
,[Title]
,[ModifiedDate]
,[Organization_ID]
,[Username]
,[sys_CreatedOn]
,[sys_CreatedBy]
,[sys_ModifiedOn]
,[sys_ModifiedBy]
,[sys_Active]
 

	)
	Values
	(
s.[Indicator_ID],
s.[BaselineLabel],
s.[BaselineValue],
s.[BaselineString],
s.[BaselineDate],
s.[TargetLabel],
s.[TargetValue],
s.[TargetValueString],
s.[TargetDate],
s.[ActualLabel],
s.[ActualValue],
s.[ActualValueString],
s.[ActualDate],
s.[BusinessKey],
s.[Notes],
s.[VerifiedActualValue],
s.[VerifiedActualNotes],
s.[DataVersion_ID],
s.[Location_ID],
s.[IndicatorStatusValuesPercent],
s.[ReportPeriodID],
s.[Title],
s.[ModifiedDate],
s.[Organization_ID],
s.[Username],
s.[sys_CreatedOn],
s.[sys_CreatedBy],
s.[sys_ModifiedOn],
s.[sys_ModifiedBy],
s.[sys_Active]


	);
End

IF @CRUD Like 'R'
Begin 
--Return Result
Select * from RBM.IndicatorValues s where s.IndicatorValues_ID=@IndicatorValues_ID
End
IF @CRUD Like 'D'
Begin 

Update RBM.IndicatorValues  
Set Sys_Active = -1 -- 1 = Active 0=Not Active -1=Deleted
where IndicatorValues_ID=@IndicatorValues_ID
End




END


*/
SELECT 'Not implemented' as X
GO
PRINT N'Creating [Core].[uspModMilestoneValue]...';


GO


-- =============================================
-- Author:		Andreas Bergstedt
-- Create date: 2013-03-24
-- Description:	Procedure to insert or update Milestone Value table
-- =============================================
CREATE PROCEDURE [Core].[uspModMilestoneValue]
	-- Add the parameters for the stored procedure here
	@CRUD nvarchar(5),   -- C=Create,R=Read,U=Update,D=Delete
	@MilestoneValues_ID int ,
	@Milestone_ID as [int]  ,
	@BaselineLabel as [varchar](50)  ,
	@BaselineValue as [decimal](20, 5) ,
	@BaselineString as [varchar](max) ,
	@BaselineDate as [date] ,
	@TargetLabel as [varchar](50)  ,
	@TargetValue as [decimal](20, 5) ,
	@TargetValueString as [varchar](max) ,
	@TargetDate as [date] ,
	@ActualLabel as [varchar](50)  ,
	@ActualValue as [decimal](20, 5) ,
	@ActualValueString as [varchar](max) ,
	@ActualDate as [date] ,
	@BusinessKey as [varchar](max) ,
	@Notes as [varchar](max) ,
	@VerifiedActualValue as [decimal](20, 5) ,
	@VerifiedActualNotes as [varchar](max) ,
	@DataVersion_ID as [int]  ,
	@Location_ID as [int]  ,
	@MilestoneStatusValuesPercent as [decimal](18, 2) ,
	@ReportPeriodID as [int]  ,
	@Title as [varchar](255) ,
	@ModifiedDate as [datetime] ,
	@Organization_ID as [int] ,
	@Username as [varchar](255) 

AS
/*
BEGIN
	
	SET NOCOUNT ON;
	--Generate Memory Table for Merge
IF @CRUD in ('C','U')
	Begin
	Declare @@TTin as Table(
	[MilestoneValues_ID] [int]  NOT NULL,
	[Milestone_ID] [int] NOT NULL,
	[BaselineLabel] [varchar](50) NOT NULL,
	[BaselineValue] [decimal](20, 5) NULL,
	[BaselineString] [varchar](max) NULL,
	[BaselineDate] [date] NULL,
	[TargetLabel] [varchar](50) NOT NULL,
	[TargetValue] [decimal](20, 5) NULL,
	[TargetValueString] [varchar](max) NULL,
	[TargetDate] [date] NULL,
	[ActualLabel] [varchar](50) NOT NULL,
	[ActualValue] [decimal](20, 5) NULL,
	[ActualValueString] [varchar](max) NULL,
	[ActualDate] [date] NULL,
	[BusinessKey] [varchar](max) NULL,
	[Notes] [varchar](max) NULL,
	[VerifiedActualValue] [decimal](20, 5) NULL,
	[VerifiedActualNotes] [varchar](max) NULL,
	[DataVersion_ID] [int] NOT NULL,
	[Location_ID] [int] NOT NULL,
	[MilestoneStatusValuesPercent] [decimal](18, 2) NULL,
	[ReportPeriodID] [int] NOT NULL,
	[Title] [varchar](255) NULL,
	[ModifiedDate] [datetime] NULL,
	[Organization_ID] [int] NULL,
	[Username] [varchar](255) NULL,
	[sys_CreatedOn] [datetime] NOT NULL,
	[sys_CreatedBy] [nvarchar](255) NOT NULL,
	[sys_ModifiedOn] [datetime] NOT NULL,
	[sys_ModifiedBy] [nvarchar](255) NOT NULL,
	[sys_Active] [int] NOT NULL)
    

	--Insert Parameter Values in temp Table
	
	Insert Into @@TTin
	Select 
	@MilestoneValues_ID,
	@Milestone_ID
      ,@BaselineLabel
      ,@BaselineValue
      ,@BaselineString
      ,@BaselineDate
      ,@TargetLabel
      ,@TargetValue
      ,@TargetValueString
      ,@TargetDate
      ,@ActualLabel
      ,@ActualValue
      ,@ActualValueString
      ,@ActualDate
      ,@BusinessKey
      ,@Notes
      ,@VerifiedActualValue
      ,@VerifiedActualNotes
      ,@DataVersion_ID
      ,@Location_ID
      ,@MilestoneStatusValuesPercent
      ,@ReportPeriodID
      ,@Title
      ,@ModifiedDate
      ,@Organization_ID
      ,@Username
      ,GetUTCDate()--@sys_CreatedOn
      ,''--@sys_CreatedBy
      ,GetUTCDate()--@sys_ModifiedOn
      ,''--@sys_ModifiedBy
      ,1--@sys_Active
	  
	  	--Execute Mege into Live
	Merge Into RBM.MilestoneValues as T
	USING @@TTin as S
	ON  s.MilestoneValues_ID=t.MilestoneValues_ID 
	When MATCHED 
	Then UPDATE
	
	Set 
	t.[Milestone_ID]=s.[Milestone_ID],
/*t.[BaselineLabel]=s.[BaselineLabel],
t.[BaselineValue]=s.[BaselineValue],
t.[BaselineString]=s.[BaselineString],
t.[BaselineDate]=s.[BaselineDate],
t.[TargetLabel]=s.[TargetLabel],
t.[TargetValue]=s.[TargetValue],
t.[TargetValueString]=s.[TargetValueString],
t.[TargetDate]=s.[TargetDate],*/
t.[ActualLabel]=s.[ActualLabel],
t.[ActualValue]=s.[ActualValue],
t.[ActualValueString]=s.[ActualValueString],
t.[ActualDate]=s.[ActualDate],
t.[BusinessKey]=s.[BusinessKey],
t.[Notes]=s.[Notes],
t.[VerifiedActualValue]=s.[VerifiedActualValue],
t.[VerifiedActualNotes]=s.[VerifiedActualNotes],
t.[DataVersion_ID]=s.[DataVersion_ID],
t.[Location_ID]=s.[Location_ID],
t.[MilestoneStatusValuesPercent]=s.[MilestoneStatusValuesPercent],
t.[ReportPeriodID]=s.[ReportPeriodID],
t.[Title]=s.[Title],
t.[ModifiedDate]=s.[ModifiedDate],
t.[Organization_ID]=s.[Organization_ID],
t.[Username]=s.[Username],
--t.[sys_CreatedOn]=s.[sys_CreatedOn],
--t.[sys_CreatedBy]=s.[sys_CreatedBy],
t.[sys_ModifiedOn]=s.[sys_ModifiedOn],
t.[sys_ModifiedBy]=s.[sys_ModifiedBy]


	WHEN NOT MATCHED Then Insert

	(
	[Milestone_ID]
,[BaselineLabel]
,[BaselineValue]
,[BaselineString]
,[BaselineDate]
,[TargetLabel]
,[TargetValue]
,[TargetValueString]
,[TargetDate]
,[ActualLabel]
,[ActualValue]
,[ActualValueString]
,[ActualDate]
,[BusinessKey]
,[Notes]
,[VerifiedActualValue]
,[VerifiedActualNotes]
,[DataVersion_ID]
,[Location_ID]
,[MilestoneStatusValuesPercent]
,[ReportPeriodID]
,[Title]
,[ModifiedDate]
,[Organization_ID]
,[Username]
,[sys_CreatedOn]
,[sys_CreatedBy]
,[sys_ModifiedOn]
,[sys_ModifiedBy]
,[sys_Active]
 

	)
	Values
	(
s.[Milestone_ID],
s.[BaselineLabel],
s.[BaselineValue],
s.[BaselineString],
s.[BaselineDate],
s.[TargetLabel],
s.[TargetValue],
s.[TargetValueString],
s.[TargetDate],
s.[ActualLabel],
s.[ActualValue],
s.[ActualValueString],
s.[ActualDate],
s.[BusinessKey],
s.[Notes],
s.[VerifiedActualValue],
s.[VerifiedActualNotes],
s.[DataVersion_ID],
s.[Location_ID],
s.[MilestoneStatusValuesPercent],
s.[ReportPeriodID],
s.[Title],
s.[ModifiedDate],
s.[Organization_ID],
s.[Username],
s.[sys_CreatedOn],
s.[sys_CreatedBy],
s.[sys_ModifiedOn],
s.[sys_ModifiedBy],
s.[sys_Active]


	);
End

IF @CRUD Like 'R'
Begin 
--Return Result
Select * from RBM.MilestoneValues s where s.MilestoneValues_ID=@MilestoneValues_ID
End
IF @CRUD Like 'D'
Begin 

Update RBM.MilestoneValues  
Set Sys_Active = -1 -- 1 = Active 0=Not Active -1=Deleted
where MilestoneValues_ID=@MilestoneValues_ID
End




END
*/
SELECT 'Not implemented' as X
GO
PRINT N'Creating [Core].[sp_IndicatorCaptureProgress]...';


GO
CREATE PROC [Core].[sp_IndicatorCaptureProgress]
	@@DataVersion_ID int
	,@@Outcome_ID int
	,@Location_ID int =1
	,@MilestoneCode varchar(255) = '0'
AS
Declare @@OTCFilt int = @@Outcome_ID
IF @@Outcome_ID = 9999 set @@OTCFilt = 0


Declare @@MaxYear as INT = (
	Select LEFT(MAX(RC.YearNumber),4 ) 
		
from app.Outcome oc
	Left join app.Output OTP on OC.Outcome_ID = OTP.Outcome_ID
	Left join app.SubOutput STP on OTP.Output_ID = STP.Output_ID
	--Left join app.Activity ACT on stp.SubOutput_ID = ACT.SubOutput_ID
	Left join app.Indicator MST on 
	--(act.Activity_ID = mst.Activity_ID or 
	(stp.SubOutput_ID = MST.SubOutput_ID or
	OTP.Output_ID = MST.Output_ID or
	OC.Outcome_ID = MST.Outcome_ID)


	Left Outer Join RBM.IndicatorValues MSV on MSV.Indicator_ID=MST.IndicatorID
	inner Join Core.ReportCycle RC on MST.TargetDate_ID Between RC.StartDateID and rc.EndDateID 
	
	
	)
Declare @@MinYear as INT = (
	Select LEFT(Min(RC.YearNumber),4 ) 
		
from app.Outcome oc
	Left join app.Output OTP on OC.Outcome_ID = OTP.Outcome_ID
	Left join app.SubOutput STP on OTP.Output_ID = STP.Output_ID
	--Left join app.Activity ACT on stp.SubOutput_ID = ACT.SubOutput_ID
	Left join app.Indicator MST on 
	--(act.Activity_ID = mst.Activity_ID or 
	(stp.SubOutput_ID = MST.SubOutput_ID or
	OTP.Output_ID = MST.Output_ID or
	OC.Outcome_ID = MST.Outcome_ID)


	Left Outer Join RBM.IndicatorValues MSV on MSV.Indicator_ID=MST.IndicatorID
	inner Join Core.ReportCycle RC on MST.TargetDate_ID Between RC.StartDateID and rc.EndDateID 
	
	
	)






Select 
		(OC.Code + ' : ' + OC.LongName) as Outcome
		,oc.Outcome_ID as Outcome_ID
		,(OTP.Code + ' : ' + OTP.LongName) as [Output]
		,otp.Output_ID
		,(STP.Code + ' : ' + STP.LongName) as SubOutput
		,stp.SubOutput_ID
		--,(ACT.Code + ' : ' + ACT.LongName) as Activity
		--,act.Activity_ID as Activity_ID
		,(MST.Code + ' : ' + MST.LongName) as Indicator
		,mst.IndicatorID as Indicator_ID
			,LEFT(RC.YearNumber,4 ) Year
			,RCC.YearNumber as FinancialYear
			,rcC.ReportingPeriod as ReportCycle
			,MSV.DataVersion_ID
			,(Case when MSV.ActualValue Is not null 
				then 1
				else 0
			end)   PercentageCaptured
			--,MSV.IndicatorStatusPercent as IndicatorProgressPercent
			,OC.Outcome_ID as RolledUpToOutcome_ID
			,OTP.Output_ID as RolledUpToOutput_ID
			,STP.SubOutput_ID as RolledUpToSubOutput_ID
			,MSv.ActualDate as ReportingDate
			
from app.Outcome oc
	Left join app.Output OTP on OC.Outcome_ID = OTP.Outcome_ID
	Left join app.SubOutput STP on OTP.Output_ID = STP.Output_ID
	--Left join app.Activity ACT on stp.SubOutput_ID = ACT.SubOutput_ID
	Left join app.Indicator MST on 
	--(act.Activity_ID = mst.Activity_ID or 
	(stp.SubOutput_ID = MST.SubOutput_ID or
	OTP.Output_ID = MST.Output_ID or
	OC.Outcome_ID = MST.Outcome_ID)


	Left Outer Join RBM.IndicatorValues MSV on MSV.Indicator_ID=MST.IndicatorID
	inner Join Core.ReportCycle RC on MST.TargetDate_ID Between RC.StartDateID and rc.EndDateID 
	inner Join Core.ReportCycle RCC on rcc.YearNumber Between @@MinYear and @@MaxYear
	
	
Where (OC.Outcome_ID Between @@OTCFilt and  @@Outcome_ID) and (MSV.DataVersion_ID=@@DataVersion_ID  or MSV.DataVersion_ID is null )


order by (OC.Code + ' : ' + OC.LongName)
      ,(OTP.Code + ' : ' + OTP.LongName)
      ,(STP.Code + ' : ' + STP.LongName)
      --,(ACT.Code + ' : ' + ACT.LongName)
      ,(MST.Code + ' : ' + MST.LongName)
      ,RCC.YearNumber
      ,rCc.ReportingPeriod
GO
PRINT N'Creating [Core].[usp_MilestoneCaptureProgress]...';


GO
CREATE PROC [Core].[usp_MilestoneCaptureProgress]
	@DataVersion_ID int = 0,
	@Outcome_ID int = 0

AS

SELECT
	Outcome = (OC.Code + ' : ' + OC.LongName),
	Outcome_ID = oc.Outcome_ID, 
	[Output] = '',
	Output_ID = 0,
	Project = (PRJ.Code + ' : ' + PRJ.LongName),
	PRJ.ProjectID,
	Activity = (ACT.Code + ' : ' + ACT.LongName), 
	Activity_ID = act.Activity_ID, 
	Milestone = (MST.Code + ' : ' + MST.LongName),
	Milestone_ID = mst.MilestoneID,
	[Year] = LEFT(RCC.YearNumber,4),
	FinancialYear = RCC.YearNumber, 
	ReportCycle = rcC.ReportingPeriod,
	MSV.DataVersion_ID,
	PercentageCaptured =
		CASE 
			WHEN MSV.ActualValue IS NOT NULL
			THEN 1
			ELSE 0
		END,
	MilestoneProgressPercent = (MSV.ActualValue / MST.Target) * 100.0,
	RolledUpToOutcome_ID = OC.Outcome_ID,
	RolledUpToOutput_ID	= 0,
	RolledUpToProjectID = PRJ.ProjectID,
	ReportingDate = MSv.ActualDate 
FROM [app].[Outcome] AS oc
INNER JOIN app.Project AS PRJ ON 
	oc.Outcome_ID = PRJ.Outcome_ID
INNER JOIN app.Activity AS ACT ON 
	PRJ.ProjectID = ACT.ProjectID
INNER JOIN app.Milestone AS MST ON act.Activity_ID = mst.Activity_ID
LEFT OUTER JOIN RBM.MilestoneValues AS MSV ON 
	MSV.Milestone_ID=MST.MilestoneID
	AND (MSV.DataVersion_ID = @DataVersion_ID OR @DataVersion_ID = 0)
INNER JOIN Core.ReportCycle AS RC ON 
	(MST.TargetDateID BETWEEN RC.StartDateID AND rc.EndDateID)
LEFT OUTER JOIN Core.ReportCycle AS RCC ON 
	rc.YearNumber=RCC.YearNumber
WHERE  
	(OC.Outcome_ID = @Outcome_ID OR @Outcome_ID = 0)
ORDER BY
	(OC.Code + ' : ' + OC.LongName),
    (PRJ.Code + ' : ' + PRJ.LongName),
    (ACT.Code + ' : ' + ACT.LongName),
    (MST.Code + ' : ' + MST.LongName),
    RC.YearNumber,
    rc.ReportingPeriod
GO
PRINT N'Creating [Core].[sp_MilestoneCaptureProgress]...';


GO
CREATE PROC [Core].[sp_MilestoneCaptureProgress]
@DataVersion_ID int = 0
,@Outcome_ID int = 0

AS

Select 
		(OC.Code + ' : ' + OC.LongName) as Outcome
		,oc.Outcome_ID as Outcome_ID
		,'' as [Output]
		,0 as Output_ID
		,(PRJ.Code + ' : ' + PRJ.LongName) as Project
		,PRJ.ProjectID
		,(ACT.Code + ' : ' + ACT.LongName) as Activity
		,act.Activity_ID as Activity_ID
		,(MST.Code + ' : ' + MST.LongName) as Milestone
		,mst.MilestoneID as Milestone_ID
			,LEFT(RCC.YearNumber,4 ) Year
			,RCC.YearNumber as FinancialYear
			,rcC.ReportingPeriod as ReportCycle
			,MSV.DataVersion_ID
			,(Case when (MSV.ActualValue Is not null )
				then 1
				else 0
			end)   PercentageCaptured
			,MilestoneProgressPercent = (MSV.ActualValue / MST.Target) * 100.0
			,OC.Outcome_ID as RolledUpToOutcome_ID
			,0 as RolledUpToOutput_ID
			,PRJ.ProjectID as RolledUpToProjectID
			,MSv.ActualDate as ReportingDate
from [app].[Outcome]		 oc
	--inner join app.Output OTP on OC.Outcome_ID = OTP.Outcome_ID
	inner join app.Project PRJ on oc.Outcome_ID = PRJ.Outcome_ID
	inner join app.Activity ACT on PRJ.ProjectID = ACT.ProjectID
	inner join app.Milestone MST on act.Activity_ID = mst.Activity_ID
	Left Outer Join RBM.MilestoneValues MSV on MSV.Milestone_ID=MST.MilestoneID
		 and (MSV.DataVersion_ID=@DataVersion_ID OR @DataVersion_ID = 0)
	inner Join Core.ReportCycle RC on (MST.TargetDateID Between RC.StartDateID and rc.EndDateID )
	Left Join Core.ReportCycle RCC on rc.YearNumber=RCC.YearNumber
	/* Left Outer Join RBM.IndicatorValues MSV on MSV.Indicator_ID=MST.IndicatorID
 inner Join Core.ReportCycle RC on MST.TargetDate_ID Between RC.StartDateID and rc.EndDateID 
 Left Join Core.ReportCycle RCC on rc.YearNumber=RCC.YearNumber*/
	
Where 
(OC.Outcome_ID = @Outcome_ID OR @Outcome_ID = 0)



order by (OC.Code + ' : ' + OC.LongName)
      --,(OTP.Code + ' : ' + OTP.LongName)
      ,(PRJ.Code + ' : ' + PRJ.LongName)
      ,(ACT.Code + ' : ' + ACT.LongName)
      ,(MST.Code + ' : ' + MST.LongName)
      ,RC.YearNumber
      ,rc.ReportingPeriod
      
/*GO

exec [Core].[sp_MilestoneCaptureProgress] 0, 0*/
GO
PRINT N'Creating [mm].[CreateOutcomeViews]...';


GO
CREATE PROC mm.CreateOutcomeViews
as
------------------------------------------------------------------------------------------------------------------
--Category
------------------------------------------------------------------------------------------------------------------

DECLARE @SQL varchar(max)
DECLARE BuildCategory CURSOR READ_ONLY FORWARD_ONLY
FOR SELECT '

CREATE VIEW [mm].[Outcome' + cast(O.Outcome_ID as varchar(10)) + 'MenuCategory] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuCategory] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = ' + cast(O.Outcome_ID as varchar(10)) + ')
' As SQLStatement
FROM app.Outcome O
WHERE NOT EXISTS
(SELECT 1 FROM INFORMATION_SCHEMA.VIEWS
WHERE TABLE_NAME = 'Outcome' + cast(O.Outcome_ID as varchar(10)) + 'MenuCategory' and TABLE_SCHEMA = 'mm'
)


 OPEN BuildCategory
    FETCH NEXT FROM BuildCategory INTO @SQL
	
    WHILE @@FETCH_STATUS = 0
    BEGIN
	EXEC (@SQL)
    FETCH NEXT FROM BuildCategory INTO @SQL
        END

    CLOSE BuildCategory
    DEALLOCATE BuildCategory


	
------------------------------------------------------------------------------------------------------------------
--Group
------------------------------------------------------------------------------------------------------------------
DECLARE BuildGroup CURSOR READ_ONLY FORWARD_ONLY
FOR SELECT '

CREATE VIEW [mm].[Outcome' + cast(O.Outcome_ID as varchar(10)) + 'MenuGroup] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuGroup] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = ' + cast(O.Outcome_ID as varchar(10)) + ')
' As SQLStatement
FROM app.Outcome O
WHERE NOT EXISTS
(SELECT 1 FROM INFORMATION_SCHEMA.VIEWS
WHERE TABLE_NAME = 'Outcome' + cast(O.Outcome_ID as varchar(10)) + 'MenuGroup' and TABLE_SCHEMA = 'mm'
)


 OPEN BuildGroup
    FETCH NEXT FROM BuildGroup INTO @SQL
	
    WHILE @@FETCH_STATUS = 0
    BEGIN
	EXEC (@SQL)
    FETCH NEXT FROM BuildGroup INTO @SQL
        END

    CLOSE BuildGroup
    DEALLOCATE BuildGroup


	
------------------------------------------------------------------------------------------------------------------
--Link
------------------------------------------------------------------------------------------------------------------
DECLARE BuildLink CURSOR READ_ONLY FORWARD_ONLY
FOR SELECT '

CREATE VIEW [mm].[Outcome' + cast(O.Outcome_ID as varchar(10)) + 'MenuLink] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_OutcomeMenuLink] 
  WHERE  Outcome_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Outcome_ID          AS ID 
                               FROM   [app].[Outcome] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = ' + cast(O.Outcome_ID as varchar(10)) + ')
' As SQLStatement
FROM app.Outcome O
WHERE NOT EXISTS
(SELECT 1 FROM INFORMATION_SCHEMA.VIEWS
WHERE TABLE_NAME = 'Outcome' + cast(O.Outcome_ID as varchar(10)) + 'MenuLink' and TABLE_SCHEMA = 'mm'
)


 OPEN BuildLink
    FETCH NEXT FROM BuildLink INTO @SQL
	

 OPEN BuildLink
    FETCH NEXT FROM BuildLink INTO @SQL
	
    WHILE @@FETCH_STATUS = 0
    BEGIN
	EXEC (@SQL)
    FETCH NEXT FROM BuildLink INTO @SQL
        END

    CLOSE BuildLink
    DEALLOCATE BuildLink
GO
PRINT N'Creating [mm].[CreateProgrammeViews]...';


GO
CREATE PROC mm.CreateProgrammeViews
as
------------------------------------------------------------------------------------------------------------------
--Category
------------------------------------------------------------------------------------------------------------------

DECLARE @SQL varchar(max)
DECLARE BuildCategory CURSOR READ_ONLY FORWARD_ONLY
FOR SELECT '

CREATE VIEW [mm].[Programme' + cast(O.Programme_ID as varchar(10)) + 'MenuCategory] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_ProgrammeMenuCategory] 
  WHERE  Programme_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Programme_ID          AS ID 
                               FROM   [app].[Programme] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = ' + cast(O.Programme_ID as varchar(10)) + ')
' As SQLStatement
FROM app.Programme O
WHERE NOT EXISTS
(SELECT 1 FROM INFORMATION_SCHEMA.VIEWS
WHERE TABLE_NAME = 'Programme' + cast(O.Programme_ID as varchar(10)) + 'MenuCategory' and TABLE_SCHEMA = 'mm'
)


 OPEN BuildCategory
    FETCH NEXT FROM BuildCategory INTO @SQL
	
    WHILE @@FETCH_STATUS = 0
    BEGIN
	EXEC (@SQL)
    FETCH NEXT FROM BuildCategory INTO @SQL
        END

    CLOSE BuildCategory
    DEALLOCATE BuildCategory


	
------------------------------------------------------------------------------------------------------------------
--Group
------------------------------------------------------------------------------------------------------------------
DECLARE BuildGroup CURSOR READ_ONLY FORWARD_ONLY
FOR SELECT '

CREATE VIEW [mm].[Programme' + cast(O.Programme_ID as varchar(10)) + 'MenuGroup] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_ProgrammeMenuGroup] 
  WHERE  Programme_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Programme_ID          AS ID 
                               FROM   [app].[Programme] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = ' + cast(O.Programme_ID as varchar(10)) + ')
' As SQLStatement
FROM app.Programme O
WHERE NOT EXISTS
(SELECT 1 FROM INFORMATION_SCHEMA.VIEWS
WHERE TABLE_NAME = 'Programme' + cast(O.Programme_ID as varchar(10)) + 'MenuGroup' and TABLE_SCHEMA = 'mm'
)


 OPEN BuildGroup
    FETCH NEXT FROM BuildGroup INTO @SQL
	
    WHILE @@FETCH_STATUS = 0
    BEGIN
	EXEC (@SQL)
    FETCH NEXT FROM BuildGroup INTO @SQL
        END

    CLOSE BuildGroup
    DEALLOCATE BuildGroup


	
------------------------------------------------------------------------------------------------------------------
--Link
------------------------------------------------------------------------------------------------------------------
DECLARE BuildLink CURSOR READ_ONLY FORWARD_ONLY
FOR SELECT '

CREATE VIEW [mm].[Programme' + cast(O.Programme_ID as varchar(10)) + 'MenuLink] 
AS 
  SELECT Substring(Title, 1, 50) AS Title, 
         Link, 
         ID 
  FROM   [mm].[ALL_ProgrammeMenuLink] 
  WHERE  Programme_ID IN (SELECT ID 
                       FROM   (SELECT Row_number() 
                                        OVER ( 
                                          partition BY 1 
                                          ORDER BY Code) AS IDX, 
                                      Programme_ID          AS ID 
                               FROM   [app].[Programme] 
                               WHERE  Active = 1) AS IDX 
                       WHERE  IDX.IDx = ' + cast(O.Programme_ID as varchar(10)) + ')
' As SQLStatement
FROM app.Programme O
WHERE NOT EXISTS
(SELECT 1 FROM INFORMATION_SCHEMA.VIEWS
WHERE TABLE_NAME = 'Programme' + cast(O.Programme_ID as varchar(10)) + 'MenuLink' and TABLE_SCHEMA = 'mm'
)


 OPEN BuildLink
    FETCH NEXT FROM BuildLink INTO @SQL
	

 OPEN BuildLink
    FETCH NEXT FROM BuildLink INTO @SQL
	
    WHILE @@FETCH_STATUS = 0
    BEGIN
	EXEC (@SQL)
    FETCH NEXT FROM BuildLink INTO @SQL
        END

    CLOSE BuildLink
    DEALLOCATE BuildLink
GO
PRINT N'Creating [dbo].[rptIndicatorStatusValues]...';


GO
CREATE PROC [dbo].[rptIndicatorStatusValues]
( 
	@Outcome_ID int ,
	@ReportingPeriodID int
)
AS

			
SELECT 
	OM.ShortName as OutcomeName
	,OP.ShortName as OutputName
	,SO.ShortName As SubOutputname
	--,CASE 
	--WHEN OMI.Outcome_ID IS NOT NULL
	--	THEN OMIV.IndicatorStatusValuesPercent 
	--	ELSE NULL 
	--	END OutcomeStatusValues
	--	,CASE 
	--WHEN OPI.Output_ID IS NOT NULL
	--	THEN OPIV.IndicatorStatusValuesPercent 
	--	ELSE NULL 
	--	END OutputStatusValues
	--,CASE
	--WHEN SOI.SubOutput_ID IS NOT NULL
	--	THEN SOIV.IndicatorStatusValuesPercent 
	--	ELSE NULL 
	--	END SubOutputStatusValues
	
			
FROM [app].[Outcome] OM 
	INNER JOIN app.Indicator OmI 
	ON OM.Outcome_ID = OMI.Outcome_ID
		AND OMI.IndicatorType_ID = 6
	Inner JOIN app.Output OP
		ON OM.Outcome_ID = OP.Outcome_ID 
	
	INNER JOIN RBM.IndicatorValues OMIV
		ON OMI.IndicatorID = OMIV.Indicator_ID
		
	INNER JOIN app.Indicator OPI 
	ON OP.Output_ID = OPI.Output_ID 
	 AND OPI.IndicatorType_ID = 6

	 
	INNER JOIN RBM.IndicatorValues OPIV
		ON OPI.IndicatorID = OPIV.Indicator_ID

	INNER JOIN [app].[SubOutput] SO
		ON OP.Output_ID = SO.Output_ID
	 INNER JOIN app.Indicator SOI 
	ON SO.SubOutput_ID = SOI.SubOutput_ID 
	 AND SOI.IndicatorType_ID = 6

	 
	INNER JOIN RBM.IndicatorValues SOIV
		ON SOI.IndicatorID = SOIV.Indicator_ID

	WHERE (OM.Outcome_ID = @Outcome_ID 
			OR @Outcome_ID = 0)
		AND
			(
				OMIV.ReportPeriodID = @ReportingPeriodID
				AND 
				OPIV.ReportPeriodID = @ReportingPeriodID
				AND 
				SOIV.ReportPeriodID = @ReportingPeriodID
			)
GO
PRINT N'Creating [dbo].[rptStatusValuesOutput]...';


GO
CREATE PROC [dbo].[rptStatusValuesOutput]
    (
      @Outcome_ID INT ,
      @ReportingPeriodID INT
    )
AS 
    SELECT  OM.ShortName AS OutcomeName
            ,OP.ShortName AS OutputName
            ,SO.ShortName AS SubOutputname
            ,ST.Value StatusTypeValue
            ,ST.Name StatusType
            ,RP.YearName
            ,RP.ReportingPeriod
			,OM.Outcome_ID AS Outcome_ID
			,OP.Output_ID AS OutputID
			,SO.SubOutput_ID AS SubOutputID
			,RP.YearNumber

    FROM    [RBM].[StatusValues] SV
            INNER JOIN Core.StatusType ST ON SV.StatusTypeID = ST.ID
            LEFT JOIN [app].[SubOutput] SO ON SV.SubOutput_ID = SO.SubOutput_ID
            LEFT JOIN [app].[Output] OP ON SV.Output_ID = OP.Output_ID
                                       OR SO.Output_ID = OP.Output_ID
            LEFT JOIN [app].[Outcome] OM ON SV.Outcome_ID = OM.Outcome_ID
                                            OR OP.Outcome_ID = OM.Outcome_ID
            INNER JOIN [Core].[ReportingPeriod] RP ON SV.ReportingPeriodID = RP.ID
    WHERE   ( OM.Outcome_ID = @Outcome_ID
              OR @Outcome_ID = 0
            )
            AND ( SV.ReportingPeriodID = @ReportingPeriodID
                  OR @ReportingPeriodID = 0
                )
GO
PRINT N'Creating [dbo].[uspActivityProgress]...';


GO


CREATE PROC [dbo].[uspActivityProgress]
--declare
@DataVersion_ID varchar(255)=5
,@Activity_ID int = 0
AS
/*
--begin
DECLARE @DataVersion_ID varchar(255)=0
,@Activity_ID int = 0
,@Project_ID int = 0
, @Milestone_ID int = 0
*/
SELECT    

DENSE_RANK() over(order by m.Code)  %2  RN,
p.Code ProjectCode,
p.LongName ProjectLongName,
CONVERT(Date, CAST(RP.StartDateID as char(8))) ReportingPeriodStartDate,
CONVERT(Date, CAST(RP.EndDateID as char(8))) ReportingPeriodEndDate,

/*case when (mv.ActualValue / m.Target * 100) >= 100 then RPEnd.YearName else null end*/RPEnd.YearName  CompletionFinancialYear,
/*case when (mv.ActualValue / m.Target * 100) >= 100 then RPEnd.ReportingPeriod else null end*/RPEnd.ReportingPeriod  CompletionCycle,
mv.MilestoneValues_ID MID,
m.Code MilestoneCode,
m.LongName MilestoneLongName,
 m.Target AS TargetValue,
  mv.ActualValue ActualValue,
  (mv.ActualValue / m.Target * 100) MilestoneProgressPercent,
  
mv.DataVersion_ID newDV,
RP.YearName FinancialYear
,RP.ReportingPeriod ReportCycle,
RPEnd.EndDateID ,
DATEADD(d, 
(DATEDIFF(D,m.BaselineDate, case when (mv.ActualValue / m.Target)=100 then mv.ActualDate else null end) * (mv.ActualValue / m.Target * 100))
, m.BaselineDate) MilestoneCurrentDate,

mv.Milestone_ID, 
a.LongName ActivityLongName,
a.ShortName ActivityCode,
m.BaselineDate MilestoneStartDate,
CONVERT(varchar(10),m.TargetDate,111) MilestoneCompletionDate ,
 CAST(RP.StartDateID as varchar(255)) + ' - ' +  CAST(rp.EndDateID as varchar(255)) as ReportingPeriod,
      RP.StartDateID ReportingPeriodStartDate_ID
      ,RP.EndDateID ReportingPeriodEndDate_ID,
	  RP.EndDateID EndingReportCycleReportDate_ID,
mv.MilestoneValues_ID ActivityMilestone_ID, 
null RolledUpToActivity_ID
,mv.Notes,
mv.ActualLabel Title,
mv.DataVersion_ID,
 m.LongName, m.Code, m.ShortName
, m.Baseline, m.BaselineString

, m.TargetString TargetValueString

                         
                         , mv.ActualLabel ActualValueString
                         , m.ReleaseDate
                         , m.ReportingDate
                         
						 ,RPEnd.EndDateID MilestoneCompletionEndCycleDate_ID
						 ,RPEnd.EndDateID MilestoneCompletionDate_ID
                         , m.BaselineDateID MilestoneStartDate_ID
                         ,RP.StartDateID ReportCycleDate_ID, 
                         convert(date,CAST(RPEnd.EndDateID as char(8))) AS ReportCycleDate
                         

  FROM 
  app.Milestone M
  
  INNER JOIN Core.ReportingPeriod RP 
  on  
  (RP.StartDateID BETWEEN M.BaselineDateID AND M.TargetDateID
	 AND RP.EndDateID BETWEEN M.BaselineDateID AND M.TargetDateID)
	 OR (M.BaselineDateID BETWEEN RP.StartDateID AND RP.EndDateID)
	 OR (M.TargetDateID BETWEEN RP.StartDateID AND RP.EndDateID)

	 INNER JOIN Core.ReportingPeriod RPStart
	 ON M.BaselineDateID BETWEEN RPStart.StartDateID AND RPStart.EndDateID

	  JOIN Core.ReportingPeriod RPEnd
	 ON M.TargetDateID BETWEEN RPEnd.StartDateID AND RPEnd.EndDateID


  LEFT JOIN RBM.MilestoneValues mv
  on M.MilestoneID = mv.Milestone_ID
  AND (MV.DataVersion_ID =  @DataVersion_ID OR @DataVersion_ID = 0 )
  AND MV.ReportPeriodID = RP.ID
  
   JOIN app.Activity a
    on m.Activity_ID = a.Activity_ID
	and (m.Activity_ID = @Activity_ID or @Activity_ID = 0)
	JOIN  app.Project P
	on a.ProjectID = P.ProjectID

order by m.Code, RP.StartDateID ASC
GO
PRINT N'Creating [dbo].[uspCreateSysDefaultColumns]...';


GO

-- =============================================
-- Author:		Andreas Bergstedt
-- Create date: 2013-03-15
-- Description:	Creates basic System Parameters for delta and processing
-- =============================================
CREATE PROCEDURE [dbo].[uspCreateSysDefaultColumns]
	@@FTable as Nvarchar(500)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

 
--Declare @@FTable as Nvarchar(500) = 'app.Output'
Declare @@Table as Nvarchar(500) = Substring(@@FTable,(Charindex('.',@@FTable,1)+1),500)
Declare @@TableSchema as Nvarchar(255) = Substring(@@FTable,1,(Charindex('.',@@FTable,1)-1))-- 'app'
Declare @@SQL as Nvarchar(Max)
--Select @@Table,@@FTable,@@TableSchema

Set @@SQL ='
IF not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = ''' + @@Table + '''
            And TABLE_SCHEMA = ''' + @@TableSchema + ''' 
           AND  COLUMN_NAME = ''sys_CreatedOn'') ALTER TABLE ' + @@TableSchema + '.' + @@Table +' ADD sys_CreatedOn DateTime  Null  
IF not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = ''' + @@Table + ''' 
            And TABLE_SCHEMA = ''' + @@TableSchema + ''' 
           AND  COLUMN_NAME = ''sys_CreatedBy'') ALTER TABLE ' + @@TableSchema + '.' + @@Table +' add sys_CreatedBy Nvarchar(255)  Null

IF not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = ''' + @@Table + ''' 
            And TABLE_SCHEMA = ''' + @@TableSchema + ''' 
           AND  COLUMN_NAME = ''sys_ModifiedOn'') ALTER TABLE ' + @@TableSchema + '.' + @@Table +' add sys_ModifiedOn DateTime  Null 

IF not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = ''' + @@Table + ''' 
            And TABLE_SCHEMA = ''' + @@TableSchema + ''' 
           AND  COLUMN_NAME = ''sys_ModifiedBy'') ALTER TABLE ' + @@TableSchema + '.' + @@Table +' add sys_ModifiedBy Nvarchar(255)  Null 

IF not EXISTS( SELECT * FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = ''' + @@Table + ''' 
            And TABLE_SCHEMA = ''' + @@TableSchema + ''' 
           AND  COLUMN_NAME = ''Active'') ALTER TABLE ' + @@TableSchema + '.' + @@Table +' add Active Int Not Null DEFAULT 1

'


--Select @@SQL
Exec (@@SQL)

END
GO
PRINT N'Creating [dbo].[uspIndicatorsList]...';


GO
CREATE PROC [dbo].[uspIndicatorsList]

@MDXKey varchar(255),
@DataVersion_ID varchar(255)

as

--ALTER VIEw [dwPOA].[FactIndicatorValues]
--as

DECLARE @Outcome_ID int =0 
,@Output_ID int = 0
,@SubOutput_ID int = 0
,@Indicator_ID int = 0

IF CHARINDEX('Outcome', @MDXKey ) > 0 
SET @Outcome_ID  = dbo.fn_StripMDXKey(@MDXKey)
ELSE
IF CHARINDEX('Sub Output', @MDXKey ) > 0 
SET @SubOutput_ID  = dbo.fn_StripMDXKey(@MDXKey)
ELSE
IF CHARINDEX('Output', @MDXKey ) > 0 
SET @Output_ID  = dbo.fn_StripMDXKey(@MDXKey)
ELSE
IF CHARINDEX('Indicator', @MDXKey ) > 0 
SET @Indicator_ID  = dbo.fn_StripMDXKey(@MDXKey)


IF ISNUMERIC(@MDXKey) = 1 SET @Outcome_ID = @MDXKey


SELECT  
DENSE_RANK() OVER (order by I.Code) %2 RN,
@MDXKey Original,
dbo.fn_StripMDXKey(@MDXKey ) New,
@Outcome_ID OM,
@Output_ID O,
@SubOutput_ID So,
@INdicator_id I,
Type = 'Indicator',
om.Code OutcomeCode  , 
o.Code OutputCode  , 
so.Code SubOutputCode  , 
i.Code IndicatorCode  , 
null ActivityCode  , 
null MilestoneCode  , 


i.LongName RollupName,

om.LongName OutcomeName  , 
o.LongName OutputName  , 
so.LongName SubOutputName  , 
i.LongName IndicatorName  , 

Path = om.Code + ' 
' + isnull(o.Code  , '') + ' 
' + isnull(so.Code  , '')  , 
cast(rc.StartDateID as varchar) StartDate  , 
cast(rc.EndDateID as varchar) EndDate  , 

cast(rc.StartDateID as varchar) + ' - ' + 
cast(rc.EndDateID as varchar)  ReportingPeriod  , 
null NextDate  , 
ISNULL([iv].[IndicatorValues_ID]  , 0) [IndicatorValues_ID] 
        , i.[IndicatorID] [Indicator_ID]
        , i.[Baseline] [Baseline]
        ,  i.[BaselineString] BaselineString
        , i.Target [TargetValue]
        ,   i.TargetString [TargetValueString]
        , [iv].[ActualValue]
        , [iv].[ActualLabel] as [ActualValueString]
        , i.UnitOfMeasure
      
        , i.[Output_ID]
        , i.[Outcome_ID]
        , iv.[BusinessKey]
        , iv.[Notes]
        , iv.ActualLabel as Title
        , rc.ReportingPeriod ReportCycle
        , i.ShortName
        , i.Code
        , i.LongName
        ,null [VerifiedActualValue]
        , null [VerifiedActualNotes]

        , i.[IndicatorType_ID]
        /*, i.[Activity_ID]*/
        , i.[SubOutput_ID]
        , ISNULL(iv.[DataVersion_ID]  , 0) DataVersion_ID
        , ISNULL(iv.Location_ID  , 1) Location_ID
         
        ,  rc.ReportingPeriod  ReportCycleDate_ID
         
                       , i.BaselineDate
        , BaselineDate_ID = (YEAR(i.BaselineDate) * 10000)  + (MONTH(i.BaselineDate) * 100) + DAY(i.BaselineDate)
        , i.TargetDate
         , TargetDate_ID = (YEAR(i.TargetDate) * 10000)  + (MONTH(i.TargetDate) * 100) + DAY(i.TargetDate)
              , RolledUpToOutcome_ID = ISNULL(i.Outcome_ID  ,  o.Outcome_ID)
        , RolledUpToOutput_ID = ISNULL(i.Output_ID  ,  so.Output_ID)
        , RolledUpToSubOutput_ID = i.SubOutput_ID  
        /*, RolledUpToActivity_ID = i.Activity_ID*/
     --       , TermSetID = DIML.TermsetDeepGrainID
	  , i.Baseline OriginalBaseline
	  , i.Target Target2014
	  , rc.StartDateID ReportingPeriodStartDate_ID
	  , rc.EndDateID ReportingPeriodEndDate_ID	
	  , null NextReportingPeriodReleaseDate_ID
	
	
	
	  , OutcomeMDX  = '[Outcome].[Outcome].%26[' + CAST (om.Outcome_ID  as varchar(8)) + ']'
	  , OutputMDX = '[Output].[Output].%26[' + CAST (o.Output_ID as varchar(8))  + ']'
	  , SubOutputMDX = '[Sub Output].[Sub Output].%26[' + CAST (SO.SubOutput_ID as varchar(8)) + ']'
	
	  ,  ParentMDX =  
	CASE WHEN i.Outcome_ID IS Not NULL 
	THEN '[Outcome].[Outcome].%26[' + CAST (i.Outcome_ID  as varchar(8)) + ']'
	
	WHEN i.Output_ID IS Not NULL 
	THEN '[Output].[Output].%26[' + CAST (i.Output_ID as varchar(8))  + ']'
	
	WHEN i.SubOutput_ID IS Not NULL 
	THEN '[Sub Output].[Sub Output].%26[' + CAST (i.SubOutput_ID as varchar(8)) + ']'
	END
	, om.[OutcomeSiteName]
  FROM app.Indicator i 
 LEFT join RBM.[IndicatorValues] iv
  on i.IndicatorID = iv.Indicator_ID
     and (iv.DataVersion_ID = @DataVersion_ID OR @DataVersion_ID = 0)
  Left JOIN Core.ReportingPeriod rc
  on   iv.ReportPeriodID = rc.ID
 
    
LEFT OUTER JOIN [app].[SubOutput] SO


on i.SubOutput_ID = so.SubOutput_ID 

LEFT OUTER JOIN app.Output o
on i.Output_ID = o.Output_ID
OR so.Output_ID = o.Output_ID

LEFT OUTER JOIN [app].[Outcome] om
on i.Outcome_ID = om.Outcome_ID
OR o.Outcome_ID = om.Outcome_ID


LEFT JOIN Core.DimDate DDStart
on rc.StartDateID = DDStart.DateID

LEFT JOIN Core.DimDate DDEnd
on rc.EndDateID= DDEnd.DateID

--LEFT JOIN dwPoa.DimDate DDNext
--on iv.NextReportingPeriodReleaseDate_ID = DDNext.DateKey

Where 
 ( i.Outcome_ID  = @Outcome_ID OR @Outcome_ID = 0)
AND (i.Output_ID  = @Output_ID OR @Output_ID = 0)
AND (i.SubOutput_ID = @SubOutput_ID OR @SubOutput_ID = 0) 
AND (i.IndicatorID  = @Indicator_ID OR @Indicator_ID = 0 OR iv.Location_ID is null)



----------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------


order by OutcomeCode  ASC ,  OutputCode  ASC , SubOutputCode  ASC , IndicatorCode  ASC , ReportCycleDate_ID DESC
GO
PRINT N'Creating [dbo].[uspIndicatorTimeline]...';


GO
CREATE PROC [dbo].[uspIndicatorTimeline]

	@DataVersion_ID int --varchar(255)
, @indicator_id int --varchar(255)
--, @Location_ID int =0 
--, @Location_ID int =1 
AS
/*
declare 
@DataVersion_ID int  = 0
, @indicator_id int = 1
--, @TermSetIndicator_ID int = 0
, @Location_ID int =0 
*/

SELECT    

DENSE_RANK() Over (order by Code) %2 RN,
UnitOfMeasure,
CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID) = 1 THEN ISNULL(OriginalBaseline,0)
ELSE NULL END

 BaselineStart,
 
 CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID) = 1 THEN ISNULL(CAST(OriginalBaseline as varchar(255)), BaselineString)
ELSE NULL END

 BaselineStartString,

CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID DESC) = 1 THEN ISNULL(FinalTarget,0)
ELSE NULL END TargetEnd, 
 FinalTarget,
 
 
CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID DESC) = 1 THEN ISNULL(Cast(FinalTarget as varchar(255)), TargetValueString)
ELSE NULL END TargetEndString, 
dbo.fn_StripMDXKey(@DataVersion_ID) DataVersionParm,

FinancialYear,
--FIV.ExtrapolatedTarget,
FIV.LocationName,
FIV.IndicatorValues_ID, FIV.Indicator_ID
,FIV.Notes,FIV.Title,FIV.DataVersion_ID,
 FIV.ReportCycle, FIV.LongName, FIV.Code, FIV.ShortName
, FIV.Baseline, FIV.BaselineString
, ISNULL(FIV.TargetValue, 0) AS TargetValue
, FIV.TargetValueString
, ISNULL(FIV.ActualValue , CASE WHEN Title IS null OR Title = '' then null else 0 end)
                         AS ActualValue
                         , FIV.ActualLabel

                         , FIV.ReportCycleDate_ID, 
                         CONVERT(DATETIME, CONVERT(VARCHAR, FIV.ReportCycleDate_ID), 112) AS ReportCycleDate
                         


--MAX(RowX) over (partition by indicator_id),
--ROW_NUMBER() over (partition by indicator_id order by ReportCycleDate_ID desc) ,
, --CASE WHEN RowX > 1 THEN 
 /*OriginalBaseline + ( (( FinalTarget - OriginalBaseline)/  (CAST(MAX(RowX) over (partition by indicator_id)  as float) -1))
  * CAST((ROW_NUMBER() over (partition by indicator_id order by ReportCycleDate_ID)) -1  as float) )*/
  OriginalBaseline + (
    (
		Case wHEN FinalTargetPeriodID -BaselinePeriodID = 0 THEN 0 ELSE ( FinalTarget - OriginalBaseline) / 
		(	 FinalTargetPeriodID -BaselinePeriodID )END 
		)
	* (CurrentReportPeriodID-BaselinePeriodID)
	)
 --ELSE 
 --Baseline END
 AS ExtrapolatedTarget
 ,fiv.Location_ID

 FROM 

 (
SELECT  
i.UnitOfMeasure,
rc.YearNumber financialYear,
ROW_NUMBER() over (partition by i.IndicatorID order by rc.StartDateID) as RowX,
ISNULL([IndicatorValues_ID],0) [IndicatorValues_ID] 
      ,i.[IndicatorID] [Indicator_ID]
      ,i.[Baseline] [Baseline]
      , i.[BaselineString] BaselineString
      ,i.Target [TargetValue]
      ,i.TargetString [TargetValueString]
      ,[ActualValue]
      ,[ActualLabel]
      ,i.[Output_ID]
      ,i.[Outcome_ID]
      ,iv.[BusinessKey]
      ,iv.[Notes]
      ,iv.ActualLabel Title
      --,iv.Title
      ,rc.ReportingPeriod ReportCycle
      ,i.ShortName
      ,i.Code
      ,i.LongName
      ,null [VerifiedActualValue]
      ,null [VerifiedActualNotes]

      ,i.[IndicatorType_ID]
      --,i.[Activity_ID]
      ,i.[SubOutput_ID]
      ,ISNULL(iv.[DataVersion_ID],0) DataVersion_ID

      ,ISNULL(iv.Location_ID,1) Location_ID

         
      ,rc.EndDateID  ReportCycleDate_ID
      ,rc.StartDateID ReportCycleStartDateID
                     ,i.BaselineDate
      ,BaselineDate_ID = (YEAR(i.BaselineDate) * 10000)  + (MONTH(i.BaselineDate) * 100) + DAY(i.BaselineDate)
      ,i.TargetDate
       ,TargetDate_ID = (YEAR(i.TargetDate) * 10000)  + (MONTH(i.TargetDate) * 100) + DAY(i.TargetDate)
            ,RolledUpToOutcome_ID = ISNULL(i.Outcome_ID, o.Outcome_ID)
      ,RolledUpToOutput_ID = ISNULL(i.Output_ID, so.Output_ID)
      ,RolledUpToSubOutput_ID = i.SubOutput_ID
      --,RolledUpToActivity_ID = i.Activity_ID
      --  ,TermSetID = DIML.TermsetDeepGrainID
	,i.Baseline OriginalBaseline
	,i.Target FinalTarget
	--,rc.StartDateID ReportingPeriodStartDate_ID
	--,rc.EndDateID 	
	,null NextReportingPeriodReleaseDate_ID
	,l.Name LocationName
	,FinalTargetPeriod.ID FinalTargetPeriodID
	,rc.ID CurrentReportPeriodID
	,BaselinePeriod.ID BaselinePeriodID
  FROM app.Indicator i 

   
  INNER JOIN Core.ReportingPeriod rc
  on rc.EndDateID >=   i.BaselineDate_ID 
  and rc.StartDateID <= i.TargetDate_ID
  

  LEFT join RBM.[IndicatorValues] iv
  on i.IndicatorID = iv.Indicator_ID
    and iv.ReportPeriodID  = rc.ID 
	and  (@DataVersion_ID = 0 OR iv.DataVersion_ID = @DataVersion_ID)
	--and (iv.Location_ID = @Location_ID OR @Location_ID = 0 )
    

  INNER JOIN Core.ReportingPeriod FinalTargetPeriod
  ON i.TargetDate_ID BETWEEN
   FinalTargetPeriod.StartDateID  AND
   FinalTargetPeriod.EndDateID 
    
	INNER JOIN Core.ReportingPeriod BaselinePeriod
  ON i.BaselineDate_ID BETWEEN
  BaselinePeriod.StartDateID 
  AND
  BaselinePeriod.EndDateID 
  
  
  
    
    
/*LEFT OUTER JOIN app.Activity a
on i.Activity_ID = a.Activity_ID*/
LEFT OUTER JOIN [app].[SubOutput] SO
on i.SubOutput_ID = so.SubOutput_ID 

LEFT OUTER JOIN app.Output o
on i.Output_ID = o.Output_ID
OR so.Output_ID = o.Output_ID
LEFT OUTER JOIN Core.Location l
on (iv.Location_ID = l.Location_ID )



  --where 
/*
*/
) FIV


where (Indicator_ID = @indicator_id OR @indicator_id  = 0 ) 


order by ReportCycleDate_ID ASC
GO
PRINT N'Creating [dbo].[uspIndicatorTimelineWithLocation]...';


GO
CREATE PROC [dbo].[uspIndicatorTimelineWithLocation]

    @DataVersion_ID int --varchar(255)
, @indicator_id int --varchar(255)
--, @Location_ID int =0 
--, @Location_ID int =1 
AS
/*
declare 
@DataVersion_ID int  = 0
, @indicator_id int = 1
--, @TermSetIndicator_ID int = 0
, @Location_ID int =0 
*/

SELECT    

DENSE_RANK() Over (order by fiv.Code) %2 RN,
UnitOfMeasure,
 Case When 
        (CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID) = 1 THEN ISNULL(OriginalBaseline,0)
        ELSE NULL END) is null and OriginalBaseline + (
    (
        Case wHEN FinalTargetPeriodID -BaselinePeriodID = 0 THEN 0 ELSE ( FinalTarget - OriginalBaseline) / 
        (	 FinalTargetPeriodID -BaselinePeriodID )END 
        )
    * (CurrentReportPeriodID-BaselinePeriodID)
    ) = OriginalBaseline Then ISNULL(OriginalBaseline,0) 
            Else 
            (CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID) = 1 THEN ISNULL(OriginalBaseline,0)
        ELSE NULL END)
 End
 BaselineStart,
 
  Case When 
        ( CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID) = 1 THEN ISNULL(CAST(OriginalBaseline as varchar(255)), BaselineString)
ELSE NULL END) is null and OriginalBaseline + (
    (
        Case wHEN FinalTargetPeriodID -BaselinePeriodID = 0 THEN 0 ELSE ( FinalTarget - OriginalBaseline) / 
        (	 FinalTargetPeriodID -BaselinePeriodID )END 
        )
    * (CurrentReportPeriodID-BaselinePeriodID)
    ) = OriginalBaseline Then ISNULL(CAST(OriginalBaseline as varchar(255)), BaselineString) 
            Else 
            ( CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID) = 1 THEN ISNULL(CAST(OriginalBaseline as varchar(255)), BaselineString)
ELSE NULL END)
 End
 /*
 CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID) = 1 THEN ISNULL(CAST(OriginalBaseline as varchar(255)), BaselineString)
ELSE NULL END
*/
 BaselineStartString,

/*CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID DESC) = 1 THEN ISNULL(FinalTarget,0)
ELSE NULL END */
 Case When 
        ( CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID DESC) = 1 THEN ISNULL(FinalTarget,0)
ELSE NULL END) is null and OriginalBaseline + (
    (
        Case wHEN FinalTargetPeriodID -BaselinePeriodID = 0 THEN 0 ELSE ( FinalTarget - OriginalBaseline) / 
        (	 FinalTargetPeriodID -BaselinePeriodID )END 
        )
    * (CurrentReportPeriodID-BaselinePeriodID)
    ) = FinalTarget Then ISNULL(FinalTarget,0) 
            Else 
            ( CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID DESC) = 1 THEN ISNULL(FinalTarget,0)
ELSE NULL END)
 End
TargetEnd, 
 FinalTarget,
 
 
/*CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID DESC) = 1 THEN ISNULL(Cast(FinalTarget as varchar(255)), TargetValueString)
ELSE NULL END */
 Case When 
        ( CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID DESC) = 1 THEN ISNULL(Cast(FinalTarget as varchar(255)), TargetValueString)
ELSE NULL END) is null and OriginalBaseline + (
    (
        Case wHEN FinalTargetPeriodID -BaselinePeriodID = 0 THEN 0 ELSE ( FinalTarget - OriginalBaseline) / 
        (	 FinalTargetPeriodID -BaselinePeriodID )END 
        )
    * (CurrentReportPeriodID-BaselinePeriodID)
    ) = FinalTarget Then ISNULL(Cast(FinalTarget as varchar(255)), TargetValueString) 
            Else 
            ( CASE WHEN ROW_NUMBER() Over (order by ReportCycleDate_ID DESC) = 1 THEN ISNULL(Cast(FinalTarget as varchar(255)), TargetValueString)
ELSE NULL END)
 End

TargetEndString, 
dbo.fn_StripMDXKey(@DataVersion_ID) DataVersionParm,

FinancialYear,
--FIV.ExtrapolatedTarget,
ISNULL(FIV.LocationName,LocationName) as LocationName,
Case When FIV.LocationName is Null Then Location_ID Else FIV.Location_ID End as Location_ID,
FIV.IndicatorValues_ID, FIV.Indicator_ID
,FIV.Notes,FIV.Title,FIV.DataVersion_ID,
 FIV.ReportCycle, FIV.LongName, FIV.Code, FIV.ShortName
, FIV.Baseline, FIV.BaselineString
, ISNULL(FIV.TargetValue, 0) AS TargetValue
, FIV.TargetValueString
, ISNULL(FIV.ActualValue ,0) --FIV.Baseline)--CASE WHEN Title IS null OR Title = '' then null else 0 end)
                         AS ActualValue
                         , FIV.ActualLabel

                         , FIV.ReportCycleDate_ID, 
                         CONVERT(DATETIME, CONVERT(VARCHAR, FIV.ReportCycleDate_ID), 112) AS ReportCycleDate
                         


--MAX(RowX) over (partition by indicator_id),
--ROW_NUMBER() over (partition by indicator_id order by ReportCycleDate_ID desc) ,
, --CASE WHEN RowX > 1 THEN 
 /*OriginalBaseline + ( (( FinalTarget - OriginalBaseline)/  (CAST(MAX(RowX) over (partition by indicator_id)  as float) -1))
  * CAST((ROW_NUMBER() over (partition by indicator_id order by ReportCycleDate_ID)) -1  as float) )*/
  OriginalBaseline + (
    (
        Case wHEN FinalTargetPeriodID -BaselinePeriodID = 0 THEN 0 ELSE ( FinalTarget - OriginalBaseline) / 
        (	 FinalTargetPeriodID -BaselinePeriodID )END 
        )
    * (CurrentReportPeriodID-BaselinePeriodID)
    )
 --ELSE 
 --Baseline END
 AS ExtrapolatedTarget
 ,fiv.SubOutputSN
 ,fiv.OutputSN

 FROM 

 (
SELECT  ISNULL([IndicatorValues_ID],0) [IndicatorValues_ID] 
      ,[ActualValue]
      ,[ActualLabel]
      ,iv.[BusinessKey]
      ,iv.[Notes]
      ,iv.ActualLabel Title
      --,iv.Title
      ,ISNULL(iv.[DataVersion_ID],-1) DataVersion_ID
      --,ISNULL(iv.Location_ID,-1) Location_ID
      ,RolledUpToOutcome_ID = ISNULL(TargetFIV.Outcome_ID, o.Outcome_ID)
      ,RolledUpToOutput_ID = ISNULL(TargetFIV.Output_ID, so.Output_ID)
      ,RolledUpToSubOutput_ID = TargetFIV.SubOutput_ID
    ,so.ShortName as SubOutputSN
    ,o.ShortName as OutputSN
, TargetFIV.* FROM  (

    SELECT 
    Location.Location_ID,
    Location.Geog,
    rc.ID ReportingPeriod,
    i.UnitOfMeasure,
    rc.YearNumber financialYear,
    ROW_NUMBER() over (partition by i.IndicatorID order by rc.StartDateID) as RowX
          ,i.[IndicatorID] [Indicator_ID]
          ,i.[Baseline] [Baseline]
          , i.[BaselineString] BaselineString
          ,i.Target [TargetValue]
          ,i.TargetString [TargetValueString]
          ,i.[Output_ID]
          ,i.[Outcome_ID]
          ,rc.ReportingPeriod ReportCycle
          ,i.ShortName
          ,i.Code
          ,i.LongName
          ,null [VerifiedActualValue]
          ,null [VerifiedActualNotes]

          ,i.[IndicatorType_ID]
          --,i.[Activity_ID]
          ,i.[SubOutput_ID]
         
          ,rc.EndDateID  ReportCycleDate_ID
          ,rc.StartDateID ReportCycleStartDateID
                         ,i.BaselineDate
          ,BaselineDate_ID = (YEAR(i.BaselineDate) * 10000)  + (MONTH(i.BaselineDate) * 100) + DAY(i.BaselineDate)
          ,i.TargetDate
           ,TargetDate_ID = (YEAR(i.TargetDate) * 10000)  + (MONTH(i.TargetDate) * 100) + DAY(i.TargetDate)
        ,i.Baseline OriginalBaseline
        ,i.Target FinalTarget
        --,rc.StartDateID ReportingPeriodStartDate_ID
        --,rc.EndDateID 	
        ,null NextReportingPeriodReleaseDate_ID
        ,Location.Name LocationName
        ,FinalTargetPeriod.ID FinalTargetPeriodID
        ,rc.ID CurrentReportPeriodID
        ,BaselinePeriod.ID BaselinePeriodID
          FROM app.Indicator i 
      INNER JOIN Core.ReportingPeriod rc
          on rc.EndDateID >=   i.BaselineDate_ID 
        and rc.StartDateID <= i.TargetDate_ID
  
        INNER JOIN Core.ReportingPeriod FinalTargetPeriod
          ON i.TargetDate_ID BETWEEN
           FinalTargetPeriod.StartDateID  AND
           FinalTargetPeriod.EndDateID 
    
        INNER JOIN Core.ReportingPeriod BaselinePeriod
          ON i.BaselineDate_ID BETWEEN
          BaselinePeriod.StartDateID 
          AND 	  BaselinePeriod.EndDateID 

    CROSS JOIN Core.Location
) TargetFIV 

LEFT JOIN RBM.IndicatorValues IV 
ON TargetFIV.ReportingPeriod = IV.ReportPeriodID
    and TargetFIV.Location_ID = IV.Location_ID

LEFT JOIN app.SubOutput SO
    ON TargetFIV.SubOutput_ID = SO.SubOutput_ID

LEFT JOIN app.Output O 
    ON TargetFIV.Output_ID = O.Output_ID
        OR SO.Output_ID = O.Output_ID

LEFT JOIN app.Outcome OM 
    ON TargetFIV.Outcome_ID = OM.Outcome_ID
        OR  O.Outcome_ID = OM.Outcome_ID


) FIV
where (Indicator_ID = @indicator_id OR @indicator_id  = 0 ) 


order by ReportCycleDate_ID ASC
GO
PRINT N'Creating [dbo].[uspIndicatorTimelineWithLocation_ByReportPeriod]...';


GO

CREATE PROC [dbo].[uspIndicatorTimelineWithLocation_ByReportPeriod]

    @DataVersion_ID int --varchar(255)
, @indicator_id int --varchar(255)

, @ReportPeriodID int
as



    SELECT 
	iv.ActualValue,
    L.Location_ID,
    L.Geog,
      rp.ReportingPeriod ReportCycle
    
         
          ,RP.EndDateID  ReportCycleDate_ID
          ,RP.StartDateID ReportCycleStartDateID
        ,L.Name LocationName
   	FROM RBM.IndicatorValues IV 

      INNER JOIN Core.ReportingPeriod RP
          on iv.ActualDate BETWEEN RP.FirstCycleDate and RP.LastCycleDate
  
      
    INNER JOIN Core.Location L
	ON iv.Location_ID   = l.Location_ID

	WHERE 
	(IV.DataVersion_ID = @DataVersion_ID OR @DataVersion_ID = 0)
	and
	iv.Indicator_ID = @indicator_id
	and 
	rp.ID = @ReportPeriodID
GO
PRINT N'Creating [dbo].[uspAlterAllTableswithsys_XX]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE  uspAlterAllTableswithsys_XX
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @i int
DECLARE @FTN Nvarchar(500)
DECLARE @TableList TABLE (
    idx smallint Primary Key IDENTITY(1,1)
    , FTN Nvarchar(500) 
)



INSERT @TableList
  Select s.name + '.' + o.name as FTN 
 from Sys.objects o 
 Inner Join sys.schemas s on o.schema_id=s.schema_id
 where o.type like 'U ' 

SET @i = 1
Declare @numrows int = (SELECT COUNT(*) FROM @TableList)
IF @numrows > 0
    WHILE (@i <= (SELECT MAX(idx) FROM @TableList))
    BEGIN


        -- get the next employee primary key
        SET @FTN = (SELECT FTN FROM @TableList WHERE idx = @i)


        --
        -- do something with this employee
        EXEC	 [dbo].[uspCreateSysDefaultColumns]
		@@FTable = @FTN
    

        -- increment counter for next employee
        SET @i = @i + 1
    END
    

 
 

END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'df7075b9-8e55-473f-bb80-cadb5eae243f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('df7075b9-8e55-473f-bb80-cadb5eae243f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3ca8f115-4762-4975-beff-0ba30277ae78')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3ca8f115-4762-4975-beff-0ba30277ae78')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '326dfb62-b5a4-4ace-a05a-79a03f5f175c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('326dfb62-b5a4-4ace-a05a-79a03f5f175c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '05cc2cad-5841-4284-baef-f38e409d4953')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('05cc2cad-5841-4284-baef-f38e409d4953')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '39eff130-d5f2-454d-bc3f-7b10d84cf7ec')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('39eff130-d5f2-454d-bc3f-7b10d84cf7ec')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '296868f9-083d-43bd-9a1f-4549597fb226')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('296868f9-083d-43bd-9a1f-4549597fb226')

GO

GO

/*GeoSpatialData*/

IF ( EXISTS ( SELECT    [master].[dbo].[sysdatabases].[name]
              FROM      master.dbo.sysdatabases
              WHERE     ( '[' + [master].[dbo].[sysdatabases].[name] + ']' = 'SpatialProvince'
                          OR [master].[dbo].[sysdatabases].[name] = 'SpatialProvince'
                        ) ) ) 
    BEGIN
        INSERT  INTO Meerkat.Core.DimMunicipalityGEOM
                ( [Meerkat].[Core].[DimMunicipalityGEOM].[ID] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[LBL] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[FIP] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[MMT_ID] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[SHORT__FRM] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[LONG_FRM] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM0] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM1] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM2] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM3] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM4] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM5] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[geom]
                )
                SELECT  [SpatialProvince].[dbo].[SimpleProvince].[Location_ID] AS [ID] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[ISO] AS [LBL] ,
                        '' AS [FIP] ,
                        '' [MMT_ID] ,
                        '' [SHORT__FRM] ,
                        '' [LONG_FRM] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[ADM0] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[ADM1] ,
                        '' [ADM2] ,
                        '' [ADM3] ,
                        '' [ADM4] ,
                        '' [ADM5] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[Geog] AS [geom]
                FROM    [SpatialProvince].dbo.[SimpleProvince] 
    END

/*ALTER TABLE app.SubOutput ADD CONSTRAINT
    DF_SubOutput_Active DEFAULT 1 FOR Active
GO*/


/* Insert Data */
/*Insert Core data*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT  [Core].[ActiveType]
        ( [Core].[ActiveType].[ID] ,
          [Core].[ActiveType].[Code] ,
          [Core].[ActiveType].[Name]
        )
        SELECT  -1 ,
                N'Deleted' ,
                N'Deleted'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ActiveType
                             WHERE  [Core].[ActiveType].[ID] = -1 )
GO

INSERT  [Core].[ActiveType]
        ( [Core].[ActiveType].[ID] ,
          [Core].[ActiveType].[Code] ,
          [Core].[ActiveType].[Name]
        )
        SELECT  0 ,
                N'InActive' ,
                N'Deleted'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ActiveType
                             WHERE  [Core].[ActiveType].[ID] = 0 )
GO
INSERT  [Core].[ActiveType]
        ( [Core].[ActiveType].[ID] ,
          [Core].[ActiveType].[Code] ,
          [Core].[ActiveType].[Name]
        )
        SELECT  1 ,
                N'Active' ,
                N'Deleted'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ActiveType
                             WHERE  [Core].[ActiveType].[ID] = 1 )
GO

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT  INTO [Core].StatusType
        ( [Core].[StatusType].[ID] ,
          [Core].[StatusType].[Code] ,
          [Core].[StatusType].[Name] ,
          [Core].[StatusType].[Value],
          [Core].[StatusType].[Active]
        )
        SELECT  0 ,
                '+' ,
                'On Target' ,
                1,
                1
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.StatusType
                             WHERE  [Core].[StatusType].[Code] = '+' )
        UNION ALL
        SELECT  1 ,
                '=' ,
                'Acceptable' ,
                0,
                1
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.StatusType
                             WHERE  [Core].[StatusType].[Code] = '=' )
        UNION ALL
        SELECT  2 ,
                '-' ,
                'Sub par' ,
                -1,
                1
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.StatusType
                             WHERE  [Core].[StatusType].[Code] = '-' )

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [Core].[Location] OFF
SET IDENTITY_INSERT [Core].[DataVersion] ON
INSERT INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description]
        )
        SELECT  1 ,
                '0' ,
                0 ,
                'External' ,
                10 ,
                ''
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 0 )

INSERT  INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description]
        )
        SELECT  1 ,
                '1' ,
                1 ,
                'Publish' ,
                20 ,
                ''
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 1 )

INSERT  INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description]
        )
        SELECT  1 ,
                '2' ,
                3 ,
                'Final Draft' ,
                30 ,
                ''
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 3 )

INSERT  INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description]
        )
        SELECT  1 ,
                '3' ,
                4 ,
                'First Draft' ,
                40 ,
                ''
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 4 )


SET IDENTITY_INSERT [Core].[DataVersion] OFF
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET NOCOUNT ON;
IF ( SELECT COUNT(1)
     FROM   Core.DimDate
   ) = 0 
    BEGIN
--Alter start

        DECLARE @StartDate DATETIME ,
            @EndDate DATETIME ,
            @Date DATETIME;

        SET @StartDate = '1990/01/01';
        SET @EndDate = '2025/12/31';
        SET @Date = @StartDate;

        WHILE @Date <= @EndDate 
            BEGIN

                DECLARE @IsLeapYear BIT
                IF ( ( YEAR(@Date) % 4 = 0 )
                     AND ( YEAR(@Date) % 100 != 0
                           OR YEAR(@Date) % 400 = 0
                         )
                   ) 
                    BEGIN

                        SELECT  @IsLeapYear = 1;

                    END
                ELSE 
                    BEGIN

                        SELECT  @IsLeapYear = 0;

                    END

                DECLARE @IsWeekend BIT
                IF ( DATEPART(dw, @Date) = 1
                     OR DATEPART(dw, @Date) = 7
                   ) 
                    BEGIN

                        SELECT  @IsWeekend = 1;

                    END
                ELSE 
                    BEGIN

                        SELECT  @IsWeekend = 0;

                    END

                INSERT  INTO Core.DimDate
                        ( [Core].[DimDate].[DateID] ,
                          [Core].[DimDate].[Date] ,
                          [Core].[DimDate].[Day] ,
                          [Core].[DimDate].[DaySuffix] ,
                          [Core].[DimDate].[USDayOfWeek] ,
                          [Core].[DimDate].[DayOfWeek] ,
                          [Core].[DimDate].[DOWInMonth] ,
                          [Core].[DimDate].[DayOfYear] ,
                          [Core].[DimDate].[WeekOfYear] ,
                          [Core].[DimDate].[WeekOfMonth] ,
                          [Core].[DimDate].[MonthNumber] ,
                          [Core].[DimDate].[MonthName] ,
                          [Core].[DimDate].[Quarter] ,
                          [Core].[DimDate].[QuarterName] ,
                          [Core].[DimDate].[YearName] ,
                          [Core].[DimDate].[YearNumber] ,
                          [Core].[DimDate].[StandardDate] ,
                          [Core].[DimDate].[IsPublicHoliday] ,
                          [Core].[DimDate].[HolidayText]
                        )
                VALUES  ( REPLACE(CONVERT(NVARCHAR(50), CONVERT(DATE, @Date)),
                                  '-', '') ,
                          @Date ,
                          DATEPART(DAY, @Date) ,
                          SUBSTRING(CONVERT(CHAR(3), DATENAME(DW, @Date)), 1,
                                    3) ,
                          DATEPART(WEEKDAY, @Date) ,
                          CASE WHEN DATEPART(WEEKDAY, @Date) - 1 = 0 THEN 1
                               WHEN DATEPART(WEEKDAY, @Date) - 1 = 6 THEN 7
                               ELSE DATEPART(WEEKDAY, @Date) - 1
                          END ,
                          DATEPART(DAY,
                                   ( DATEADD(S, -1,
                                             DATEADD(MM,
                                                     DATEDIFF(M, 0, @Date) + 1,
                                                     0)) )) ,
                          DATEPART(DAYOFYEAR, @Date) ,
                          DATEPART(WEEK, @Date) ,
                          ( DATEPART(DAY, @Date) / 7 ) + 1 ,
                          DATEPART(MONTH, @Date) ,
                          DATENAME(MONTH, @Date) ,
                          DATEPART(QUARTER, @Date) ,
                          'Quarter ' + CONVERT(NVARCHAR(255), DATEPART(QUARTER,
                                                              @Date)) ,
                          CONVERT(CHAR(4), DATEPART(YEAR, @Date)) ,
                          DATEPART(YEAR, @Date) ,
                          NULL ,
                          NULL ,
                          NULL 
                        );

                SET @Date += 1;

            END

        PRINT 'Updated Table [Shared.DimDate]';

    END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT  INTO Core.ReportingPeriod
        ( [Core].[ReportingPeriod].[ReportingPeriod] ,
          [Core].[ReportingPeriod].[StartDateID] ,
          [Core].[ReportingPeriod].[EndDateID] ,
          [Core].[ReportingPeriod].[FirstCycleDate] ,
          [Core].[ReportingPeriod].[LastCycleDate] ,
          [Core].[ReportingPeriod].[YearName] ,
          [Core].[ReportingPeriod].[YearNumber],
          [Core].[ReportingPeriod].[Summary]
        )
        SELECT  rc.[ReportingPeriod] ,
                rc.[StartDateID] ,
                rc.[EndDateID] ,
                rc.[FirstCycleDate] ,
                rc.[LastCycleDate] ,
                rc.[YearName] ,
                rc.[YearNumber],
                CONCAT(rc.[YearNumber],' - ',rc.[ReportingPeriod])
        FROM    [Core].[ReportCycle] AS rc
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ReportingPeriod
                             WHERE  [Core].[ReportingPeriod].[StartDateID] = rc.StartDateID
                                    AND [Core].[ReportingPeriod].[EndDateID] = rc.EndDateID )



GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [app].[MilestoneType] ON 

GO
INSERT  [app].[MilestoneType]
        ( [app].[MilestoneType].[MilestoneTypeID] ,
          [app].[MilestoneType].[Code] ,
          [app].[MilestoneType].[Name] ,
          [app].[MilestoneType].[Active]
        )
        SELECT  4 ,
                N'Project' ,
                N'Project' ,
                1
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.MilestoneType
                             WHERE  [app].[MilestoneType].[MilestoneTypeID] = 4 )
GO
INSERT  [app].[MilestoneType]
        ( [app].[MilestoneType].[MilestoneTypeID] ,
          [app].[MilestoneType].[Code] ,
          [app].[MilestoneType].[Name] ,
          [app].[MilestoneType].[Active]
        )
        SELECT  5 ,
                N'Activity' ,
                N'Activity' ,
                1
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.MilestoneType
                             WHERE  [app].[MilestoneType].[MilestoneTypeID] = 5 )
GO
SET IDENTITY_INSERT [app].[MilestoneType] OFF
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [app].[IndicatorType] ON 

GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active]
        )
        SELECT  1 ,
                N'Outcome' ,
                N'Outcome' ,
                1
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 1 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active]
        )
        SELECT  2 ,
                N'Output' ,
                N'Output' ,
                1
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 2 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active]
        )
        SELECT  3 ,
                N'SubOutput' ,
                N'SubOutput' ,
                1
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 3 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active]
        )
        SELECT  4 ,
                N'Activity' ,
                N'Activity' ,
                1
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 4 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active]
        )
        SELECT  5 ,
                N'Milestone' ,
                N'Milestone' ,
                1
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 5 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active]
        )
        SELECT  6 ,
                N'OS' ,
                N'Overall Status' ,
                1
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 6 )
GO
SET IDENTITY_INSERT [app].[IndicatorType] OFF
GO

/*Insert Forms data*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Multiple choice' as Name
	,'MCQ' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

		
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Radio Button' as Name
	,'RB' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Text response' as Name
	,'TR' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

		
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'True or false' as Name
	,'BOOL' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET identity_insert disagg.gender on


INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name
FROM
(SELECT 
	-1 As Gender_ID
	 ,'UNK' as Code
	,'Unknown' as Name
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)

INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name
FROM
(SELECT 
	0 As Gender_ID
	 ,'M' as Code
	,'Male' as Name
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)
     


INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name
FROM
(SELECT 
	1 As Gender_ID
	 ,'F' as Code
	,'Female' as Name
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)



INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name
FROM
(SELECT 
	2 As Gender_ID
	 ,'UND' as Code
	,'Undisclosed' as Name
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)



SET identity_insert disagg.gender off


/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
set identity_insert disagg.age on
insert into disagg.age (age_id)
select rn -1 from (
select row_number() over(order by name) rn

from sys.all_objects
) src
where rn <= 120
and not exists
(SELECT 1 FROM disagg.Age
where age.Age_ID = rn-1)

set identity_insert disagg.age off

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

/*USE Meerkat
GO*/

SET identity_insert [rpt].CustomReportType on


INSERT INTO [rpt].[CustomReportType]
           ([CustomReportType_ID]
		   ,[Code]
           ,[Name]
           )
SELECT Q.CustomReportType_ID, Q.Code, Q.Name
FROM
(SELECT 
	1 As CustomReportType_ID
	 ,'DNR' as Code
	,'Donor' as Name
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [rpt].[CustomReportType]
		WHERE Code = q.Code)

SET identity_insert [rpt].CustomReportType off


/* Insert Demo data */
--:r .\DemoData\PostDeploymentScript.Demo.PDS.sql
									

/*Insert CARE Data */
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
--:r .\CareData\Core.OrganizationType.CARE.PDS.sql
--:r .\CareData\Core.Organization.CARE.PDS.sql
--:r .\app.Outcome.CARE.PDS.sql
--:r .\app.Output.CARE.PDS.sql
--:r .\app.SubOutput.CARE.PDS.sql
--:r .\app.IndicatorMilestone.CARE.PDS.sql
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description])
     SELECT
          'CONT' ,'Continent' ,'Continent' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='CONT')

INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description])
     SELECT
          'CNTRY' ,'Country' ,'Country' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='CNTRY')

          
INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description])
     SELECT
          'REG' ,'Region' ,'Region' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='REG')

          
INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description])
     SELECT
          'DIST' ,'District' ,'District' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='DIST')

INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description])
     SELECT
          'VILG' ,'Village' ,'Village' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='VILG')

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

SET IDENTITY_INSERT [core].[Location] ON
GO
INSERT [Core].[Location] (
    [Location_ID]
    , [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
    ) 
    SELECT 0
    , 'SOM' Code
    , 'Somaliland' [Name]
    , 137600
    , 3500000
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'CNTRY')
    , NULL
    , NULL [Geog]
    WHERE NOT EXISTS (
    SELECT 1 FROM [Core].[Location] WHERE Code = 'SOM'
    )
SET IDENTITY_INSERT [core].[Location] OFF
GO
SET IDENTITY_INSERT [core].[Location] ON
GO
	INSERT [Core].[Location] (
    [Location_ID]
    , [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
    ) 
    SELECT 1
    , 'MOG' Code
    , 'Mogadishu' [Name]
    , 1637
    , 1530000
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'CNTRY')
    , NULL
    , NULL [Geog]
    WHERE NOT EXISTS (
    SELECT 1 FROM [Core].[Location] WHERE Code = 'MOG'
    )
SET IDENTITY_INSERT [core].[Location] OFF
GO
SET IDENTITY_INSERT [core].[Location] ON
GO
	INSERT [Core].[Location] (
    [Location_ID]
    , [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
    ) 

    SELECT 2
    , 'PUNT' Code
    , 'Puntland' [Name]
    , 212510
    , 3900000
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'CNTRY')
    , NULL
    , NULL [Geog]
    WHERE NOT EXISTS (
    SELECT 1 FROM [Core].[Location] WHERE Code = 'PUNT'
    )

SET IDENTITY_INSERT [core].[Location] OFF
GO

/*SET IDENTITY_INSERT [core].[Location] ON
GO*/
INSERT [Core].[Location] (
    [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
    ) 
    SELECT '1' Code
    , 'Lascanood' [Name]
    , NULL 
    , NULL
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '1' 
    )	
    

UNION ALL
SELECT '2' Code
    , 'Ainabo' [Name]
    , NULL 
    , NULL
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '2' 
    )	
    

UNION ALL
SELECT '3' Code
    , 'Odweyne' [Name]
    , 12245 
    , 1109735
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '3' 
    )	
    

UNION ALL
SELECT '4' Code
    , 'Burao' [Name]
    , 35375 
    , 240075
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '4' 
    )	
    

UNION ALL
SELECT '5' Code
    , 'Badhan' [Name]
    , 6497 
    , 101539
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '5' 
    )	
    

UNION ALL
SELECT '6' Code
    , 'Erigavo' [Name]
    , 17083 
    , 284657
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '6' 
    )	
    

UNION ALL
SELECT '7' Code
    , 'El-afweyn' [Name]
    , 45720 
    , 623060
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '7' 
    )	
    

UNION ALL
SELECT '8' Code
    , 'Waaberi' [Name]
    , 55840 
    , 661941
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'MOG')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '8' 
    )	
    

UNION ALL
SELECT '9' Code
    , 'Wadajir' [Name]
    , 25797 
    , 1025756
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'MOG')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '9' 
    )	
    

UNION ALL
SELECT '10' Code
    , 'Hodan' [Name]
    , 66923 
    , 291166
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'MOG')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '10' 
    )	
    

UNION ALL
SELECT '11' Code
    , 'Garowe' [Name]
    , 25336 
    , 143294
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '11' 
    )	
    

UNION ALL
SELECT '12' Code
    , 'Jalam' [Name]
    , 5127 
    , 1356301
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '12' 
    )	
    

UNION ALL
SELECT '13' Code
    , 'Godobjiran' [Name]
    , 2409 
    , 365330
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '13' 
    )	
    

UNION ALL
SELECT '14' Code
    , 'Galkacyo' [Name]
    , 2555 
    , 516212
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '14' 
    )	
    

UNION ALL
SELECT '15' Code
    , 'Gardo' [Name]
    , 24385 
    , 1012709
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '15' 
    )	
    

UNION ALL
SELECT '16' Code
    , 'Bosasso' [Name]
    , 5952 
    , 1098584
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '16' 
    )	
    

UNION ALL
SELECT '18' Code
    , 'Taleh' [Name]
    , 3107 
    , 596268
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '18' 
    )	
    

UNION ALL
SELECT '19' Code
    , 'Kalabyer' [Name]
    , 2361 
    , 693558
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '19' 
    )	
    

UNION ALL
SELECT '20' Code
    , 'Baran' [Name]
    , 1205 
    , 528054
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '20' 
    )	
    

UNION ALL
SELECT '21' Code
    , 'Buraan' [Name]
    , 2325 
    , 942581
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '21' 
    )	
    

UNION ALL
SELECT '22' Code
    , 'Hinglool' [Name]
    , 2449 
    , 1623282
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'KE')
    , NULL [Geog]
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '22' 
    )	   

/*SET IDENTITY_INSERT [Core].[Location] OFF
GO*/
    /*Location Insert end*/
    /*Update Geography*/

/*IF (CHARINDEX(CONVERT(VARCHAR, SERVERPROPERTY('edition')), N'Express') > -1)
BEGIN    
IF NOT EXISTs (select 1 FROM sys.Databases where Name = 'KenyaShapes')
    
    RAISERROR ('You must restore the KenyaShapes DB to get the geography shapes, obtain it at https://www.dropbox.com/s/jtb9ohpuov51wkt/KenyaShapes.bak', -- Message text.
               18, -- Severity.
               1 -- State.
               );

UPDATE [Core].[Location]
SET Geog = (SELECT Geography::UnionAggregate(geom)
  FROM [KenyaShapes].[dbo].[Counties])
  WHERE [Code] = 'KE'

UPDATE [Core].[Location]
SET Geog = geom
FROM [KenyaShapes].[dbo].[Counties]
  WHERE  [Code] = CAST(COUNTY_COD as varchar(10))
END*/

						



/*end Insert data*/

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
