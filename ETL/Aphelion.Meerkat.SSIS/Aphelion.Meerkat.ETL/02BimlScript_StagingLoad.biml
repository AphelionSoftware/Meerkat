<# var SourceConnection = SchemaManager.CreateConnectionNode("SchemaProvider", "Data Source=.\\sql2012;Initial Catalog=MeerkatStaging;Provider=SQLNCLI11.1;Integrated Security=SSPI;"); #>
<# var DestConnection = SchemaManager.CreateConnectionNode("SchemaProvider", "Data Source=.\\sql2012;Initial Catalog=Meerkat;Provider=SQLNCLI11.1;Integrated Security=SSPI;"); #>
<# var ErrorConnection = SchemaManager.CreateConnectionNode("SchemaProvider", "Data Source=.\\sql2012;Initial Catalog=MeerkatErrors;Provider=SQLNCLI11.1;Integrated Security=SSPI;"); #>
<# var DestSchema = DestConnection.ImportDB("", "", ImportOptions.ExcludeViews); #>
<# var DestTables = DestConnection.GenerateTableNodes(); #>
<# var ErrorSchema = ErrorConnection.ImportDB("", "", ImportOptions.ExcludeViews); #>
<# var ErrorTables = ErrorConnection.GenerateTableNodes(); #>
<# var tableNamesToImport = ExternalDataAccess.GetDataTable(SourceConnection.ConnectionString, "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_NAME NOT LIKE 'CustomReport_ResponsiblePerson%' AND TABLE_NAME NOT LIKE '%Refactor%'  AND TABLE_NAME NOT LIKE '%Donor_Report%' ").Rows.OfType<System.Data.DataRow>().Select(r => r[0].ToString()); #>  
<# var strLookup = ""; #>
<Biml xmlns="http://schemas.varigence.com/biml.xsd">
  <Connections>
    <Connection Name="MeerkatStagingBIML" ConnectionString="Data Source=.\sql2012;Initial Catalog=MeerkatStaging;Provider=SQLNCLI11.1;Integrated Security=SSPI;" CreateInProject="true"/>
    <Connection Name="MeerkatBIML" ConnectionString="Data Source=.\sql2012;Initial Catalog=Meerkat;Provider=SQLNCLI11.1;Integrated Security=SSPI;" CreateInProject="true"/>
    <Connection Name="MeerkatErrorsBIML" ConnectionString="Data Source=.\sql2012;Initial Catalog=MeerkatErrors;Provider=SQLNCLI11.1;Integrated Security=SSPI;" CreateInProject="true"/>
	<ExcelConnection Name="ExcelCountConnection" ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Dropbox\Clients\Meerkat\CARE Somalia\Data\StagingTemplates\Templates\Errors.xlsx;Extended Properties=&quot;Excel 12.0 Xml;HDR=YES&quot;" >	
	<Expressions>
		<Expression PropertyName="ExcelCountConnection.ConnectionString">@[User::ErrorFileConnection]</Expression>
	</Expressions>
	</ExcelConnection>
	  	<ExcelConnection Name="ExcelIndividualConnection" ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Dropbox\Clients\Meerkat\CARE Somalia\Data\StagingTemplates\FileErrors\Errors.Activity.xlsx;Extended Properties=&quot;Excel 12.0 Xml;HDR=YES&quot;" >	
	<Expressions>
		<Expression PropertyName="ExcelIndividualConnection.ConnectionString">@[User::ErrorIndividualConnection]</Expression>
	</Expressions>
	</ExcelConnection>
  </Connections>
	<PackageProjects>
    <PackageProject Name="Aphelion.Meerkat.ETL">
      <Parameters>
        <Parameter Name="strStagingTemplatePath" DataType="String">C:\Dropbox\Clients\Meerkat\CARE Somalia\Data\StagingTemplates</Parameter>
      </Parameters>
		<Packages>
		<# foreach (var table in DestSchema.TableNodes.Where(item => tableNamesToImport.Contains(item.Name)).OrderBy(item => item.Name)) {   #>
        <Package PackageName="StagingLoad_<#=table.SchemaName#>.<#=table.Name#>" />
		<# } #>
      </Packages>
    </PackageProject>
  </PackageProjects>

  <Packages>
  <!--only generate for destination tables that have a corresponding staging table-->
	  <!-- These are both pretty big bugs - FrameworkDetails_INdicatorLocation contains FrameworkDetails. An equality still needs to eb debugged-->
  <# foreach (var table in DestSchema.TableNodes.Where(item => tableNamesToImport.Contains(item.Name)).OrderBy(item => item.Name)) { 
	var errTable = ErrorSchema.TableNodes.Where(item => tableNamesToImport.Contains(item.Name)).First();
	
  #>
    <Package Name="StagingLoad_<#=table.SchemaName#>.<#=table.Name#>" ConstraintMode="Parallel" ProtectionLevel="EncryptSensitiveWithUserKey"  MaxErrorCount="2000"  DelayValidation="true">
	<Variables>
		<Variable Name="intQueueID" DataType="Int32" >0</Variable>
		<Variable Name="intErrorCount" DataType="Int32" >0</Variable>
		<Variable Name="strPackageName" DataType="String" EvaluateAsExpression="true">@[System::PackageName]</Variable>
		<Variable Name="FileName" DataType="String">Staging.<#=table.Name#>.xlsx</Variable>
        <Variable Name="FileSource" DataType="String" EvaluateAsExpression="true">@[$Project::strStagingTemplatePath] + "\\Templates\\" + @[User::FileName]</Variable>
        <Variable Name="ErrorFileSource" DataType="String" EvaluateAsExpression="true">@[$Project::strStagingTemplatePath] + "\\Templates\\Errors.xlsx" </Variable>
		<Variable Name="FileDestination" DataType="String" EvaluateAsExpression="true">@[$Project::strStagingTemplatePath] + "\\FileErrors\\" + 
 (DT_STR, 10, 1252)  (
(YEAR( @[System::ContainerStartTime]  ) * 10000)
+ (MONTH(@[System::ContainerStartTime]  ) * 100)
+  DAY(@[System::ContainerStartTime]  )
) 

</Variable>
		
		
		<Variable Name="ErrorFileDestination" DataType="String" EvaluateAsExpression="true">@[$Project::strStagingTemplatePath] + "\\FileErrors\\" + 
 (DT_STR, 10, 1252)  (
(YEAR( @[System::ContainerStartTime]  ) * 10000)
+ (MONTH(@[System::ContainerStartTime]  ) * 100)
+  DAY(@[System::ContainerStartTime]  )
) +"\\Errors.<#=table.Name#>.xlsx" </Variable>
		<Variable Name="ErrorFileConnection" DataType="String" EvaluateAsExpression="true">"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + @[User::ErrorFileDestination] +";Extended Properties=\&quot;Excel 12.0 Xml;HDR=YES\&quot;"  </Variable>
		<Variable Name="ErrorIndividualDestination" DataType="String" EvaluateAsExpression="true">@[$Project::strStagingTemplatePath] + "\\FileErrors\\" + 
 (DT_STR, 10, 1252)  (
(YEAR( @[System::ContainerStartTime]  ) * 10000)
+ (MONTH(@[System::ContainerStartTime]  ) * 100)
+  DAY(@[System::ContainerStartTime]  )
) +"\\Staging.<#=table.Name#>.xlsx" </Variable>
		<Variable Name="ErrorIndividualConnection" DataType="String" EvaluateAsExpression="true">"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + @[User::ErrorIndividualDestination] +";Extended Properties=\&quot;Excel 12.0 Xml;HDR=YES\&quot;"  </Variable>
		
		
		<Variable Name="ProcessedFile" DataType="String" EvaluateAsExpression="true">@[$Project::strStagingTemplatePath] + "\\Processed\\" + 
 (DT_STR, 10, 1252)  (
(YEAR( @[System::ContainerStartTime]  ) * 10000)
+ (MONTH(@[System::ContainerStartTime]  ) * 100)
+  DAY(@[System::ContainerStartTime]  )
) 

</Variable>
		<Variable Name="InProcessSource" DataType="String" EvaluateAsExpression="true">@[$Project::strStagingTemplatePath] + "\\InProcess\\" + @[User::FileName]

</Variable>




	</Variables>
      <Tasks>
		  <ExecuteSQL Name="SQL_Truncate_<#=errTable.SchemaName#>_<#=table.Name#>" ConnectionName="MeerkatErrorsBIML">
          <DirectInput>TRUNCATE TABLE [<#=errTable.SchemaName#>].[<#=table.Name#>]
		
		  </DirectInput>
        </ExecuteSQL>
		  <!--- Initial data flow to load data into DW tables-->
        <Dataflow Name="DFT_Load <#=table.SchemaName#>.<#=table.Name#>"  MaxErrorCount="2000">
		<PrecedenceConstraints>
					<Inputs>
			<Input OutputPathName="SQL_Truncate_<#=errTable.SchemaName#>_<#=table.Name#>.Output"> </Input>
			</Inputs>
			</PrecedenceConstraints>
          <Transformations>
            <OleDbSource Name="OLE_SRC_Staging_<#=table.Name#>" ConnectionName="MeerkatStagingBIML">
              <DirectInput>
                SELECT *
                FROM [Staging].[<#=table.Name#>]
              </DirectInput>
            </OleDbSource>
			  <# strLookup ="OLE_SRC_Staging_" + table.Name + ".Output";#> 
            <# DataTable FKColumns = ExternalDataAccess.GetDataTable(DestConnection.ConnectionString, "SELECT DISTINCT C.name AS ForeignKeyColumn, '[' + FS.name + '].[' + FT.name + ']' AS ForeignTable, FC.name AS ForeignTableColumn, FT.name + 'BusinessKey' AS SourceLookupColumn, CAST(C.is_nullable AS VARCHAR) AS IsNullable FROM sys.foreign_key_columns AS FK JOIN sys.tables AS T ON FK.parent_object_id = T.object_id JOIN sys.columns AS C ON FK.parent_object_id = C.object_id AND FK.parent_column_id = C.column_id JOIN sys.tables AS FT ON FK.referenced_object_id = FT.object_id JOIN sys.columns AS FC ON FK.referenced_object_id = FC.object_id AND FK.referenced_column_id = FC.column_id JOIN sys.schemas AS FS ON FT.schema_id = FS.schema_id WHERE C.name NOT IN ('Active','AgeBandMin_ID','AgeBandMax_ID','ParentLocation_ID','ParentOrganization_ID','ProjectParentID', 'isSiteCreated') AND T.name = '"+ table.Name + "'"); #>
            <# string IsNullable ="" ;
               foreach (DataRow FKColumn in FKColumns.Rows) { 
					IsNullable = "" + FKColumn["IsNullable"];
               if(IsNullable=="1") { #>
            <Lookup Name="LKP_<#=FKColumn["ForeignKeyColumn"]#>" OleDbConnectionName="MeerkatBIML" NoMatchBehavior="IgnoreFailure">
			<InputPath OutputPathName="<#=strLookup#>" />
              <DirectInput>SELECT BusinessKey, <#=FKColumn["ForeignTableColumn"]#> FROM <#=FKColumn["ForeignTable"]#></DirectInput>
              <Inputs>
                <Column SourceColumn="<#=FKColumn["SourceLookupColumn"]#>" TargetColumn="BusinessKey" />
              </Inputs>
              <Outputs>
                <Column SourceColumn="<#=FKColumn["ForeignTableColumn"]#>" TargetColumn="<#=FKColumn["ForeignKeyColumn"]#>" />
              </Outputs>
            </Lookup>
              <# } else
                 { #>
            <Lookup Name="LKP_<#=FKColumn["ForeignKeyColumn"]#>" OleDbConnectionName="MeerkatBIML" NoMatchBehavior="RedirectRowsToErrorOutput">
			<InputPath OutputPathName="<#=strLookup#>" />
              <DirectInput>SELECT BusinessKey, <#=FKColumn["ForeignTableColumn"]#> FROM <#=FKColumn["ForeignTable"]#></DirectInput>
              <Inputs>
                <Column SourceColumn="<#=FKColumn["SourceLookupColumn"]#>" TargetColumn="BusinessKey" />
              </Inputs>
              <Outputs>
                <Column SourceColumn="<#=FKColumn["ForeignTableColumn"]#>" TargetColumn="<#=FKColumn["ForeignKeyColumn"]#>" />
              </Outputs>
            </Lookup>
				  <DerivedColumns Name="DC_AddErrorDetails_<#=FKColumn["ForeignKeyColumn"]#>">
				<InputPath OutputPathName="LKP_<#=FKColumn["ForeignKeyColumn"]#>.Error" />
              	<Columns>
					<Column Name="PackageName" DataType="AnsiString" Length="255" >(DT_STR, 255, 1252)@[System::PackageName]</Column>
					<Column Name="QueueID" DataType="Int32" >@[User::intQueueID]</Column>
					<Column Name="ErrorType" DataType="AnsiString" Length="255" >(DT_STR, 255, 1252)("Failed Lookup <#=FKColumn["ForeignKeyColumn"]#>")</Column>
				</Columns>
			</DerivedColumns>
			<RowCount Name="RC_CountErrors_<#=FKColumn["ForeignKeyColumn"]#>" VariableName="User.intErrorCount">
				 <InputPath OutputPathName="DC_AddErrorDetails_<#=FKColumn["ForeignKeyColumn"]#>.Output" />
            </RowCount>
				  
			<OleDbDestination Name="OLE_DST_Error_<#=table.SchemaName#>_<#=table.Name#>_<#=FKColumn["ForeignKeyColumn"]#>" ConnectionName="MeerkatErrorsBIML" MaximumInsertCommitSize="200"  TableLock="false">
				  <InputPath OutputPathName="RC_CountErrors_<#=FKColumn["ForeignKeyColumn"]#>.Output" />
				<ExternalTableOutput Table="[<#=errTable.SchemaName#>].[<#=table.Name#>]" />
            </OleDbDestination>
              <# } #>
				  <# 
					strLookup = "LKP_" + FKColumn["ForeignKeyColumn"] + ".Match";
					  #>
				  <!-- end lookup for each-->
            <# } #>
				<!-- Why are we using a foreach ? -->
            <# var PrimaryKey = table.Keys[0].Columns[0] ;#>
				
            <ConditionalSplit Name="CSPL_<#=PrimaryKey.Column#>">
			<InputPath OutputPathName="<#=strLookup#>" />
              <OutputPaths>
                <OutputPath Name="Insert">
                  <Expression>ISNULL(<#=PrimaryKey.Column#>)</Expression>
                </OutputPath>
              </OutputPaths>
            </ConditionalSplit>
            <OleDbDestination Name="OLE_DST_<#=table.SchemaName#>_<#=table.Name#>" ConnectionName="MeerkatBIML">
              <InputPath OutputPathName="CSPL_<#=PrimaryKey.Column#>.Insert" />
              <ExternalTableOutput Table="<#=table.SchemaQualifiedName#>" />
			  <ErrorHandling ErrorRowDisposition="RedirectRow" TruncationRowDisposition="RedirectRow" />
            </OleDbDestination>
            <OleDbDestination Name="OLE_DST_Singleton_<#=table.SchemaName#>_<#=table.Name#>" ConnectionName="MeerkatBIML" MaximumInsertCommitSize="1">
              <InputPath OutputPathName="OLE_DST_<#=table.SchemaName#>_<#=table.Name#>.Error" />
              <ExternalTableOutput Table="<#=table.SchemaQualifiedName#>" />
			  <ErrorHandling ErrorRowDisposition="RedirectRow" TruncationRowDisposition="RedirectRow" />
            </OleDbDestination>

			<DerivedColumns Name="DC_AddErrorDetails">
			<InputPath OutputPathName="OLE_DST_Singleton_<#=table.SchemaName#>_<#=table.Name#>.Error" />
              	<Columns>
					<Column Name="PackageName" DataType="AnsiString" Length="255" >(DT_STR, 255, 1252)@[System::PackageName]</Column>
					<Column Name="QueueID" DataType="Int32" >@[User::intQueueID]</Column>
					<Column Name="ErrorType" DataType="AnsiString" Length="255" >(DT_STR, 255, 1252)("Insert")</Column>
				</Columns>
			</DerivedColumns>
				
				
			<RowCount Name="RC_CountErrors" VariableName="User.intErrorCount">
                        <InputPath OutputPathName="DC_AddErrorDetails.Output" />
            </RowCount>


			<OleDbDestination Name="OLE_DST_Error_<#=table.SchemaName#>_<#=table.Name#>" ConnectionName="MeerkatErrorsBIML" MaximumInsertCommitSize="200" TableLock="false">
              <InputPath OutputPathName="RC_CountErrors.Output" />
              <ExternalTableOutput Table="[<#=errTable.SchemaName#>].[<#=table.Name#>]" />
            </OleDbDestination>
            
            <OleDbCommand Name="CMD_<#=table.SchemaName#>_<#=table.Name#>" ConnectionName="MeerkatBIML">
              <InputPath OutputPathName="CSPL_<#=PrimaryKey.Column#>.Default" />
			  
				<# DataTable UpdColumns = ExternalDataAccess.GetDataTable(DestConnection.ConnectionString, "SELECT C.name AS ColumnName, CASE WHEN C.name = 'sys_ModifiedBy' THEN 'USER_NAME()' WHEN C.name = 'sys_ModifiedOn' THEN 'GETDATE()' ELSE '?' END AS ColumnValue FROM sys.tables AS T JOIN sys.columns AS C ON C.object_id = T.object_id JOIN sys.indexes AS I ON I.object_id = T.object_id LEFT JOIN sys.index_columns AS IC ON T.object_id = IC.object_id AND I.index_id = IC.index_id AND C.column_id = IC.column_id WHERE T.name = '"+ table.Name + "' AND I.is_primary_key = 1 AND IC.column_id IS NULL AND C.name NOT IN ('sys_CreatedBy','sys_CreatedOn','Active','IndicatorValueGroup','MilestoneValueGroup','Geog') AND C.is_computed = 0 AND NOT EXISTS (    SELECT 1     ,OBJECT_NAME(epX.major_id) 	    FROM sys.extended_properties  epX	 WHERE epX.major_id = c.object_id and epX.minor_id = c.column_id and  epX.Name = 'ExcludeFromStaging' 	    AND 		    (epX.Value = 'true' OR epX.VALUE = 1)	    )"); #>
              <# string upd ="UPDATE " +table.SchemaQualifiedName+ "SET ";
                 foreach (DataRow UpdColumn in UpdColumns.Rows) {
                   upd = upd + "[" + UpdColumn["ColumnName"] + "] = "+UpdColumn["ColumnValue"]+",";
                 }
                 var updc = upd.Substring(0,upd.Length-1) + " WHERE " + table.Keys[0].Columns[0].Column + " = ?";#>
              <DirectInput><#=updc#></DirectInput>
              <Parameters>
              <# DataTable Parameters = ExternalDataAccess.GetDataTable(DestConnection.ConnectionString, "SELECT C.name AS ColumnName FROM sys.tables AS T JOIN sys.columns AS C ON C.object_id = T.object_id JOIN sys.indexes AS I ON I.object_id = T.object_id LEFT JOIN sys.index_columns AS IC ON T.object_id = IC.object_id AND I.index_id = IC.index_id AND C.column_id = IC.column_id WHERE T.name = '"+ table.Name + "' AND I.is_primary_key = 1 AND IC.column_id IS NULL AND C.name NOT IN ('sys_CreatedBy','sys_CreatedOn','sys_ModifiedBy','sys_ModifiedOn','Active','IndicatorValueGroup','MilestoneValueGroup','Geog') AND C.is_computed = 0 AND NOT EXISTS (    SELECT 1     ,OBJECT_NAME(epX.major_id) 	    FROM sys.extended_properties  epX	 WHERE epX.major_id = c.object_id and epX.minor_id = c.column_id and  epX.Name = 'ExcludeFromStaging' 	    AND 		    (epX.Value = 'true' OR epX.VALUE = 1)	    ) UNION ALL SELECT C.name AS ColumnName FROM sys.tables AS T JOIN sys.columns AS C ON C.object_id = T.object_id JOIN sys.indexes AS I ON I.object_id = T.object_id JOIN sys.index_columns AS IC ON T.object_id = IC.object_id AND I.index_id = IC.index_id AND C.column_id = IC.column_id WHERE T.name = '"+ table.Name + "' AND I.is_primary_key = 1   AND NOT EXISTS (    SELECT 1     ,OBJECT_NAME(epX.major_id) 	    FROM sys.extended_properties  epX	 WHERE epX.major_id = c.object_id and epX.minor_id = c.column_id and  epX.Name = 'ExcludeFromStaging' 	    AND 		    (epX.Value = 'true' OR epX.VALUE = 1)	    )"); #>
              <# int ParamNum = 0;#>
              <# foreach (DataRow Parameter in Parameters.Rows) { #>
                <# foreach (var colex in table.Columns.Where(column => Parameter["ColumnName"].Equals(column.Name))) { #>
                <Parameter Scale="<#=colex.Scale#>" Precision="<#=colex.Precision#>" Length="<#=colex.Length#>" DataType="<#=colex.DataType#>" SourceColumn="<#=colex.Name#>" TargetColumn="Param_<#=ParamNum#>" />
                <# } #>
                <# ParamNum = ParamNum + 1;#>
              <# } #>
              </Parameters>
            </OleDbCommand>

          </Transformations>
        </Dataflow>


		  <FileSystem Operation="MoveFile" Name="FSMoveErrorFile" OverwriteDestination="true">
			<PrecedenceConstraints LogicalType="Or">
			<Inputs>
			<Input OutputPathName="DFT_Load <#=table.SchemaName#>.<#=table.Name#>.Output" EvaluationOperation="ExpressionOrConstraint" Expression="@[User::intErrorCount] > 0" EvaluationValue="Failure">
			</Input>
			</Inputs>
			</PrecedenceConstraints>
			  <VariableInput VariableName="User.InProcessSource" />
              <VariableOutput VariableName="User.FileDestination" />
			  </FileSystem>
		  
		  <!-- Loading individual errors -->
		  <!--
		  <Dataflow Name="DFT_ErrorFiles_<#=table.SchemaName#>.<#=table.Name#>">
			<PrecedenceConstraints >
			<Inputs>
				<Input OutputPathName="FSMoveErrorFile.Output" EvaluationOperation="Constraint">    
					
				</Input>
			</Inputs>
			</PrecedenceConstraints>
			  <Transformations>
				<OleDbSource Name="OLE_SRC_Errors_<#=table.Name#>" ConnectionName="MeerkatErrorsBIML">
				  <DirectInput>
					SELECT *
					FROM [Errors].[<#=table.Name#>]
				  </DirectInput>
				</OleDbSource>
				  <DataConversion Name="DC_ExcelErrors">
	            <Columns>
                <#foreach (var column in errTable.Columns){#>
                    <Column SourceColumn="<#=column.Name#>" TargetColumn="<#=column.Name#>" DataType="String" Length="255" />
                <#}#>
              </Columns>
            </DataConversion>
				  
				<ExcelDestination Name="OLE_DEST_Excel_IndividualErrors" ConnectionName="ExcelIndividualConnection" UseFastLoadIfAvailable="false" MaximumInsertCommitSize="2147483647" ValidateExternalMetadata="false">
                    <ErrorHandling ErrorRowDisposition="IgnoreFailure" TruncationRowDisposition="IgnoreFailure">
                        <Inputs>
                            <Input ErrorRowDisposition="FailComponent" TruncationRowDisposition="IgnoreFailure" InputName="Destination Input" />
                        </Inputs>
                    </ErrorHandling>
                    <ExternalTableOutput Table="Sheet1$A2:XFD"/>
			<Columns>
                <#foreach (var column in errTable.Columns){#>
                    <Column SourceColumn="OLE_SRC_Errors_<#=table.Name#>.<#=column.Name#>" TargetColumn="<#=column.Name#>"/>
                <#}#>
              </Columns>
                </ExcelDestination>
				  </Transformations>
		  </Dataflow>
		  -->
		  
		  <FileSystem Operation="CopyFile" Name="FSCopyErrorFile" OverwriteDestination="true">
			  		  <PrecedenceConstraints LogicalType="Or">
			<Inputs>
			<Input OutputPathName="DFT_Load <#=table.SchemaName#>.<#=table.Name#>.Output" EvaluationOperation="ExpressionOrConstraint" Expression="@[User::intErrorCount] > 0" EvaluationValue="Failure">
			</Input>
			</Inputs>
			</PrecedenceConstraints>
			  <VariableInput VariableName="User.ErrorFileSource" />
              <VariableOutput VariableName="User.ErrorFileDestination" />
			  </FileSystem>

			 <FileSystem Operation="MoveFile" Name="FSMoveSuccessfulFile" OverwriteDestination="true">
			<PrecedenceConstraints LogicalType="And">
			<Inputs>
			<Input OutputPathName="DFT_Load <#=table.SchemaName#>.<#=table.Name#>.Output" EvaluationOperation="ExpressionAndConstraint" Expression="@[User::intErrorCount] = 0"  EvaluationValue="Success">
			</Input>
			</Inputs>
			</PrecedenceConstraints>
			  <VariableInput VariableName="User.InProcessSource" />
              <VariableOutput VariableName="User.ProcessedFile" />
			  </FileSystem>

		<!-- data flow to load data into summary error fils -->
		  	<Dataflow Name="DFT_ErrorCount_<#=table.SchemaName#>.<#=table.Name#>" MaxErrorCount="2000">
				<PrecedenceConstraints>
					<Inputs>
					<Input OutputPathName="FSCopyErrorFile.Output" EvaluationOperation="Constraint">    
					</Input>
					</Inputs>
				</PrecedenceConstraints>
				<Transformations>
				 <#  if (table.Columns.Where(column => column.Name == "BusinessKey").Count() > 0) { #>
				<OleDbSource Name="OLE_SRC_Errors_<#=table.Name#>" ConnectionName="MeerkatErrorsBIML">
				  <DirectInput>
					SELECT [QueueID]
						,[BusinessKey]
						 ,[SSISErrorCode] AS PackageErrorCode
						 ,[SSISErrorColumn] PackageErrorColumn
						,[ErrorType]
						,[PackageName]
						
							  ,Count(*) As [Count]
					FROM [Errors].[<#=table.Name#>]
					  GROUP BY [QueueID]
						,[BusinessKey]
						  ,[SSISErrorCode]
						  ,[SSISErrorColumn]
						  ,[ErrorType]
						  ,[PackageName]
				  </DirectInput>
				</OleDbSource>

				<# } else { #>
				<OleDbSource Name="OLE_SRC_Errors_<#=table.Name#>" ConnectionName="MeerkatErrorsBIML">
				  <DirectInput>
					SELECT [QueueID]
						 ,[SSISErrorCode] AS PackageErrorCode
						 ,[SSISErrorColumn] PackageErrorColumn
						,[ErrorType]
						,[PackageName]  ,Count(*) As [Count]
					FROM [Errors].[<#=table.Name#>]
					  GROUP BY [QueueID]
						  ,[SSISErrorCode]
						  ,[SSISErrorColumn]
						  ,[ErrorType]
						  ,[PackageName] 
				  </DirectInput>
				</OleDbSource>
				<# } #> 
					<DataConversion Name="DC_ExcelErrors">
  
              <Columns>

                <Column SourceColumn="QueueID" TargetColumn="QueueID" DataType="String" Length="255" />
                <Column SourceColumn="PackageErrorCode" TargetColumn="PackageErrorCode" DataType="String" Length="255" />
                <Column SourceColumn="PackageErrorColumn" TargetColumn="PackageErrorColumn" DataType="String" Length="255" />
                <Column SourceColumn="ErrorType" TargetColumn="ErrorType" DataType="String" Length="255" />
                <Column SourceColumn="PackageName" TargetColumn="PackageName" DataType="String" Length="255" />
				
				 <#  if (table.Columns.Where(column => column.Name == "BusinessKey").Count() > 0 ) { #>
					 <Column SourceColumn="BusinessKey" TargetColumn="BusinessKey" DataType="String" Length="255" />
				<# } #> 
                <Column SourceColumn="Count" TargetColumn="Count" DataType="String" Length="255" />
                 
              </Columns>
            </DataConversion>
				<ExcelDestination Name="OLE_DEST_Excel_Summary" ConnectionName="ExcelCountConnection" UseFastLoadIfAvailable="false" MaximumInsertCommitSize="2147483647" ValidateExternalMetadata="false">
                    <ErrorHandling ErrorRowDisposition="IgnoreFailure" TruncationRowDisposition="IgnoreFailure">
                        <Inputs>
                            <Input ErrorRowDisposition="FailComponent" TruncationRowDisposition="IgnoreFailure" InputName="Destination Input" />
                        </Inputs>
                    </ErrorHandling>
                    <ExternalTableOutput Table="[Sheet1$]"/>

                </ExcelDestination>

					</Transformations>
		  </Dataflow>
      </Tasks>
    </Package>
  <# } #>
  </Packages>
</Biml>
<#@ import namespace="System.Data" #>
<#@ import namespace="Varigence.Hadron.CoreLowerer.SchemaManagement" #>
