/*
Deployment script for ND_Meerkat

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ND_Meerkat"
:setvar DefaultFilePrefix "ND_Meerkat"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.SQL2012\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.SQL2012\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping DF__Event_sys_Active...';


GO
ALTER TABLE [forms].[Event] DROP CONSTRAINT [DF__Event_sys_Active];


GO
PRINT N'Dropping DF_Event_sys_CreatedBy...';


GO
ALTER TABLE [forms].[Event] DROP CONSTRAINT [DF_Event_sys_CreatedBy];


GO
PRINT N'Dropping DF_Event_sys_CreatedOn...';


GO
ALTER TABLE [forms].[Event] DROP CONSTRAINT [DF_Event_sys_CreatedOn];


GO
PRINT N'Dropping DF_Event_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[Event] DROP CONSTRAINT [DF_Event_sys_ModifiedBy];


GO
PRINT N'Dropping DF_Event_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[Event] DROP CONSTRAINT [DF_Event_sys_ModifiedOn];


GO
PRINT N'Dropping DF__EventRegister_sys_Active...';


GO
ALTER TABLE [forms].[EventRegister] DROP CONSTRAINT [DF__EventRegister_sys_Active];


GO
PRINT N'Dropping DF_EventRegister_sys_CreatedBy...';


GO
ALTER TABLE [forms].[EventRegister] DROP CONSTRAINT [DF_EventRegister_sys_CreatedBy];


GO
PRINT N'Dropping DF_EventRegister_sys_CreatedOn...';


GO
ALTER TABLE [forms].[EventRegister] DROP CONSTRAINT [DF_EventRegister_sys_CreatedOn];


GO
PRINT N'Dropping DF_EventRegister_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[EventRegister] DROP CONSTRAINT [DF_EventRegister_sys_ModifiedBy];


GO
PRINT N'Dropping DF_EventRegister_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[EventRegister] DROP CONSTRAINT [DF_EventRegister_sys_ModifiedOn];


GO
PRINT N'Dropping DF__Form_sys_Active...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [DF__Form_sys_Active];


GO
PRINT N'Dropping DF_Form_isComplete...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [DF_Form_isComplete];


GO
PRINT N'Dropping DF_Form_isConfidential...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [DF_Form_isConfidential];


GO
PRINT N'Dropping DF_Form_sys_CreatedBy...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [DF_Form_sys_CreatedBy];


GO
PRINT N'Dropping DF_Form_sys_CreatedOn...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [DF_Form_sys_CreatedOn];


GO
PRINT N'Dropping DF_Form_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [DF_Form_sys_ModifiedBy];


GO
PRINT N'Dropping DF_Form_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [DF_Form_sys_ModifiedOn];


GO
PRINT N'Dropping DF_Question_isComplete...';


GO
ALTER TABLE [forms].[Question] DROP CONSTRAINT [DF_Question_isComplete];


GO
PRINT N'Dropping FK_Event_ActiveType...';


GO
ALTER TABLE [forms].[Event] DROP CONSTRAINT [FK_Event_ActiveType];


GO
PRINT N'Dropping FK_Event_Institution...';


GO
ALTER TABLE [forms].[Event] DROP CONSTRAINT [FK_Event_Institution];


GO
PRINT N'Dropping FK_Event_Location...';


GO
ALTER TABLE [forms].[Event] DROP CONSTRAINT [FK_Event_Location];


GO
PRINT N'Dropping FK_Event_Project...';


GO
ALTER TABLE [forms].[Event] DROP CONSTRAINT [FK_Event_Project];


GO
PRINT N'Dropping FK_Event_Indicator_Rollup_Event...';


GO
ALTER TABLE [forms].[Event_Indicator_Rollup] DROP CONSTRAINT [FK_Event_Indicator_Rollup_Event];


GO
PRINT N'Dropping FK_Event_Programme_Event...';


GO
ALTER TABLE [forms].[Event_Programme] DROP CONSTRAINT [FK_Event_Programme_Event];


GO
PRINT N'Dropping FK_Event_Project_Event...';


GO
ALTER TABLE [forms].[Event_Project] DROP CONSTRAINT [FK_Event_Project_Event];


GO
PRINT N'Dropping FK_EventRegister_Event...';


GO
ALTER TABLE [forms].[EventRegister] DROP CONSTRAINT [FK_EventRegister_Event];


GO
PRINT N'Dropping FK_EventRegister_ActiveType...';


GO
ALTER TABLE [forms].[EventRegister] DROP CONSTRAINT [FK_EventRegister_ActiveType];


GO
PRINT N'Dropping FK_EventRegister_Age1...';


GO
ALTER TABLE [forms].[EventRegister] DROP CONSTRAINT [FK_EventRegister_Age1];


GO
PRINT N'Dropping FK_EventRegister_Gender...';


GO
ALTER TABLE [forms].[EventRegister] DROP CONSTRAINT [FK_EventRegister_Gender];


GO
PRINT N'Dropping FK_Category_Form...';


GO
ALTER TABLE [forms].[Category] DROP CONSTRAINT [FK_Category_Form];


GO
PRINT N'Dropping FK_Form_ActiveType...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [FK_Form_ActiveType];


GO
PRINT N'Dropping FK_Form_Age...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [FK_Form_Age];


GO
PRINT N'Dropping FK_Form_AgeBand...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [FK_Form_AgeBand];


GO
PRINT N'Dropping FK_Form_CommunityType...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [FK_Form_CommunityType];


GO
PRINT N'Dropping FK_Form_Gender...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [FK_Form_Gender];


GO
PRINT N'Dropping FK_Form_Group...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [FK_Form_Group];


GO
PRINT N'Dropping FK_Form_Institution...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [FK_Form_Institution];


GO
PRINT N'Dropping FK_Form_Location...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [FK_Form_Location];


GO
PRINT N'Dropping FK_Form_Project...';


GO
ALTER TABLE [forms].[Form] DROP CONSTRAINT [FK_Form_Project];


GO
PRINT N'Dropping FK_Form_Event_Form...';


GO
ALTER TABLE [forms].[Form_Event] DROP CONSTRAINT [FK_Form_Event_Form];


GO
PRINT N'Dropping FK_Form_Programme_Form...';


GO
ALTER TABLE [forms].[Form_Programme] DROP CONSTRAINT [FK_Form_Programme_Form];


GO
PRINT N'Dropping FK_Form_Project_Form...';


GO
ALTER TABLE [forms].[Form_Project] DROP CONSTRAINT [FK_Form_Project_Form];


GO
PRINT N'Dropping FK_FormResponse_Form...';


GO
ALTER TABLE [forms].[FormResponse] DROP CONSTRAINT [FK_FormResponse_Form];


GO
PRINT N'Starting rebuilding table [forms].[Event]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [forms].[tmp_ms_xx_Event] (
    [Event_ID]                INT            IDENTITY (1, 1) NOT NULL,
    [EventType_ID]            INT            CONSTRAINT [DF_Event_EventType_ID] DEFAULT ((1)) NOT NULL,
    [Name]                    VARCHAR (255)  NOT NULL,
    [Code]                    VARCHAR (50)   NOT NULL,
    [TextDescription]         VARCHAR (4000) NULL,
    [EventDate]               DATE           NOT NULL,
    [ScheduledEventStartTime] TIME (7)       NULL,
    [ScheduledEventEndTime]   TIME (7)       NULL,
    [EventStartTime]          TIME (7)       NULL,
    [EventEndTime]            TIME (7)       NULL,
    [Project_ID]              INT            NOT NULL,
    [Location_ID]             INT            NULL,
    [TrainingInstitution_ID]  INT            NULL,
    [Active]                  INT            CONSTRAINT [DF__Event_sys_Active] DEFAULT ((1)) NOT NULL,
    [sys_CreatedBy]           VARCHAR (255)  CONSTRAINT [DF_Event_sys_CreatedBy] DEFAULT (user_name()) NOT NULL,
    [sys_CreatedOn]           DATETIME       CONSTRAINT [DF_Event_sys_CreatedOn] DEFAULT (getdate()) NOT NULL,
    [sys_ModifiedBy]          VARCHAR (255)  CONSTRAINT [DF_Event_sys_ModifiedBy] DEFAULT (user_name()) NOT NULL,
    [sys_ModifiedOn]          DATETIME       CONSTRAINT [DF_Event_sys_ModifiedOn] DEFAULT (getdate()) NOT NULL,
    [EventDate_ID]            AS             (CONVERT (INT, CONVERT (VARCHAR (8), [EventDate], (112)))),
    [LocalName]               NVARCHAR (255) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Event_3] PRIMARY KEY CLUSTERED ([Event_ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [forms].[Event])
    BEGIN
        SET IDENTITY_INSERT [forms].[tmp_ms_xx_Event] ON;
        INSERT INTO [forms].[tmp_ms_xx_Event] ([Event_ID], [Name], [Code], [TextDescription], [EventDate], [ScheduledEventStartTime], [ScheduledEventEndTime], [EventStartTime], [EventEndTime], [Project_ID], [Location_ID], [TrainingInstitution_ID], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn], [LocalName])
        SELECT   [Event_ID],
                 [Name],
                 [Code],
                 [TextDescription],
                 [EventDate],
                 [ScheduledEventStartTime],
                 [ScheduledEventEndTime],
                 [EventStartTime],
                 [EventEndTime],
                 [Project_ID],
                 [Location_ID],
                 [TrainingInstitution_ID],
                 [Active],
                 [sys_CreatedBy],
                 [sys_CreatedOn],
                 [sys_ModifiedBy],
                 [sys_ModifiedOn],
                 [LocalName]
        FROM     [forms].[Event]
        ORDER BY [Event_ID] ASC;
        SET IDENTITY_INSERT [forms].[tmp_ms_xx_Event] OFF;
    END

DROP TABLE [forms].[Event];

EXECUTE sp_rename N'[forms].[tmp_ms_xx_Event]', N'Event';

EXECUTE sp_rename N'[forms].[tmp_ms_xx_constraint_PK_Event_3]', N'PK_Event_3', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [forms].[EventRegister]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [forms].[tmp_ms_xx_EventRegister] (
    [EventRegister_ID]     INT           IDENTITY (1, 1) NOT NULL,
    [Event_ID]             INT           NOT NULL,
    [FirstName]            VARCHAR (255) NULL,
    [Surname]              VARCHAR (255) NULL,
    [Name]                 AS            (isnull([FirstName] + ' ', '') + isnull([Surname], '')),
    [IdentificationNumber] VARCHAR (255) NULL,
    [Age_ID]               INT           NULL,
    [AgeBand_ID]           INT           NULL,
    [DateOfBirth]          DATE          NULL,
    [Gender_ID]            INT           NULL,
    [Active]               INT           CONSTRAINT [DF__EventRegister_sys_Active] DEFAULT ((1)) NOT NULL,
    [sys_CreatedBy]        VARCHAR (255) CONSTRAINT [DF_EventRegister_sys_CreatedBy] DEFAULT (user_name()) NOT NULL,
    [sys_CreatedOn]        DATETIME      CONSTRAINT [DF_EventRegister_sys_CreatedOn] DEFAULT (getdate()) NOT NULL,
    [sys_ModifiedBy]       VARCHAR (255) CONSTRAINT [DF_EventRegister_sys_ModifiedBy] DEFAULT (user_name()) NOT NULL,
    [sys_ModifiedOn]       DATETIME      CONSTRAINT [DF_EventRegister_sys_ModifiedOn] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_EventRegister_3] PRIMARY KEY CLUSTERED ([EventRegister_ID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [forms].[EventRegister])
    BEGIN
        SET IDENTITY_INSERT [forms].[tmp_ms_xx_EventRegister] ON;
        INSERT INTO [forms].[tmp_ms_xx_EventRegister] ([EventRegister_ID], [Event_ID], [FirstName], [Surname], [IdentificationNumber], [Age_ID], [DateOfBirth], [Gender_ID], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn])
        SELECT   [EventRegister_ID],
                 [Event_ID],
                 [FirstName],
                 [Surname],
                 [IdentificationNumber],
                 [Age_ID],
                 [DateOfBirth],
                 [Gender_ID],
                 [Active],
                 [sys_CreatedBy],
                 [sys_CreatedOn],
                 [sys_ModifiedBy],
                 [sys_ModifiedOn]
        FROM     [forms].[EventRegister]
        ORDER BY [EventRegister_ID] ASC;
        SET IDENTITY_INSERT [forms].[tmp_ms_xx_EventRegister] OFF;
    END

DROP TABLE [forms].[EventRegister];

EXECUTE sp_rename N'[forms].[tmp_ms_xx_EventRegister]', N'EventRegister';

EXECUTE sp_rename N'[forms].[tmp_ms_xx_constraint_PK_EventRegister_3]', N'PK_EventRegister_3', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [forms].[Form]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [forms].[tmp_ms_xx_Form] (
    [Form_ID]            INT            IDENTITY (1, 1) NOT NULL,
    [Name]               VARCHAR (255)  NOT NULL,
    [Code]               VARCHAR (50)   NOT NULL,
    [TextDescription]    VARCHAR (4000) NULL,
    [Active]             INT            CONSTRAINT [DF__Form_sys_Active] DEFAULT ((1)) NOT NULL,
    [sys_CreatedBy]      VARCHAR (255)  CONSTRAINT [DF_Form_sys_CreatedBy] DEFAULT (user_name()) NOT NULL,
    [sys_CreatedOn]      DATETIME       CONSTRAINT [DF_Form_sys_CreatedOn] DEFAULT (getdate()) NOT NULL,
    [sys_ModifiedBy]     VARCHAR (255)  CONSTRAINT [DF_Form_sys_ModifiedBy] DEFAULT (user_name()) NOT NULL,
    [sys_ModifiedOn]     DATETIME       CONSTRAINT [DF_Form_sys_ModifiedOn] DEFAULT (getdate()) NOT NULL,
    [isConfidential]     BIT            CONSTRAINT [DF_Form_isConfidential] DEFAULT ((0)) NOT NULL,
    [isComplete]         BIT            CONSTRAINT [DF_Form_isComplete] DEFAULT ((0)) NOT NULL,
    [FormResponse_FNVID] BIGINT         NULL,
    [ProjectID]          INT            NULL,
    [Location_ID]        INT            NULL,
    [Age_ID]             INT            NULL,
    [AgeBand_ID]         INT            NULL,
    [CommunityType_ID]   INT            NULL,
    [Gender_ID]          INT            NULL,
    [Group_ID]           INT            NULL,
    [Institution_ID]     INT            NULL,
    [ReportingPeriod_ID] INT            NULL,
    [ShowAge]            BIT            NULL,
    [ShowAgeBand]        BIT            NULL,
    [ShowCommunityType]  BIT            NULL,
    [ShowGender]         BIT            NULL,
    [ShowGroup]          BIT            NULL,
    [ShowInstitution]    BIT            NULL,
    [LocalName]          NVARCHAR (255) NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Form_3] PRIMARY KEY CLUSTERED ([Form_ID] ASC),
    CONSTRAINT [tmp_ms_xx_constraint_UQ__Form__A25C5AA73EDF24B3] UNIQUE NONCLUSTERED ([Code] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [forms].[Form])
    BEGIN
        SET IDENTITY_INSERT [forms].[tmp_ms_xx_Form] ON;
        INSERT INTO [forms].[tmp_ms_xx_Form] ([Form_ID], [Name], [Code], [TextDescription], [Active], [sys_CreatedBy], [sys_CreatedOn], [sys_ModifiedBy], [sys_ModifiedOn], [isConfidential], [isComplete], [ProjectID], [Location_ID], [Age_ID], [AgeBand_ID], [CommunityType_ID], [Gender_ID], [Group_ID], [Institution_ID], [ShowAge], [ShowAgeBand], [ShowCommunityType], [ShowGender], [ShowGroup], [ShowInstitution], [LocalName])
        SELECT   [Form_ID],
                 [Name],
                 [Code],
                 [TextDescription],
                 [Active],
                 [sys_CreatedBy],
                 [sys_CreatedOn],
                 [sys_ModifiedBy],
                 [sys_ModifiedOn],
                 [isConfidential],
                 [isComplete],
                 [ProjectID],
                 [Location_ID],
                 [Age_ID],
                 [AgeBand_ID],
                 [CommunityType_ID],
                 [Gender_ID],
                 [Group_ID],
                 [Institution_ID],
                 [ShowAge],
                 [ShowAgeBand],
                 [ShowCommunityType],
                 [ShowGender],
                 [ShowGroup],
                 [ShowInstitution],
                 [LocalName]
        FROM     [forms].[Form]
        ORDER BY [Form_ID] ASC;
        SET IDENTITY_INSERT [forms].[tmp_ms_xx_Form] OFF;
    END

DROP TABLE [forms].[Form];

EXECUTE sp_rename N'[forms].[tmp_ms_xx_Form]', N'Form';

EXECUTE sp_rename N'[forms].[tmp_ms_xx_constraint_PK_Form_3]', N'PK_Form_3', N'OBJECT';

EXECUTE sp_rename N'[forms].[tmp_ms_xx_constraint_UQ__Form__A25C5AA73EDF24B3]', N'UQ__Form__A25C5AA73EDF24B3', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [forms].[FormResponse]...';


GO
ALTER TABLE [forms].[FormResponse]
    ADD [ReportingPeriod_ID] INT CONSTRAINT [DF_FormResponse_ReportingPeriod_ID] DEFAULT ((96)) NOT NULL;


GO
PRINT N'Altering [forms].[Question]...';


GO
ALTER TABLE [forms].[Question] DROP COLUMN [isComplete];


GO
ALTER TABLE [forms].[Question]
    ADD [ReportingPeriod_ID] INT      NULL,
        [DateResponse]       DATE     NULL,
        [DateTimeResponse]   DATETIME NULL,
        [TimeResponse]       TIME (7) NULL;


GO
PRINT N'Altering [forms].[Response]...';


GO
ALTER TABLE [forms].[Response]
    ADD [DateResponse]     DATE     NULL,
        [DateTimeResponse] DATETIME NULL,
        [TimeResponse]     TIME (7) NULL;


GO
PRINT N'Creating [forms].[EventType]...';


GO
CREATE TABLE [forms].[EventType] (
    [EventType_ID]    INT            IDENTITY (1, 1) NOT NULL,
    [Name]            VARCHAR (255)  NOT NULL,
    [Code]            VARCHAR (50)   NOT NULL,
    [TextDescription] VARCHAR (4000) NULL,
    [Active]          INT            NOT NULL,
    [sys_CreatedBy]   VARCHAR (255)  NOT NULL,
    [sys_CreatedOn]   DATETIME       NOT NULL,
    [sys_ModifiedBy]  VARCHAR (255)  NOT NULL,
    [sys_ModifiedOn]  DATETIME       NOT NULL,
    [LocalName]       NVARCHAR (255) NULL,
    CONSTRAINT [PK_EventType_3] PRIMARY KEY CLUSTERED ([EventType_ID] ASC),
    CONSTRAINT [UQ__eVENTtYPE] UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating DF__EventType_sys_Active...';


GO
ALTER TABLE [forms].[EventType]
    ADD CONSTRAINT [DF__EventType_sys_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating DF_EventType_sys_CreatedBy...';


GO
ALTER TABLE [forms].[EventType]
    ADD CONSTRAINT [DF_EventType_sys_CreatedBy] DEFAULT (user_name()) FOR [sys_CreatedBy];


GO
PRINT N'Creating DF_EventType_sys_CreatedOn...';


GO
ALTER TABLE [forms].[EventType]
    ADD CONSTRAINT [DF_EventType_sys_CreatedOn] DEFAULT (getdate()) FOR [sys_CreatedOn];


GO
PRINT N'Creating DF_EventType_sys_ModifiedBy...';


GO
ALTER TABLE [forms].[EventType]
    ADD CONSTRAINT [DF_EventType_sys_ModifiedBy] DEFAULT (user_name()) FOR [sys_ModifiedBy];


GO
PRINT N'Creating DF_EventType_sys_ModifiedOn...';


GO
ALTER TABLE [forms].[EventType]
    ADD CONSTRAINT [DF_EventType_sys_ModifiedOn] DEFAULT (getdate()) FOR [sys_ModifiedOn];


GO
PRINT N'Creating FK_Event_ActiveType...';


GO
ALTER TABLE [forms].[Event] WITH NOCHECK
    ADD CONSTRAINT [FK_Event_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Event_Institution...';


GO
ALTER TABLE [forms].[Event] WITH NOCHECK
    ADD CONSTRAINT [FK_Event_Institution] FOREIGN KEY ([TrainingInstitution_ID]) REFERENCES [disagg].[Institution] ([Institution_ID]);


GO
PRINT N'Creating FK_Event_Location...';


GO
ALTER TABLE [forms].[Event] WITH NOCHECK
    ADD CONSTRAINT [FK_Event_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_Event_Project...';


GO
ALTER TABLE [forms].[Event] WITH NOCHECK
    ADD CONSTRAINT [FK_Event_Project] FOREIGN KEY ([Project_ID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_Event_Indicator_Rollup_Event...';


GO
ALTER TABLE [forms].[Event_Indicator_Rollup] WITH NOCHECK
    ADD CONSTRAINT [FK_Event_Indicator_Rollup_Event] FOREIGN KEY ([Event_ID]) REFERENCES [forms].[Event] ([Event_ID]);


GO
PRINT N'Creating FK_Event_Programme_Event...';


GO
ALTER TABLE [forms].[Event_Programme] WITH NOCHECK
    ADD CONSTRAINT [FK_Event_Programme_Event] FOREIGN KEY ([Event_ID]) REFERENCES [forms].[Event] ([Event_ID]);


GO
PRINT N'Creating FK_Event_Project_Event...';


GO
ALTER TABLE [forms].[Event_Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Event_Project_Event] FOREIGN KEY ([Event_ID]) REFERENCES [forms].[Event] ([Event_ID]);


GO
PRINT N'Creating FK_EventRegister_Event...';


GO
ALTER TABLE [forms].[EventRegister] WITH NOCHECK
    ADD CONSTRAINT [FK_EventRegister_Event] FOREIGN KEY ([Event_ID]) REFERENCES [forms].[Event] ([Event_ID]);


GO
PRINT N'Creating FK_Event_EventType...';


GO
ALTER TABLE [forms].[Event] WITH NOCHECK
    ADD CONSTRAINT [FK_Event_EventType] FOREIGN KEY ([EventType_ID]) REFERENCES [forms].[EventType] ([EventType_ID]);


GO
PRINT N'Creating FK_EventRegister_ActiveType...';


GO
ALTER TABLE [forms].[EventRegister] WITH NOCHECK
    ADD CONSTRAINT [FK_EventRegister_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_EventRegister_Age1...';


GO
ALTER TABLE [forms].[EventRegister] WITH NOCHECK
    ADD CONSTRAINT [FK_EventRegister_Age1] FOREIGN KEY ([Age_ID]) REFERENCES [disagg].[Age] ([Age_ID]);


GO
PRINT N'Creating FK_EventRegister_Gender...';


GO
ALTER TABLE [forms].[EventRegister] WITH NOCHECK
    ADD CONSTRAINT [FK_EventRegister_Gender] FOREIGN KEY ([Gender_ID]) REFERENCES [disagg].[Gender] ([Gender_ID]);


GO
PRINT N'Creating FK_EventRegister_AgeBand...';


GO
ALTER TABLE [forms].[EventRegister] WITH NOCHECK
    ADD CONSTRAINT [FK_EventRegister_AgeBand] FOREIGN KEY ([AgeBand_ID]) REFERENCES [disagg].[AgeBand] ([AgeBand_ID]);


GO
PRINT N'Creating FK_Category_Form...';


GO
ALTER TABLE [forms].[Category] WITH NOCHECK
    ADD CONSTRAINT [FK_Category_Form] FOREIGN KEY ([Form_ID]) REFERENCES [forms].[Form] ([Form_ID]);


GO
PRINT N'Creating FK_Form_ActiveType...';


GO
ALTER TABLE [forms].[Form] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_Form_Age...';


GO
ALTER TABLE [forms].[Form] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_Age] FOREIGN KEY ([Age_ID]) REFERENCES [disagg].[Age] ([Age_ID]);


GO
PRINT N'Creating FK_Form_AgeBand...';


GO
ALTER TABLE [forms].[Form] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_AgeBand] FOREIGN KEY ([AgeBand_ID]) REFERENCES [disagg].[AgeBand] ([AgeBand_ID]);


GO
PRINT N'Creating FK_Form_CommunityType...';


GO
ALTER TABLE [forms].[Form] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_CommunityType] FOREIGN KEY ([CommunityType_ID]) REFERENCES [disagg].[CommunityType] ([CommunityType_ID]);


GO
PRINT N'Creating FK_Form_Gender...';


GO
ALTER TABLE [forms].[Form] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_Gender] FOREIGN KEY ([Gender_ID]) REFERENCES [disagg].[Gender] ([Gender_ID]);


GO
PRINT N'Creating FK_Form_Group...';


GO
ALTER TABLE [forms].[Form] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_Group] FOREIGN KEY ([Group_ID]) REFERENCES [disagg].[Group] ([Group_ID]);


GO
PRINT N'Creating FK_Form_Institution...';


GO
ALTER TABLE [forms].[Form] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_Institution] FOREIGN KEY ([Institution_ID]) REFERENCES [disagg].[Institution] ([Institution_ID]);


GO
PRINT N'Creating FK_Form_Location...';


GO
ALTER TABLE [forms].[Form] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_Form_Project...';


GO
ALTER TABLE [forms].[Form] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_Project] FOREIGN KEY ([ProjectID]) REFERENCES [app].[Project] ([ProjectID]);


GO
PRINT N'Creating FK_Form_Event_Form...';


GO
ALTER TABLE [forms].[Form_Event] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_Event_Form] FOREIGN KEY ([Form_ID]) REFERENCES [forms].[Form] ([Form_ID]);


GO
PRINT N'Creating FK_Form_Programme_Form...';


GO
ALTER TABLE [forms].[Form_Programme] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_Programme_Form] FOREIGN KEY ([Form_ID]) REFERENCES [forms].[Form] ([Form_ID]);


GO
PRINT N'Creating FK_Form_Project_Form...';


GO
ALTER TABLE [forms].[Form_Project] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_Project_Form] FOREIGN KEY ([Form_ID]) REFERENCES [forms].[Form] ([Form_ID]);


GO
PRINT N'Creating FK_FormResponse_Form...';


GO
ALTER TABLE [forms].[FormResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_FormResponse_Form] FOREIGN KEY ([Form_ID]) REFERENCES [forms].[Form] ([Form_ID]);


GO
PRINT N'Creating FK_Form_ReportingPeriod...';


GO
ALTER TABLE [forms].[Form] WITH NOCHECK
    ADD CONSTRAINT [FK_Form_ReportingPeriod] FOREIGN KEY ([ReportingPeriod_ID]) REFERENCES [Core].[ReportingPeriod] ([ID]);


GO
PRINT N'Creating FK_EventType_ActiveType...';


GO
ALTER TABLE [forms].[EventType] WITH NOCHECK
    ADD CONSTRAINT [FK_EventType_ActiveType] FOREIGN KEY ([Active]) REFERENCES [Core].[ActiveType] ([ID]);


GO
PRINT N'Creating FK_FormResponse_Location...';


GO
ALTER TABLE [forms].[FormResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_FormResponse_Location] FOREIGN KEY ([Location_ID]) REFERENCES [Core].[Location] ([Location_ID]);


GO
PRINT N'Creating FK_FormResponse_ReportingPeriod...';


GO
ALTER TABLE [forms].[FormResponse] WITH NOCHECK
    ADD CONSTRAINT [FK_FormResponse_ReportingPeriod] FOREIGN KEY ([ReportingPeriod_ID]) REFERENCES [Core].[ReportingPeriod] ([ID]);


GO
PRINT N'Creating FK_Question_ReportingPeriod...';


GO
ALTER TABLE [forms].[Question] WITH NOCHECK
    ADD CONSTRAINT [FK_Question_ReportingPeriod] FOREIGN KEY ([ReportingPeriod_ID]) REFERENCES [Core].[ReportingPeriod] ([ID]);


GO
PRINT N'Refreshing [Access].[vwFormUserMap]...';


GO
EXECUTE sp_refreshsqlmodule N'[Access].[vwFormUserMap]';


GO
PRINT N'Refreshing [rpt].[FormResponsesByProject]...';


GO
EXECUTE sp_refreshsqlmodule N'[rpt].[FormResponsesByProject]';


GO
PRINT N'Refreshing [rpt].[vwFormResponsesCount]...';


GO
EXECUTE sp_refreshsqlmodule N'[rpt].[vwFormResponsesCount]';


GO
PRINT N'Refreshing [forms].[vw_ResponsesByIndicator]...';


GO
EXECUTE sp_refreshsqlmodule N'[forms].[vw_ResponsesByIndicator]';


GO
PRINT N'Refreshing [forms].[vwUnfinishedForms]...';


GO
EXECUTE sp_refreshsqlmodule N'[forms].[vwUnfinishedForms]';


GO
PRINT N'Altering [mm].[ALL_ProgrammeMenuLink]...';


GO

ALTER VIEW [mm].[ALL_ProgrammeMenuLink] 
AS 

  SELECT Title = 'Indicator Details', 
         Link = ISNULL(GS.Value, '/') + [ProgrammeSiteName] 
                + 
'/Dashboards/Template%20Pages/Indicator%20Details%20Page.aspx?qsIndCode=' 
       + '[Sub Sector].[Sub Sector].%26[' 
       + Cast(dso.SubSector_ID AS VARCHAR(8)) + ']', 
ID = 100 * dso.SubSector_ID, 
Parent = (SELECT ID 
          FROM   [mm].[ALL_ProgrammeMenuGroup] G 
          WHERE  G.Title = dso.ShortName 
                 AND G.Programme_ID = do.Programme_ID), 
do.Programme_ID 
FROM   [app].[SubSector] dso 
INNER JOIN app.Sector do 
        ON dso.Sector_ID = do.Sector_ID 
INNER JOIN [app].[Programme] AS OC 
        ON do.Programme_ID = oc.Programme_ID 
						LEFT OUTER JOIN  settings.GlobalSettings GS
							ON GS.Code = 'MMBASEURL'
WHERE  dso.Active = 1  AND do.Active = 1 AND oc.Active = 1
UNION ALL 
SELECT Title = 'Location Indicator Details', 
Link = ISNULL(GS.Value, '/') + [ProgrammeSiteName] 
       + 
'/Dashboards/Template%20Pages/Provincial%20Indicator%20Details%20Page.aspx?qsIndCode=' 
+ '[Sub Sector].[Sub Sector].%26[' 
+ Cast(dso.SubSector_ID AS VARCHAR(8)) + ']', 
Priority = 100 * dso.SubSector_ID, 
Parent = (SELECT ID 
   FROM   [mm].[ALL_ProgrammeMenuGroup] G 
   WHERE  G.Title = dso.ShortName 
          AND G.Programme_ID = DO.Programme_ID), 
do.Programme_ID 
FROM   [app].[SubSector] dso 
INNER JOIN app.Sector do 
        ON dso.Sector_ID = do.Sector_ID 
INNER JOIN [app].[Programme] AS OC 
        ON do.Programme_ID = oc.Programme_ID 
						LEFT OUTER JOIN  settings.GlobalSettings GS
							ON GS.Code = 'MMBASEURL'
WHERE  dso.Active = 1 AND do.Active = 1 AND OC.Active = 1




------------------------------------------------------------------------

UNION ALL 
SELECT Title = 'Indicators', 
Link = ISNULL(GS.Value, '/') + [ProgrammeSiteName] 
       +  '/' + [ProjectSiteName] +
'/SitePages/IndicatorValues.aspx?qsIndCode=' 
+ '[Project].[Project].%26[' 
+ Cast(P.ProjectID AS VARCHAR(8)) + ']'
+ '&qsMDXKey=' 
+ '[Project].[Project].%26[' 
+ Cast(P.ProjectID AS VARCHAR(8)) + ']', 
Priority = 200 * P.ProjectID, 
Parent = (SELECT ID 
   FROM   [mm].[ALL_ProgrammeMenuGroup] G 
   WHERE  G.Title = P.ShortName 
          AND G.Programme_ID = P.Programme_ID), 
P.Programme_ID 
FROM   [app].[Project] P 
INNER JOIN [app].[Programme] AS OC 
        ON P.Programme_ID = oc.Programme_ID 
						LEFT OUTER JOIN  settings.GlobalSettings GS
							ON GS.Code = 'MMBASEURL'
WHERE  P.Active = 1 AND OC.Active = 1

UNION ALL 
SELECT Title = 'Milestones', 
Link = ISNULL(GS.Value, '/') + [ProgrammeSiteName] 
       +  '/' + [ProjectSiteName] +
'/SitePages/ActivityProgress.aspx?qsIndCode=' 
+ '[Project].[Project].%26[' 
+ Cast(P.ProjectID AS VARCHAR(8)) + ']'
+ '&qsMDXKey=' 
+ '[Project].[Project].%26[' 
+ Cast(P.ProjectID AS VARCHAR(8)) + ']'
, 
Priority = 200 * P.ProjectID, 
Parent = (SELECT ID 
   FROM   [mm].[ALL_ProgrammeMenuGroup] G 
   WHERE  G.Title = P.ShortName 
          AND G.Programme_ID = P.Programme_ID), 
P.Programme_ID 
FROM   [app].[Project] P 
INNER JOIN [app].[Programme] AS OC 
        ON P.Programme_ID = oc.Programme_ID 
						LEFT OUTER JOIN  settings.GlobalSettings GS
							ON GS.Code = 'MMBASEURL'
WHERE  P.Active = 1 AND OC.Active = 1

---------------------------------------------------------------------
--
---------------------------------------------------------------------
UNION ALL 
SELECT Title = 'By District', 
Link = 'http://carer03.cloudapp.net:350/HTMLClient/#/Rpt_PeopleReached/DIST/'
, 
Priority = 300 , 
Parent = 55
, Programme_ID
FROM app.Programme
UNION ALL 
SELECT Title = 'By Region', 
Link = 'http://carer03.cloudapp.net:350/HTMLClient/#/Rpt_PeopleReached/REG/'
, 
Priority = 310 , 
Parent = 55
, Programme_ID
FROM app.Programme
UNION ALL 
SELECT Title = 'By Country', 
Link = 'http://carer03.cloudapp.net:350/HTMLClient/#/Rpt_PeopleReached/CNTRY/'
, 
Priority = 320 , 
Parent = 55
, Programme_ID
FROM app.Programme


/*UNION ALL 
SELECT Title = Da.ShortName, 
Link = '/' + [ProgrammeSiteName] 
       + 
'/Dashboards/Template%20Pages/Milestones%20Page.aspx?qsActivity='
	+ Cast(da.Activity_ID AS VARCHAR(8)) , 
Priority = 1 - da.Activity_ID + 5000, 
Parent = (SELECT SRC.ID + P.ProjectID AS ID 
          FROM   app.Project P 
                 CROSS apply (SELECT ID 
                              FROM   mm.ALL_ProgrammeMenuCategory O2MC 
                              WHERE  Title = 'Projects'
							  AND O2MC.Programme_ID = OC.Programme_ID
							  ) Src 
          WHERE  Programme_ID = dp.Programme_ID 
                 AND P.ProjectID = da.ProjectID), 
Dp.Programme_ID 
FROM   app.Activity da 
INNER JOIN app.Project dp 
        ON da.ProjectID = dp.ProjectID 
INNER JOIN [app].[Programme] AS OC 
        ON dp.Programme_ID = oc.Programme_ID 
WHERE  da.Active = 1 AND dp.Active = 1 AND oc.Active = 1
*/
-------------------------------------------------------------------------------------------------
-- Excel Reports
-------------------------------------------------------------------------------------------------

UNION ALL
SELECT Title = 'PeopleReached', 
Link = ISNULL(GS.Value, '/') + [ProgrammeSiteName] 
+ '/Dashboards/Template%20Pages/ExcelRangeDisplayByProgram.aspx' 
+ '?qsFileName=/Reports/PowerPivotGallery/StatusByProgram.xlsx' 
+ '&qsNamedRange=PeopleReached' 
+ '&qsProgramme='  + OC.BusinessKey
, 
Priority = 200 * OC.Programme_ID , 
Parent = (SELECT ID 
   FROM   [mm].[ALL_ProgrammeMenuGroup] G 
   WHERE  G.Title = 'Excel Reports' 
          AND G.Programme_ID = OC.Programme_ID), 
OC.Programme_ID 
FROM    [app].[Programme] AS OC 

						LEFT OUTER JOIN  settings.GlobalSettings GS
							ON GS.Code = 'MMBASEURL'
WHERE  OC.Active = 1
UNION ALL
SELECT Title = 'Indicator progress', 
Link = ISNULL(GS.Value, '/') + [ProgrammeSiteName] 
+ '/Dashboards/Template%20Pages/ExcelRangeDisplayByProgram.aspx' 
+ '?qsFileName=/Reports/PowerPivotGallery/StatusByProgram.xlsx' 
+ '&qsNamedRange=Indicators' 
+ '&qsProgramme='  + OC.BusinessKey
, 
Priority = 210 * OC.Programme_ID , 
Parent = (SELECT ID 
   FROM   [mm].[ALL_ProgrammeMenuGroup] G 
   WHERE  G.Title = 'Excel Reports' 
          AND G.Programme_ID = OC.Programme_ID), 
OC.Programme_ID 
FROM    [app].[Programme] AS OC 

						LEFT OUTER JOIN  settings.GlobalSettings GS
							ON GS.Code = 'MMBASEURL'
WHERE  OC.Active = 1
UNION ALL
SELECT Title = 'Status', 
Link = ISNULL(GS.Value, '/') + [ProgrammeSiteName] 
+ '/Dashboards/Template%20Pages/ExcelRangeDisplayByProgram.aspx' 
+ '?qsFileName=/Reports/PowerPivotGallery/StatusByProgram.xlsx' 
+ '&qsNamedRange=Status' 
+ '&qsProgramme='  + OC.BusinessKey
, 
Priority = 220 * OC.Programme_ID , 
Parent = (SELECT ID 
   FROM   [mm].[ALL_ProgrammeMenuGroup] G 
   WHERE  G.Title = 'Excel Reports' 
          AND G.Programme_ID = OC.Programme_ID), 
OC.Programme_ID 
FROM    [app].[Programme] AS OC 

						LEFT OUTER JOIN  settings.GlobalSettings GS
							ON GS.Code = 'MMBASEURL'
WHERE  OC.Active = 1



---------------------------------------------------------------------
--
---------------------------------------------------------------------



UNION ALL 
SELECT Title = 'Status', 
Link = ISNULL(GS.Value, '/') + OC.ProgrammeSitename
						+ '/' + '/Dashboards/Template%20Pages/ExcelRangeDisplayByProgram.aspx'
						+ '?qsFileName=StatusByProgram.xlsx'
						+ '&qsNamedRange=Status'
						+ '&qsProgramme=' + OC.BusinessKey

, 
Priority = 200 * P.ProjectID, 
Parent = (SELECT ID 
   FROM   [mm].[ALL_ProgrammeMenuGroup] G 
   WHERE  G.Title = 'Program Reports >>>'
          AND G.Programme_ID = P.Programme_ID), 
P.Programme_ID 
FROM   [app].[Project] P 
INNER JOIN [app].[Programme] AS OC 
        ON P.Programme_ID = oc.Programme_ID 
						LEFT OUTER JOIN  settings.GlobalSettings GS
							ON GS.Code = 'MMBASEURL'
WHERE  P.Active = 1 AND OC.Active = 1


  UNION ALL 
SELECT Title = 'People Reached', 
Link = ISNULL(GS.Value, '/') + OC.ProgrammeSitename
						+ '/' + '/Dashboards/Template%20Pages/ExcelRangeDisplayByProgram.aspx'
						+ '?qsFileName=StatusByProgram.xlsx'
						+ '&qsNamedRange=PeopleReached'
						+ '&qsProgramme=' + OC.BusinessKey

, 
Priority = 300 * P.ProjectID, 
Parent = (SELECT ID 
   FROM   [mm].[ALL_ProgrammeMenuGroup] G 
   WHERE  G.Title = 'Program Reports >>>' 
          AND G.Programme_ID = P.Programme_ID), 
P.Programme_ID 
FROM   [app].[Project] P 
INNER JOIN [app].[Programme] AS OC 
        ON P.Programme_ID = oc.Programme_ID 
						LEFT OUTER JOIN  settings.GlobalSettings GS
							ON GS.Code = 'MMBASEURL'
WHERE  P.Active = 1 AND OC.Active = 1


UNION ALL 
SELECT Title = 'Indicators', 
Link = ISNULL(GS.Value, '/') + OC.ProgrammeSitename
						+ '/' + '/Dashboards/Template%20Pages/ExcelRangeDisplayByProgram.aspx'
						+ '?qsFileName=StatusByProgram.xlsx'
						+ '&qsNamedRange=Indicators'
						+ '&qsProgramme=' + OC.BusinessKey

, 
Priority = 400 * P.ProjectID, 
Parent = (SELECT ID 
   FROM   [mm].[ALL_ProgrammeMenuGroup] G 
   WHERE  G.Title = 'Program Reports >>>'
          AND G.Programme_ID = P.Programme_ID), 
P.Programme_ID 
FROM   [app].[Project] P 
INNER JOIN [app].[Programme] AS OC 
        ON P.Programme_ID = oc.Programme_ID 
						LEFT OUTER JOIN  settings.GlobalSettings GS
							ON GS.Code = 'MMBASEURL'
WHERE  P.Active = 1 AND OC.Active = 1
GO
PRINT N'Refreshing [mm].[Programme1MenuLink]...';


GO
EXECUTE sp_refreshsqlmodule N'[mm].[Programme1MenuLink]';


GO
PRINT N'Refreshing [mm].[Programme2MenuLink]...';


GO
EXECUTE sp_refreshsqlmodule N'[mm].[Programme2MenuLink]';


GO
PRINT N'Refreshing [mm].[Programme3MenuLink]...';


GO
EXECUTE sp_refreshsqlmodule N'[mm].[Programme3MenuLink]';


GO
PRINT N'Refreshing [mm].[Programme4MenuLink]...';


GO
EXECUTE sp_refreshsqlmodule N'[mm].[Programme4MenuLink]';


GO
PRINT N'Altering [forms].[InsertResponse]...';


GO
ALTER PROC [forms].[InsertResponse]


( 
  @FormID				    int
 ,@FormResponse_FNVID		int 
 ,@Question_ID				int 
 ,@PotentialResponse_ID		int = null
 ,@Response					varchar(max) = null
 ,@TrueFalse				bit = null
 ,@IntegerResponse			int = null
 ,@DecimalResponse			decimal(20,12) = null
 ,@DateResponse				date = null
 ,@isConfidential			bit = false
 ,@Location_ID				int = null
 ,@Age_ID					int = null
 ,@AgeBand_ID				int = null
 ,@CommunityType_ID			int = null
 ,@Gender_ID				int = null
 ,@Group_ID					int = null
 ,@Institution_ID			int = null
 ,@ProjectID			int = null
 ,@ReportingPeriod_ID			int = null
)
as 
DECLARE @tbl table(FormResponse_ID INT)

INSERT INTO forms.FormResponse
([Form_ID]
		   ,[FormResponse_FNVID]
		   ,[isConfidential]
			,[Location_ID]
			,[Age_ID]
			,[AgeBand_ID]
			,[CommunityType_ID]
			,[Gender_ID]
			,[Group_ID]
			,[Institution_ID]
			,[ProjectID]
			,[ReportingPeriod_ID]
		   )
		    SELECT @FormID 
			, @FormResponse_FNVID
			, @isConfidential
			,@Location_ID		
			,@Age_ID			
			,@AgeBand_ID		
			,@CommunityType_ID	
			,@Gender_ID		
			,@Group_ID			
			,@Institution_ID	
			,@ProjectID
			,@ReportingPeriod_ID
WHERE NOT EXISTS (SELECT 1 FROM forms.FormResponse WHERE FormResponse_FNVID = @FormResponse_FNVID)


INSERT INTO [forms].[Response]
           ([FormResponse_ID]
		   , FormResponse_FNVID
           ,[Question_ID]
           ,[PotentialResponse_ID]
           ,[Response]
           ,[TrueFalse]
		   ,IntegerResponse
		   ,DecimalResponse
		   ,DateResponse
           )
     SELECT
           
		    tbl.FormResponse_ID
			,@FormResponse_FNVID		
		   ,@Question_ID			
		   ,@PotentialResponse_ID	
		   ,@Response				
		   ,@TrueFalse		
		   ,@IntegerResponse
		   ,@DecimalResponse	
		   ,@DateResponse
		   FROM forms.FormResponse tbl
		    WHERE tbl.FormResponse_FNVID = @FormResponse_FNVID
GO
PRINT N'Creating [forms].[MarkComplete]...';


GO
CREATE PROCEDURE [forms].[MarkComplete]
(
	@FormResponse_FNVID bigint
 
)
AS



UPDATE [forms].[FormResponse]
          SET isComplete = 1 
		  WHERE FormResponse_FNVID = @FormResponse_FNVID

RETURN
GO
PRINT N'Creating [forms].[Event].[RelationshipDepth]...';


GO
EXECUTE sp_addextendedproperty @name = N'RelationshipDepth', @value = N'5', @level0type = N'SCHEMA', @level0name = N'forms', @level1type = N'TABLE', @level1name = N'Event';


GO
PRINT N'Creating [forms].[EventRegister].[RelationshipDepth]...';


GO
EXECUTE sp_addextendedproperty @name = N'RelationshipDepth', @value = N'6', @level0type = N'SCHEMA', @level0name = N'forms', @level1type = N'TABLE', @level1name = N'EventRegister';


GO
PRINT N'Creating [forms].[Form].[RelationshipDepth]...';


GO
EXECUTE sp_addextendedproperty @name = N'RelationshipDepth', @value = N'6', @level0type = N'SCHEMA', @level0name = N'forms', @level1type = N'TABLE', @level1name = N'Form';


GO
PRINT N'Creating [forms].[EventType].[RelationshipDepth]...';


GO
EXECUTE sp_addextendedproperty @name = N'RelationshipDepth', @value = N'1', @level0type = N'SCHEMA', @level0name = N'forms', @level1type = N'TABLE', @level1name = N'EventType';


GO
PRINT N'Refreshing [forms].[insertFormResponse]...';


GO
EXECUTE sp_refreshsqlmodule N'[forms].[insertFormResponse]';


GO

/*GeoSpatialData*/

IF ( EXISTS ( SELECT    [master].[dbo].[sysdatabases].[name]
              FROM      master.dbo.sysdatabases
              WHERE     ( '[' + [master].[dbo].[sysdatabases].[name] + ']' = 'SpatialProvince'
                          OR [master].[dbo].[sysdatabases].[name] = 'SpatialProvince'
                        ) ) ) 
    BEGIN
        INSERT  INTO Meerkat.Core.DimMunicipalityGEOM
                ( [Meerkat].[Core].[DimMunicipalityGEOM].[ID] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[LBL] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[FIP] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[MMT_ID] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[SHORT__FRM] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[LONG_FRM] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM0] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM1] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM2] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM3] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM4] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM5] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[geom]
                )
                SELECT  [SpatialProvince].[dbo].[SimpleProvince].[Location_ID] AS [ID] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[ISO] AS [LBL] ,
                        '' AS [FIP] ,
                        '' [MMT_ID] ,
                        '' [SHORT__FRM] ,
                        '' [LONG_FRM] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[ADM0] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[ADM1] ,
                        '' [ADM2] ,
                        '' [ADM3] ,
                        '' [ADM4] ,
                        '' [ADM5] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[Geog] AS [geom]
                FROM    [SpatialProvince].dbo.[SimpleProvince] 
    END

/*ALTER TABLE app.SubOutput ADD CONSTRAINT
    DF_SubOutput_Active DEFAULT 1 FOR Active
GO*/


/* Insert Data */

/*Insert Security Data*/
INSERT INTO [Access].[RoleType]
           ([RoleTypeName]
           ,[RoleTypeCode]
           ,[RoleTypeSourceKey]
           )

SELECT Q.Name, Q.Code, Q.Code
FROM
(SELECT 
	 'Super user' as Name
	,'SU' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [Access].[RoleType]
		WHERE RoleTypeCode = q.Code)

UNION ALL
SELECT Q.Name, Q.Code, Q.Code
FROM
(SELECT 
	 'Meerkat Capture & Form Capture' as Name
	,'CAPTURE' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [Access].[RoleType]
		WHERE RoleTypeCode = q.Code)

UNION ALL
SELECT Q.Name, Q.Code, Q.Code
FROM
(SELECT 
	 'Meerkat Admin' as Name
	,'ADMIN' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [Access].[RoleType]
		WHERE RoleTypeCode = q.Code)

UNION ALL
SELECT Q.Name, Q.Code, Q.Code
FROM
(SELECT 
	 'Meerkat Formbuilder' as Name
	,'FORMS' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [Access].[RoleType]
		WHERE RoleTypeCode = q.Code)


INSERT INTO [Access].[SystemRole]
           ([SystemRoleName]
           ,[SystemRoleCode]
           ,[SystemRoleSourceKey]
		   ,[RoleType_ID]
		   ,[DataVersion_ID]
           )

SELECT Q.Name, Q.Code, Q.Code, Q.RoleType_ID, Q.DataVersion_ID
FROM
(SELECT 
  'IT ' AS Name
, 'IT' AS Code
,RoleType_ID, DV.DataVersion_ID
 
 FROM [Access].RoleType CROSS JOIN [Core].[DataVersion] DV WHERE DV.[Order] = 0 AND RoleTypeSourceKey = 'SU'
	UNION
SELECT 
  'M&L Coordinators' AS Name
, 'M&L' AS Code
,RoleType_ID, DV.DataVersion_ID
 FROM [Access].RoleType CROSS JOIN [Core].[DataVersion] DV WHERE DV.[Order] = 0 AND RoleTypeSourceKey = 'CAPTURE'
	UNION
SELECT 
  'PQU' AS Name
, 'PQU' AS Code
,RoleType_ID, DV.DataVersion_ID
 FROM [Access].RoleType CROSS JOIN [Core].[DataVersion] DV WHERE DV.[Order] = 0 AND RoleTypeSourceKey = 'SU'
	UNION
SELECT 
  'M&E Officers/M&E Focal Point Person' AS Name
, 'M&E' AS Code
,RoleType_ID, DV.DataVersion_ID
 FROM [Access].RoleType CROSS JOIN [Core].[DataVersion] DV WHERE DV.[Order] = 1 AND RoleTypeSourceKey = 'CAPTURE'
	UNION
SELECT 
  'Project Manager' AS Name
, 'PM' AS Code
,RoleType_ID, DV.DataVersion_ID
 FROM [Access].RoleType CROSS JOIN [Core].[DataVersion] DV WHERE DV.[Order] = 1 AND RoleTypeSourceKey = 'CAPTURE'
	UNION
SELECT 
  'Area Manager' AS Name
, 'AM' AS Code
,RoleType_ID, DV.DataVersion_ID
 FROM [Access].RoleType CROSS JOIN [Core].[DataVersion] DV WHERE DV.[Order] = 1 AND RoleTypeSourceKey = 'CAPTURE'
	UNION
SELECT 
  'Project Officer/Partner Organization' AS Name
, 'PO' AS Code
,RoleType_ID, DV.DataVersion_ID
 FROM [Access].RoleType CROSS JOIN [Core].[DataVersion] DV WHERE DV.[Order] = 3 AND RoleTypeSourceKey = 'CAPTURE'
	UNION
SELECT 
  'Senior Program Officer' AS Name
, 'SPO' AS Code
,RoleType_ID, DV.DataVersion_ID
 FROM [Access].RoleType CROSS JOIN [Core].[DataVersion] DV WHERE DV.[Order] = 2 AND RoleTypeSourceKey = 'CAPTURE'
	

) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [Access].[SystemRole]
		WHERE Code = q.Code)




/*Insert Core data*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT  [Core].[ActiveType]
        ( [Core].[ActiveType].[ID] ,
          [Core].[ActiveType].[Code] ,
          [Core].[ActiveType].[Name]
        )
        SELECT  -1 ,
                N'Deleted' ,
                N'Deleted'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ActiveType
                             WHERE  [Core].[ActiveType].[ID] = -1 )
GO

INSERT  [Core].[ActiveType]
        ( [Core].[ActiveType].[ID] ,
          [Core].[ActiveType].[Code] ,
          [Core].[ActiveType].[Name]
        )
        SELECT  0 ,
                N'InActive' ,
                N'InActive'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ActiveType
                             WHERE  [Core].[ActiveType].[ID] = 0 )
GO
INSERT  [Core].[ActiveType]
        ( [Core].[ActiveType].[ID] ,
          [Core].[ActiveType].[Code] ,
          [Core].[ActiveType].[Name]
        )
        SELECT  1 ,
                N'Active' ,
                N'Active'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ActiveType
                             WHERE  [Core].[ActiveType].[ID] = 1 )
GO

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT  INTO [Core].StatusType
        ( [Core].[StatusType].[ID] ,
          [Core].[StatusType].[Code] ,
          [Core].[StatusType].[Name] ,
          [Core].[StatusType].[Value],
          [Core].[StatusType].[Active],
		  [Core].[StatusType].[BusinessKey]
        )
        SELECT  0 ,
                '+' ,
                'On Target' ,
                1,
                1,
				'+'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.StatusType
                             WHERE  [Core].[StatusType].[Code] = '+' )
        UNION ALL
        SELECT  1 ,
                '=' ,
                'Acceptable' ,
                0,
                1,
				'='
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.StatusType
                             WHERE  [Core].[StatusType].[Code] = '=' )
        UNION ALL
        SELECT  2 ,
                '-' ,
                'Sub par' ,
                -1,
                1,
				'-'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.StatusType
                             WHERE  [Core].[StatusType].[Code] = '-' )

GO


/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT Core.DataVersion ON 
INSERT  INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description],
		  [Core].[DataVersion].[BusinessKey]
        )
        SELECT  1 ,
                '0' ,
                0 ,
                'External' ,
                0 ,
                '',
				'0'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 0 )

INSERT  INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description],
		  [Core].[DataVersion].[BusinessKey]
        )
        SELECT  1 ,
                '1' ,
                1 ,
                'Publish' ,
                1 ,
                '',
				'1'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 1 )

INSERT  INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description],
		  [Core].[DataVersion].[BusinessKey]
        )
        SELECT  1 ,
                '2' ,
                2 ,
                'Final Draft' ,
                2 ,
                '',
				'2'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 2 )

INSERT  INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description],
		  [Core].[DataVersion].[BusinessKey]
        )
        SELECT  1 ,
                '3' ,
                3 ,
                'First Draft' ,
                3 ,
                '',
				'3'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 3 )


SET IDENTITY_INSERT  Core.DataVersion OFF
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET NOCOUNT ON;
IF ( SELECT COUNT(1)
     FROM   Core.DimDate
   ) = 0 
    BEGIN
--Alter start

        DECLARE @StartDate DATETIME ,
            @EndDate DATETIME ,
            @Date DATETIME;

        SET @StartDate = '1990/01/01';
        SET @EndDate = '2025/12/31';
        SET @Date = @StartDate;

        WHILE @Date <= @EndDate 
            BEGIN

                DECLARE @IsLeapYear BIT
                IF ( ( YEAR(@Date) % 4 = 0 )
                     AND ( YEAR(@Date) % 100 != 0
                           OR YEAR(@Date) % 400 = 0
                         )
                   ) 
                    BEGIN

                        SELECT  @IsLeapYear = 1;

                    END
                ELSE 
                    BEGIN

                        SELECT  @IsLeapYear = 0;

                    END

                DECLARE @IsWeekend BIT
                IF ( DATEPART(dw, @Date) = 1
                     OR DATEPART(dw, @Date) = 7
                   ) 
                    BEGIN

                        SELECT  @IsWeekend = 1;

                    END
                ELSE 
                    BEGIN

                        SELECT  @IsWeekend = 0;

                    END

                INSERT  INTO Core.DimDate
                        ( [Core].[DimDate].[DateID] ,
                          [Core].[DimDate].[Date] ,
                          [Core].[DimDate].[Day] ,
                          [Core].[DimDate].[DaySuffix] ,
                          [Core].[DimDate].[USDayOfWeek] ,
                          [Core].[DimDate].[DayOfWeek] ,
                          [Core].[DimDate].[DOWInMonth] ,
                          [Core].[DimDate].[DayOfYear] ,
                          [Core].[DimDate].[WeekOfYear] ,
                          [Core].[DimDate].[WeekOfMonth] ,
                          [Core].[DimDate].[MonthNumber] ,
                          [Core].[DimDate].[MonthName] ,
                          [Core].[DimDate].[Quarter] ,
                          [Core].[DimDate].[QuarterName] ,
                          [Core].[DimDate].[YearName] ,
                          [Core].[DimDate].[YearNumber] ,
                          [Core].[DimDate].[StandardDate] ,
                          [Core].[DimDate].[IsPublicHoliday] ,
                          [Core].[DimDate].[HolidayText]
                        )
                VALUES  ( REPLACE(CONVERT(NVARCHAR(50), CONVERT(DATE, @Date)),
                                  '-', '') ,
                          @Date ,
                          DATEPART(DAY, @Date) ,
                          SUBSTRING(CONVERT(CHAR(3), DATENAME(DW, @Date)), 1,
                                    3) ,
                          DATEPART(WEEKDAY, @Date) ,
                          CASE WHEN DATEPART(WEEKDAY, @Date) - 1 = 0 THEN 1
                               WHEN DATEPART(WEEKDAY, @Date) - 1 = 6 THEN 7
                               ELSE DATEPART(WEEKDAY, @Date) - 1
                          END ,
                          DATEPART(DAY,
                                   ( DATEADD(S, -1,
                                             DATEADD(MM,
                                                     DATEDIFF(M, 0, @Date) + 1,
                                                     0)) )) ,
                          DATEPART(DAYOFYEAR, @Date) ,
                          DATEPART(WEEK, @Date) ,
                          ( DATEPART(DAY, @Date) / 7 ) + 1 ,
                          DATEPART(MONTH, @Date) ,
                          DATENAME(MONTH, @Date) ,
                          DATEPART(QUARTER, @Date) ,
                          'Quarter ' + CONVERT(NVARCHAR(255), DATEPART(QUARTER,
                                                              @Date)) ,
                          CONVERT(CHAR(4), DATEPART(YEAR, @Date)) ,
                          DATEPART(YEAR, @Date) ,
                          NULL ,
                          NULL ,
                          NULL 
                        );

                SET @Date += 1;

            END

        PRINT 'Updated Table [Shared.DimDate]';

    END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT  INTO Core.ReportingPeriod
        ( [Core].[ReportingPeriod].[ReportingPeriod] ,
          [Core].[ReportingPeriod].[StartDateID] ,
          [Core].[ReportingPeriod].[EndDateID] ,
          [Core].[ReportingPeriod].[FirstCycleDate] ,
          [Core].[ReportingPeriod].[LastCycleDate] ,
          [Core].[ReportingPeriod].[YearName] ,
          [Core].[ReportingPeriod].[YearNumber],
          [Core].[ReportingPeriod].[Summary],
		  [Core].[ReportingPeriod].[BusinessKey]
        )
        SELECT  rc.[ReportingPeriod] ,
                rc.[StartDateID] ,
                rc.[EndDateID] ,
                rc.[FirstCycleDate] ,
                rc.[LastCycleDate] ,
                rc.[YearName] ,
                rc.[YearNumber],
                CONCAT(rc.[YearNumber],' - ',rc.[ReportingPeriod]),
				rc.[ReportingPeriod]
        FROM    [Core].[ReportCycle] AS rc
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ReportingPeriod
                             WHERE  [Core].[ReportingPeriod].[StartDateID] = rc.StartDateID
                                    AND [Core].[ReportingPeriod].[EndDateID] = rc.EndDateID )



GO


update CORE.ReportingPeriod
set summary = 
	YearName + '-Q' + CAST([ReportingPeriod] as char(1)) 
	+ ' (' + Cast(startdateid as char(8)) 
	+ ' - ' + Cast(enddateid as char(8))
	+ ')'
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [app].[MilestoneType] ON 

GO
INSERT  [app].[MilestoneType]
        ( [app].[MilestoneType].[MilestoneTypeID] ,
          [app].[MilestoneType].[Code] ,
          [app].[MilestoneType].[Name] ,
          [app].[MilestoneType].[Active],
		  [app].[MilestoneType].[BusinessKey]
        )
        SELECT  4 ,
                N'Project' ,
                N'Project' ,
                1,
				N'Project'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.MilestoneType
                             WHERE  [app].[MilestoneType].[MilestoneTypeID] = 4 )
GO
INSERT  [app].[MilestoneType]
        ( [app].[MilestoneType].[MilestoneTypeID] ,
          [app].[MilestoneType].[Code] ,
          [app].[MilestoneType].[Name] ,
          [app].[MilestoneType].[Active],
		  [app].[MilestoneType].[BusinessKey]
        )
        SELECT  5 ,
                N'Activity' ,
                N'Activity' ,
                1,
				N'Activity'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.MilestoneType
                             WHERE  [app].[MilestoneType].[MilestoneTypeID] = 5 )
GO
SET IDENTITY_INSERT [app].[MilestoneType] OFF
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [app].[IndicatorType] ON 

GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  1 ,
                N'Outcome' ,
                N'Outcome' ,
                1,
				N'Outcome'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 1 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  2 ,
                N'Output' ,
                N'Output' ,
                1,
				N'Output'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 2 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  3 ,
                N'SubOutput' ,
                N'SubOutput' ,
                1,
				N'SubOutput'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 3 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  4 ,
                N'Activity' ,
                N'Activity' ,
                1,
				N'Activity'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 4 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  5 ,
                N'Milestone' ,
                N'Milestone' ,
                1,
				N'Milestone'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 5 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  6 ,
                N'OS' ,
                N'Overall Status' ,
                1,
				N'OS'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 6 )
GO



INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  7 ,
                N'PROG' ,
                N'Programme' ,
                1,
				N'PROG'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 7 )
GO

INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  8 ,
                N'SEC' ,
                N'Sector' ,
                1,
				N'SEC'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 8 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  9 ,
                N'SS' ,
                N'SubSector' ,
                1,
				N'SS'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 9 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  10,
                N'PRJ' ,
                N'Project' ,
                1,
				N'PRJ'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 9 )
GO
SET IDENTITY_INSERT [app].[IndicatorType] OFF
GO

INSERT  INTO [Core].PersonParticipationType
(
          [Core].[PersonParticipationType].[Code] ,
          [Core].[PersonParticipationType].[Name] ,
		  [Core].[PersonParticipationType].[BusinessKey]
        )
        SELECT  Src.Code
				, Src.Name
				, Src.Code
			FROM (
			SELECT 'DIRECT' AS Code,
                'Direct Participant' AS Name
				) Src
                
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.PersonParticipationType
                             WHERE  [Core].[PersonParticipationType].[Code] = Src.Code )
        UNION ALL
        SELECT  Src.Code
				, Src.Name
				, Src.Code
			FROM (
			SELECT 'INDIRECT' AS Code,
                'Indirect Participant' AS Name
				) Src
                
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.PersonParticipationType
                             WHERE  [Core].[PersonParticipationType].[Code] = Src.Code )
        UNION ALL
        SELECT  Src.Code
				, Src.Name
				, Src.Code
			FROM (
			SELECT 'STAFF' AS Code,
                'Care Staff' AS Name
				) Src
                
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.PersonParticipationType
                             WHERE  [Core].[PersonParticipationType].[Code] = Src.Code )

		UNION ALL
        SELECT  Src.Code
				, Src.Name
				, Src.Code
			FROM (
			SELECT 'FACILITATOR' AS Code,
                'Project Facilitator' AS Name
				) Src
                
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.PersonParticipationType
                             WHERE  [Core].[PersonParticipationType].[Code] = Src.Code )
							 
		UNION ALL
        SELECT  Src.Code
				, Src.Name
				, Src.Code
			FROM (
			SELECT 'PARTNER' AS Code,
                'Project Partner Staff' AS Name
				) Src
                
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.PersonParticipationType
                             WHERE  [Core].[PersonParticipationType].[Code] = Src.Code )

/*Insert settings*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'MMBASEURL' AS Code
		, 'MegaMenu Base URL' AS Name 
		, '/' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)
	 

	 INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'BASESITEURL' AS Code
		, 'Fully qualified Base URL' AS Name 
		, 'http://mgs-m6700/sites/Meerkat/' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)


	 INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'Client' AS Code
		, 'Client' AS Name 
		, 'CARE Somalia' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)






/*Insert Forms data*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Multiple choice' as Name
	,'MCQ' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

		
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Radio Button' as Name
	,'RB' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Text response' as Name
	,'TR' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

		
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )
SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'True or false' as Name
	,'BOOL' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

		

				
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )
SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Integer' as Name
	,'INT' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)


				
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )
SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Decimal' as Name
	,'DEC' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

		
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )
SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Count' as Name
	,'CNT' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )
SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Date' as Name
	,'DATE' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)


INSERT INTO [forms].[RollupType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Sum' as Name
	,'SUM' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[RollupType]
		WHERE Code = q.Code)

GO

INSERT INTO [forms].[RollupType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.TextDescription
FROM
(SELECT 
	 'Average' as Name
	,'AVG' as Code
	,'Arithmetric mean' as TextDescription
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[RollupType]
		WHERE Code = q.Code)
GO

INSERT INTO [forms].[RollupType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Maximum' as Name
	,'MAX' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[RollupType]
		WHERE Code = q.Code)
GO

INSERT INTO [forms].[RollupType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Minimum' as Name
	,'MIN' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[RollupType]
		WHERE Code = q.Code)
GO

INSERT INTO [forms].[RollupType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Count' as Name
	,'CNT' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[RollupType]
		WHERE Code = q.Code)

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET identity_insert disagg.gender on

/*
INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
		   ,[BusinessKey]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name, Q.BusinessKey
FROM
(SELECT 
	-1 As Gender_ID
	,'UNK' as Code
	,'Unknown' as Name
	,'UNK' as BusinessKey
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)
*/
INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
		   ,[BusinessKey]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name, Q.BusinessKey
FROM
(SELECT 
	0 As Gender_ID
	,'M' as Code
	,'Male' as Name
	,'M' as BusinessKey
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)
     


INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
		   ,[BusinessKey]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name, Q.BusinessKey
FROM
(SELECT 
	1 As Gender_ID
	,'F' as Code
	,'Female' as Name
	,'F' as BusinessKey
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)


/*
INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
		   ,[BusinessKey]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name, Q.BusinessKey
FROM
(SELECT 
	2 As Gender_ID
	,'UND' as Code
	,'Undisclosed' as Name
	,'UND' as BusinessKey
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)
*/
INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
		   ,[BusinessKey]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name, Q.BusinessKey
FROM
(SELECT 
	3 As Gender_ID
	,'N/A' as Code
	,'N/A' as Name
	,'N/A' as BusinessKey
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)


SET identity_insert disagg.gender off


/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
set identity_insert disagg.age on
insert into disagg.age (age_id)
select rn -1 from (
select row_number() over(order by name) rn

from sys.all_objects
) src
where rn <= 120
and not exists
(SELECT 1 FROM disagg.Age
where age.Age_ID = rn-1)

set identity_insert disagg.age off

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

SET identity_insert [rpt].CustomReportType on


INSERT INTO [rpt].[CustomReportType]
           ([CustomReportType_ID]
		   ,[Code]
           ,[Name]
		   ,[BusinessKey]
           )
SELECT Q.CustomReportType_ID, Q.Code, Q.Name, Q.BusinessKey
FROM
(SELECT 
	1 As CustomReportType_ID
	,'DNR' as Code
	,'Donor' as Name
	,'DNR' as BusinessKey
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [rpt].[CustomReportType]
		WHERE Code = q.Code)

SET identity_insert [rpt].CustomReportType off


/* Insert Demo data */
--:r .\DemoData\PostDeploymentScript.Demo.PDS.sql
									

/*Insert CARE Data */
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
--:r .\CareData\Core.OrganizationType.CARE.PDS.sql
--:r .\CareData\Core.Organization.CARE.PDS.sql
--:r .\app.Outcome.CARE.PDS.sql
--:r .\app.Output.CARE.PDS.sql
--:r .\app.SubOutput.CARE.PDS.sql
--:r .\app.IndicatorMilestone.CARE.PDS.sql
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description], [BusinessKey])
     SELECT
          'CONT' ,'Continent' ,'Continent', 'CONT' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='CONT')

INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description], [BusinessKey])
     SELECT
          'CNTRY' ,'Country' ,'Country', 'CNTRY' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='CNTRY')

          
INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description], [BusinessKey])
     SELECT
          'REG' ,'Region' ,'Region', 'REG' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='REG')

          
INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description], [BusinessKey])
     SELECT
          'DIST' ,'District' ,'District', 'DIST' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='DIST')

INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description], [BusinessKey])
     SELECT
          'VILG' ,'Village' ,'Village', 'VILG' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='VILG')

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [Core].[Location] ON
GO

INSERT [Core].[Location] (
    [Location_ID]
    , [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
	, [BusinessKey]
    ) 
    SELECT 1
    , 'SOM' Code
    , 'Somaliland' [Name]
    , 137600
    , 3500000
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'CNTRY')
    , NULL
    , NULL [Geog]
	, 'SOM'
    WHERE NOT EXISTS (
    SELECT 1 FROM [Core].[Location] WHERE Code = 'SOM'
    )

	INSERT [Core].[Location] (
    [Location_ID]
    , [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
	, [BusinessKey]
    ) 
    SELECT 2
    , 'MOG' Code
    , 'Mogadishu' [Name]
    , 1637
    , 1530000
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'CNTRY')
    , NULL
    , NULL [Geog]
	, 'MOG'
    WHERE NOT EXISTS (
    SELECT 1 FROM [Core].[Location] WHERE Code = 'MOG'
    )

	INSERT [Core].[Location] (
    [Location_ID]
    , [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
	, [BusinessKey]
    ) 

    SELECT 3
    , 'PUNT' Code
    , 'Puntland' [Name]
    , 212510
    , 3900000
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'CNTRY')
    , NULL
    , NULL [Geog]
	, 'PUNT'
    WHERE NOT EXISTS (
    SELECT 1 FROM [Core].[Location] WHERE Code = 'PUNT'
    )

SET IDENTITY_INSERT [Core].[Location] OFF
GO

INSERT [Core].[Location] (
    [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
	, [BusinessKey]
    ) 
    SELECT '1' Code
    , 'Lascanood' [Name]
    , NULL 
    , NULL
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '1'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '1' 
    )	
    

UNION ALL
SELECT '2' Code
    , 'Ainabo' [Name]
    , NULL 
    , NULL
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '2'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '2' 
    )	
    

UNION ALL
SELECT '3' Code
    , 'Odweyne' [Name]
    , 12245 
    , 1109735
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '3'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '3' 
    )	
    

UNION ALL
SELECT '4' Code
    , 'Burao' [Name]
    , 35375 
    , 240075
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '4'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '4' 
    )	
    

UNION ALL
SELECT '5' Code
    , 'Badhan' [Name]
    , 6497 
    , 101539
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '5'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '5' 
    )	
    

UNION ALL
SELECT '6' Code
    , 'Erigavo' [Name]
    , 17083 
    , 284657
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '6'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '6' 
    )	
    

UNION ALL
SELECT '7' Code
    , 'El-afweyn' [Name]
    , 45720 
    , 623060
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '7'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '7' 
    )	
    

UNION ALL
SELECT '8' Code
    , 'Waaberi' [Name]
    , 55840 
    , 661941
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'MOG')
    , NULL [Geog]
	, '8'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '8' 
    )	
    

UNION ALL
SELECT '9' Code
    , 'Wadajir' [Name]
    , 25797 
    , 1025756
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'MOG')
    , NULL [Geog]
	, '9'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '9' 
    )	
    

UNION ALL
SELECT '10' Code
    , 'Hodan' [Name]
    , 66923 
    , 291166
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'MOG')
    , NULL [Geog]
	, '10'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '10' 
    )	
    

UNION ALL
SELECT '11' Code
    , 'Garowe' [Name]
    , 25336 
    , 143294
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '11'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '11' 
    )	
    

UNION ALL
SELECT '12' Code
    , 'Jalam' [Name]
    , 5127 
    , 1356301
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '12'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '12' 
    )	
    

UNION ALL
SELECT '13' Code
    , 'Godobjiran' [Name]
    , 2409 
    , 365330
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '13'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '13' 
    )	
    

UNION ALL
SELECT '14' Code
    , 'Galkacyo' [Name]
    , 2555 
    , 516212
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '14'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '14' 
    )	
    

UNION ALL
SELECT '15' Code
    , 'Gardo' [Name]
    , 24385 
    , 1012709
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '15'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '15' 
    )	
    

UNION ALL
SELECT '16' Code
    , 'Bosasso' [Name]
    , 5952 
    , 1098584
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '16'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '16' 
    )	
    

UNION ALL
SELECT '18' Code
    , 'Taleh' [Name]
    , 3107 
    , 596268
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '18'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '18' 
    )	
    

UNION ALL
SELECT '19' Code
    , 'Kalabyer' [Name]
    , 2361 
    , 693558
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '19'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '19' 
    )	
    

UNION ALL
SELECT '20' Code
    , 'Baran' [Name]
    , 1205 
    , 528054
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '20'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '20' 
    )	
    

UNION ALL
SELECT '21' Code
    , 'Buraan' [Name]
    , 2325 
    , 942581
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '21'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '21' 
    )	
    

UNION ALL
SELECT '22' Code
    , 'Hinglool' [Name]
    , 2449 
    , 1623282
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'KE')
    , NULL [Geog]
	, '22'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '22' 
    )	   

    /*Location Insert end*/
    /*Update Geography*/

/*IF (CHARINDEX(CONVERT(VARCHAR, SERVERPROPERTY('edition')), N'Express') > -1)
BEGIN    
IF NOT EXISTs (select 1 FROM sys.Databases where Name = 'KenyaShapes')
    
    RAISERROR ('You must restore the KenyaShapes DB to get the geography shapes, obtain it at https://www.dropbox.com/s/jtb9ohpuov51wkt/KenyaShapes.bak', -- Message text.
               18, -- Severity.
               1 -- State.
               );

UPDATE [Core].[Location]
SET Geog = (SELECT Geography::UnionAggregate(geom)
  FROM [KenyaShapes].[dbo].[Counties])
  WHERE [Code] = 'KE'

UPDATE [Core].[Location]
SET Geog = geom
FROM [KenyaShapes].[dbo].[Counties]
  WHERE  [Code] = CAST(COUNTY_COD as varchar(10))
END*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [app].[Programme]
           ([Code]
           ,[LongName]
           ,[BusinessKey]
           ,[ShortName]
		   ,[ProgrammeSiteName]
           ,[TextDescription]


)
SELECT		src.[Code]
           ,src.[LongName]
           ,src.[Code]
           ,src.[ShortName]
           ,src.[ProgrammeSiteName] 
           ,src.[TextDescription]

FROM (
	SELECT 'RVW' AS Code
		,'Emergency Response Programme' As LongName
		,'Emergency Response' as ShortName
		,'program1' as ProgrammeSiteName
		,'The Emergency Response Program (ERP) provides direct humanitarian relief to communities affected by drought and conflict across Somalia.' As TextDescription
	) Src
	WHERE NOT EXISTS (SELECT 1 FROM app.Programme P WHERE P.BusinessKey = Src.Code)

UNION ALL

SELECT		src.[Code]
           ,src.[LongName]
           ,src.[Code]
           ,src.[ShortName]
           ,src.[ProgrammeSiteName] 
           ,src.[TextDescription]

FROM (
	SELECT 'UYP' AS Code
		,'Urban Youth Programme' As LongName
		,'Urban Youth' as ShortName
		,'program2' as ProgrammeSiteName
		,'The Urban Youth Program (UYP) focuses on job creation and livelihood opportunities for poor youth through e.g. secondary education, vocational training, small business development, and microfinance.' As TextDescription
	) Src
	WHERE NOT EXISTS (SELECT 1 FROM app.Programme P WHERE P.BusinessKey = Src.Code)

UNION ALL
SELECT		src.[Code]
           ,src.[LongName]
           ,src.[Code]
           ,src.[ShortName]
           ,src.[ProgrammeSiteName] 
           ,src.[TextDescription]

FROM (
	SELECT 'RVW' AS Code
		,'Rural Vulnerable Women Programme' As LongName
		,'Rural Women' as ShortName
		,'program3' as ProgrammeSiteName
		,'The Rural Vulnerable Women’s Program (RVWP) supports poor rural women and girls in addressing long term underlying causes of poverty and vulnerability, addressing social, economic, cultural and political obstacles to positive change. We help women and girls improve their economic status, access education and support them to play a greater role in local leadership and conflict resolution.' As TextDescription
	) Src
	WHERE NOT EXISTS (SELECT 1 FROM app.Programme P WHERE P.BusinessKey = Src.Code)

UNION ALL


SELECT		src.[Code]
           ,src.[LongName]
           ,src.[Code]
           ,src.[ShortName]
           ,src.[ProgrammeSiteName] 
           ,src.[TextDescription]

FROM (
	SELECT 'CO' AS Code
		,'Country Office' As LongName
		,'Country Office' as ShortName
		,'program4' as ProgrammeSiteName
		,'The Country Office aggregates information from all programme sites.' As TextDescription
	) Src
	WHERE NOT EXISTS (SELECT 1 FROM app.Programme P WHERE P.BusinessKey = Src.Code)
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'MMBASEURL' AS Code
		, 'MegaMenu Base URL' AS Name 
		, '/' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)
	 

	 INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'BASESITEURL' AS Code
		, 'Fully qualified Base URL' AS Name 
		, 'http://carer03.cloudapp.net/' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)


	 INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'Client' AS Code
		, 'Client' AS Name 
		, 'CARE Somalia' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)



						

--:r .\InternalTest\PostDeploymentScript.InternalTest.PDS.sql	


/*end Insert data*/

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [forms].[Event] WITH CHECK CHECK CONSTRAINT [FK_Event_ActiveType];

ALTER TABLE [forms].[Event] WITH CHECK CHECK CONSTRAINT [FK_Event_Institution];

ALTER TABLE [forms].[Event] WITH CHECK CHECK CONSTRAINT [FK_Event_Location];

ALTER TABLE [forms].[Event] WITH CHECK CHECK CONSTRAINT [FK_Event_Project];

ALTER TABLE [forms].[Event_Indicator_Rollup] WITH CHECK CHECK CONSTRAINT [FK_Event_Indicator_Rollup_Event];

ALTER TABLE [forms].[Event_Programme] WITH CHECK CHECK CONSTRAINT [FK_Event_Programme_Event];

ALTER TABLE [forms].[Event_Project] WITH CHECK CHECK CONSTRAINT [FK_Event_Project_Event];

ALTER TABLE [forms].[EventRegister] WITH CHECK CHECK CONSTRAINT [FK_EventRegister_Event];

ALTER TABLE [forms].[Event] WITH CHECK CHECK CONSTRAINT [FK_Event_EventType];

ALTER TABLE [forms].[EventRegister] WITH CHECK CHECK CONSTRAINT [FK_EventRegister_ActiveType];

ALTER TABLE [forms].[EventRegister] WITH CHECK CHECK CONSTRAINT [FK_EventRegister_Age1];

ALTER TABLE [forms].[EventRegister] WITH CHECK CHECK CONSTRAINT [FK_EventRegister_Gender];

ALTER TABLE [forms].[EventRegister] WITH CHECK CHECK CONSTRAINT [FK_EventRegister_AgeBand];

ALTER TABLE [forms].[Category] WITH CHECK CHECK CONSTRAINT [FK_Category_Form];

ALTER TABLE [forms].[Form] WITH CHECK CHECK CONSTRAINT [FK_Form_ActiveType];

ALTER TABLE [forms].[Form] WITH CHECK CHECK CONSTRAINT [FK_Form_Age];

ALTER TABLE [forms].[Form] WITH CHECK CHECK CONSTRAINT [FK_Form_AgeBand];

ALTER TABLE [forms].[Form] WITH CHECK CHECK CONSTRAINT [FK_Form_CommunityType];

ALTER TABLE [forms].[Form] WITH CHECK CHECK CONSTRAINT [FK_Form_Gender];

ALTER TABLE [forms].[Form] WITH CHECK CHECK CONSTRAINT [FK_Form_Group];

ALTER TABLE [forms].[Form] WITH CHECK CHECK CONSTRAINT [FK_Form_Institution];

ALTER TABLE [forms].[Form] WITH CHECK CHECK CONSTRAINT [FK_Form_Location];

ALTER TABLE [forms].[Form] WITH CHECK CHECK CONSTRAINT [FK_Form_Project];

ALTER TABLE [forms].[Form_Event] WITH CHECK CHECK CONSTRAINT [FK_Form_Event_Form];

ALTER TABLE [forms].[Form_Programme] WITH CHECK CHECK CONSTRAINT [FK_Form_Programme_Form];

ALTER TABLE [forms].[Form_Project] WITH CHECK CHECK CONSTRAINT [FK_Form_Project_Form];

ALTER TABLE [forms].[FormResponse] WITH CHECK CHECK CONSTRAINT [FK_FormResponse_Form];

ALTER TABLE [forms].[Form] WITH CHECK CHECK CONSTRAINT [FK_Form_ReportingPeriod];

ALTER TABLE [forms].[EventType] WITH CHECK CHECK CONSTRAINT [FK_EventType_ActiveType];

ALTER TABLE [forms].[FormResponse] WITH CHECK CHECK CONSTRAINT [FK_FormResponse_Location];

ALTER TABLE [forms].[FormResponse] WITH CHECK CHECK CONSTRAINT [FK_FormResponse_ReportingPeriod];

ALTER TABLE [forms].[Question] WITH CHECK CHECK CONSTRAINT [FK_Question_ReportingPeriod];


GO
PRINT N'Update complete.';


GO
