<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="5/27/2014 3:56:33 PM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="SERVER2012"
  DTS:CreatorName="gjs"
  DTS:DTSID="{8FB21FB5-C3D9-4551-9939-B505253EB8C1}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="11.0.2100.60"
  DTS:LocaleID="1033"
  DTS:MaxErrorCount="2000"
  DTS:ObjectName="900_CreateStagingTemplates"
  DTS:VersionBuild="132"
  DTS:VersionGUID="{42652F22-7703-41B8-89E9-2B8226FCC27A}"
  DTS:VersionMajor="0">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[StagingTemplate]"
      DTS:CreationName="EXCEL"
      DTS:DelayValidation="True"
      DTS:DTSID="{7E3F230C-30D8-48E2-92AC-BBCA8F60B566}"
      DTS:ObjectName="StagingTemplate">
      <DTS:PropertyExpression
        DTS:Name="ConnectionString">@[User::strConnectionString]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Dropbox\Clients\Meerkat\CARE Somalia\Data\StagingTemplates\Templates\Staging.Activity.xlsx;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{55B86E8C-F6E1-4B82-BDCB-069EDFDF9566}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="bitHasStagingTable">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AF2E7401-2458-4270-AE29-515548D5B283}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="objTableList">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{6B286388-AFD2-43EF-A62F-2DB256C81272}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;Provider=Microsoft.ACE.OLEDB.12.0;Data Source=&quot;+ @[User::strExportTemplatePath] +&quot;;Extended Properties=\&quot;EXCEL 12.0 XML;HDR=YES\&quot;&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strConnectionString">
      <DTS:VariableValue
        DTS:DataType="8">Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\Dropbox\Clients\Meerkat\CARE Somalia\Data\StagingTemplates\Templates\Staging.Activity.xlsx;Extended Properties="EXCEL 12.0 XML;HDR=YES"</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FAC21D85-2CAE-48DE-A144-2A8B8F537260}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strCreateTable">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{0E2E997A-D32E-4D93-BE78-E519E18215BC}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strExcelColumns">
      <DTS:VariableValue
        DTS:DataType="8">Activity_ID,BusinessKey,ProjectBusinessKey,Code,LongName,ShortName,TextDescription</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5A8715E8-01C9-4A97-A905-FB8F3C75415C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strExcelTableName">
      <DTS:VariableValue
        DTS:DataType="8">Activity</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7022977A-6A27-492B-B3A6-81B4EA34F62E}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="REPLACE(&#xA;@[$Project::strStagingTemplatePath] + &quot;\\Templates\\&quot; +  &quot;Staging.&quot;+ @[User::strExcelTableName] +&quot;.xlsx&quot;&#xA;, &quot;\\\\&quot;,&quot;\\&quot;)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strExportTemplatePath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Dropbox\Clients\Meerkat\CARE Somalia\Data\StagingTemplates\Templates\Staging.Activity.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{17CB7E70-C7DA-40CA-81BC-E2E8BEDB7147}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strJoin">
      <DTS:VariableValue
        DTS:DataType="8">JOIN [app].[Project] AS [Project] ON [p].[ProjectID] = [Project].[ProjectID]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AA4AE287-6E05-40B4-9DCD-FBA7F9D56C11}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;INSERT INTO OPENROWSET( 'Microsoft.ACE.OLEDB.12.0'&#xA;                      , 'Excel 12.0;Database=&quot;+ @[User::strExportTemplatePath] +&quot;'&#xA;                      , 'select &quot;+ @[User::strExcelColumns] +&quot; from [Sheet1$]'&#xA;                      ) &quot; +  @[User::strSelect] + &quot; &quot; + @[User::strTableName] + &quot; AS p &quot; +  @[User::strJoin]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strOPENROWSET">
      <DTS:VariableValue
        DTS:DataType="8">INSERT INTO OPENROWSET( 'Microsoft.ACE.OLEDB.12.0'
                      , 'Excel 12.0;Database=C:\Dropbox\Clients\Meerkat\CARE Somalia\Data\StagingTemplates\Templates\Staging.Activity.xlsx'
                      , 'select Activity_ID,BusinessKey,ProjectBusinessKey,Code,LongName,ShortName,TextDescription from [Sheet1$]'
                      ) SELECT [p].[Activity_ID],[p].[BusinessKey],[Project].[BusinessKey],[p].[Code],[p].[LongName],[p].[ShortName],[p].[TextDescription] FROM [app].[Activity] AS p JOIN [app].[Project] AS [Project] ON [p].[ProjectID] = [Project].[ProjectID]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7A0B10E0-A963-4AF7-ADFB-0344E0FFFA92}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::strExcelColumns]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSCRColumns">
      <DTS:VariableValue
        DTS:DataType="8">Activity_ID,BusinessKey,ProjectBusinessKey,Code,LongName,ShortName,TextDescription</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3D786C7B-E447-40A6-B53B-6FCEFD136452}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::strExportTemplatePath]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSCRFileLocation">
      <DTS:VariableValue
        DTS:DataType="8">C:\Dropbox\Clients\Meerkat\CARE Somalia\Data\StagingTemplates\Templates\Staging.Activity.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BEBFB014-2A10-4967-BBED-AC07F1C71E31}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSCRHeading">
      <DTS:VariableValue
        DTS:DataType="8">For internal use only. Do not fill in or change</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{BC4C7B3F-0EB4-42EC-962B-1A164737CE2C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSCRRowStart">
      <DTS:VariableValue
        DTS:DataType="8">3</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9460B591-0993-40FE-80BF-9AEB91122F27}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSCRSheetName">
      <DTS:VariableValue
        DTS:DataType="8">Sheet1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C4B98677-9A41-4E27-A6BC-AA78A69D0BFF}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::strMeerkatConnStr]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSCRSQLConn">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=.\sql2012;Initial Catalog=Meerkat;Integrated Security=SSPI;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AC34E78D-F93D-49E8-90D1-680ACA9E082F}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::strSelect] + &quot; &quot; + @[User::strTableName] + &quot; AS p &quot; +  @[User::strJoin]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSCRSQLStatement">
      <DTS:VariableValue
        DTS:DataType="8">SELECT [p].[Activity_ID],[p].[BusinessKey],[Project].[BusinessKey],[p].[Code],[p].[LongName],[p].[ShortName],[p].[TextDescription] FROM [app].[Activity] AS p JOIN [app].[Project] AS [Project] ON [p].[ProjectID] = [Project].[ProjectID]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9C58E5B3-50FE-46A7-956B-D186B0E5C270}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSelect">
      <DTS:VariableValue
        DTS:DataType="8">SELECT [p].[Activity_ID],[p].[BusinessKey],[Project].[BusinessKey],[p].[Code],[p].[LongName],[p].[ShortName],[p].[TextDescription] FROM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F219F780-E426-4485-BDAC-D49B9E94F0A1}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '&quot;+ @[User::strExcelTableName] +&quot;')&#xA;BEGIN&#xA;    SELECT CAST(1 AS BIT)   AS HasStaging&#xA;END&#xA;ELSE&#xA;BEGIN&#xA;    SELECT CAST(0 AS BIT)   AS HasStaging&#xA;END&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSQLCheckStagingTable">
      <DTS:VariableValue
        DTS:DataType="8">IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Activity')
BEGIN
    SELECT CAST(1 AS BIT)   AS HasStaging
END
ELSE
BEGIN
    SELECT CAST(0 AS BIT)   AS HasStaging
END</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{FD801399-8BFE-442B-978D-950B2B45FF78}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DECLARE @TableName  VARCHAR(100) = '&quot;+ @[User::strExcelTableName] +&quot;'&#xA;IF OBJECT_ID('tempdb..#TempColumns') IS NOT NULL&#xA;    DROP TABLE #TempColumns&#xA;SELECT '`'+C.ColumnName+'` ' +&#xA;        CASE WHEN DT.DATA_TYPE IN ('int','datetime','date') THEN UPPER(DT.DATA_TYPE)&#xA;            ELSE 'NTEXT'&#xA;        END AS DataType&#xA;     , C.ColumnName AS ColumnName&#xA;     , ROW_NUMBER() OVER(ORDER BY C.[order],C.ColumnName) AS ID&#xA;INTO #TempColumns&#xA;FROM (   select a.name as TableName, b.name AS ColumnName, 1 as [order]&#xA;        from sys.Tables as a&#xA;        inner join sys.Columns as b on (a.object_id = b.object_id)&#xA;        where b.name like a.name + 'ID'&#xA;           or b.name like a.name + '_ID'&#xA;           or b.name = 'ID'&#xA;        UNION ALL&#xA;        select a.name, b.name, b.column_id&#xA;        from sys.Tables as a&#xA;        inner join sys.Columns as b on (a.object_id = b.object_id)&#xA;        /*where b.name like '%BusinessKey'&#xA;        UNION ALL&#xA;        select a.name, b.name, 3&#xA;        from sys.Tables as a&#xA;        inner join sys.Columns as b on (a.object_id = b.object_id)&#xA;        */where b.name not like a.name + 'ID'&#xA;          and b.name not like a.name + '_ID'&#xA;          and b.name != 'ID'&#xA;          /*and b.name not like '%BusinessKey'*/&#xA;     )  AS C&#xA;JOIN INFORMATION_SCHEMA.COLUMNS AS DT&#xA;    ON C.TableName = DT.TABLE_NAME&#xA;    AND C.ColumnName = DT.COLUMN_NAME&#xA;WHERE C.TableName = @TableName&#xA;ORDER BY C.TableName&#xA;       , C.[order]&#xA;       , C.ColumnName&#xA;&#xA;DECLARE @SQL            NVARCHAR(4000)&#xA;      , @ExcelColumns   NVARCHAR(4000)&#xA;      , @Select         NVARCHAR(4000)&#xA;SET @SQL = 'CREATE TABLE `Sheet1` ('&#xA;SELECT @SQL = @SQL + SUBSTRING((SELECT ',' + DataType AS [text()] &#xA;                                FROM #TempColumns&#xA;                                For XML PATH('')&#xA;                               )&#xA;                              ,2,8000&#xA;                              )&#xA;SET @SQL = @SQL + ')'&#xA;SELECT @ExcelColumns = SUBSTRING((SELECT ',' + ColumnName   AS [text()] &#xA;                                  FROM #TempColumns&#xA;                                  For XML PATH('')&#xA;                                 )&#xA;                                 ,2,8000&#xA;                                )&#xA;SET @Select = 'SELECT '&#xA;SELECT @Select = @Select + SUBSTRING((SELECT ',CAST([' &#xA;                                            + CASE WHEN PATINDEX('%BusinessKey%',ColumnName) &gt; 1&#xA;                                                    THEN SUBSTRING(ColumnName,1,PATINDEX('%BusinessKey%',ColumnName)-1) + '].[BusinessKey'&#xA;                                                    ELSE 'p].[' + ColumnName END&#xA;                                            + '] AS NVARCHAR(MAX))'   AS [text()] &#xA;                                      FROM #TempColumns&#xA;                                      For XML PATH('')&#xA;                                     )&#xA;                                     ,2,8000&#xA;                                    )&#xA;SET @Select = @Select + ' FROM '&#xA;&#xA;SELECT @SQL             AS CreateTable&#xA;     , @ExcelColumns    AS ExcelColumns&#xA;     , @Select          AS SelectStatement&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSQLCreateTable">
      <DTS:VariableValue
        DTS:DataType="8">DECLARE @TableName  VARCHAR(100) = 'Activity'
IF OBJECT_ID('tempdb..#TempColumns') IS NOT NULL
    DROP TABLE #TempColumns
SELECT '`'+C.ColumnName+'` ' +
        CASE WHEN DT.DATA_TYPE IN ('int','datetime','date') THEN UPPER(DT.DATA_TYPE)
            ELSE 'NTEXT'
        END AS DataType
     , C.ColumnName AS ColumnName
     , ROW_NUMBER() OVER(ORDER BY C.[order],C.ColumnName) AS ID
INTO #TempColumns
FROM (   select a.name as TableName, b.name AS ColumnName, 1 as [order]
        from sys.Tables as a
        inner join sys.Columns as b on (a.object_id = b.object_id)
        where b.name like a.name + 'ID'
           or b.name like a.name + '_ID'
           or b.name = 'ID'
        UNION ALL
        select a.name, b.name, b.column_id
        from sys.Tables as a
        inner join sys.Columns as b on (a.object_id = b.object_id)
        /*where b.name like '%BusinessKey'
        UNION ALL
        select a.name, b.name, 3
        from sys.Tables as a
        inner join sys.Columns as b on (a.object_id = b.object_id)
        */where b.name not like a.name + 'ID'
          and b.name not like a.name + '_ID'
          and b.name != 'ID'
          /*and b.name not like '%BusinessKey'*/
     )  AS C
JOIN INFORMATION_SCHEMA.COLUMNS AS DT
    ON C.TableName = DT.TABLE_NAME
    AND C.ColumnName = DT.COLUMN_NAME
WHERE C.TableName = @TableName
ORDER BY C.TableName
       , C.[order]
       , C.ColumnName

DECLARE @SQL            NVARCHAR(4000)
      , @ExcelColumns   NVARCHAR(4000)
      , @Select         NVARCHAR(4000)
SET @SQL = 'CREATE TABLE `Sheet1` ('
SELECT @SQL = @SQL + SUBSTRING((SELECT ',' + DataType AS [text()] 
                                FROM #TempColumns
                                For XML PATH('')
                               )
                              ,2,8000
                              )
SET @SQL = @SQL + ')'
SELECT @ExcelColumns = SUBSTRING((SELECT ',' + ColumnName   AS [text()] 
                                  FROM #TempColumns
                                  For XML PATH('')
                                 )
                                 ,2,8000
                                )
SET @Select = 'SELECT '
SELECT @Select = @Select + SUBSTRING((SELECT ',CAST([' 
                                            + CASE WHEN PATINDEX('%BusinessKey%',ColumnName) &gt; 1
                                                    THEN SUBSTRING(ColumnName,1,PATINDEX('%BusinessKey%',ColumnName)-1) + '].[BusinessKey'
                                                    ELSE 'p].[' + ColumnName END
                                            + '] AS NVARCHAR(MAX))'   AS [text()] 
                                      FROM #TempColumns
                                      For XML PATH('')
                                     )
                                     ,2,8000
                                    )
SET @Select = @Select + ' FROM '

SELECT @SQL             AS CreateTable
     , @ExcelColumns    AS ExcelColumns
     , @Select          AS SelectStatement</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{981C2796-BB82-413D-A6B9-22FB1E31B7E5}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;DECLARE @SQL            NVARCHAR(4000)&#xA;      , @strTableName   VARCHAR(100) = '&quot;+ @[User::strTableName] +&quot;'&#xA;SELECT @SQL = SUBSTRING((SELECT ' ' + JoinClause AS [text()] &#xA;                         FROM (SELECT jointype&#xA;                                        + '[' + rs + '].[' + rt + '] AS ['+ rt + (CASE WHEN DupTableRefID != 1 THEN CAST(DupTableRefID AS VARCHAR(10)) ELSE '' END)+'] ON [p].[' + pc + '] = ['+ rt + (CASE WHEN DupTableRefID != 1 THEN CAST(DupTableRefID AS VARCHAR(10)) ELSE '' END)+'].[' + rc + ']'   AS JoinClause&#xA;                                FROM  (SELECT CASE WHEN pc.is_nullable = 0&#xA;                                                    THEN 'JOIN '&#xA;                                                    ELSE 'LEFT JOIN '&#xA;                                                END     AS jointype&#xA;                                            , rs.name   AS rs&#xA;                                            , rt.name   AS rt&#xA;                                            , rc.name   AS rc&#xA;                                            , ps.name   AS ps&#xA;                                            , pt.name   AS pt&#xA;                                            , pc.name   AS pc&#xA;                                            , ROW_NUMBER() OVER (PARTITION BY rt.name ORDER BY pc.name)  AS DupTableRefID&#xA;                                        FROM sys.foreign_keys f&#xA;                                        JOIN sys.foreign_key_columns fc&#xA;                                            ON f.object_id = fc.constraint_object_id&#xA;                                        JOIN sys.tables pt&#xA;                                            ON f.parent_object_id = pt.object_id&#xA;                                        JOIN sys.schemas ps&#xA;                                            ON ps.schema_id = pt.schema_id&#xA;                                        JOIN sys.columns pc&#xA;                                            ON fc.parent_column_id = pc.column_id&#xA;                                            AND pt.object_id = pc.object_id&#xA;                                        JOIN sys.tables rt&#xA;                                            ON f.referenced_object_id = rt.object_id&#xA;                                        JOIN sys.schemas rs&#xA;                                            ON rs.schema_id = rt.schema_id&#xA;                                        JOIN sys.columns rc&#xA;                                            ON fc.referenced_column_id = rc.column_id&#xA;                                            AND rt.object_id = rc.object_id&#xA;                                        WHERE rt.name != 'ActiveType'&#xA;                                          AND '['+ ps.name +'].[' + pt.name + ']' = @strTableName&#xA;                                        )   AS SUB2&#xA;                                  &#xA;                              ) SUB&#xA;                         For XML PATH('')&#xA;                        )&#xA;                        ,2,8000&#xA;                       )&#xA;SELECT @SQL AS JoinClause&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSQLJoin">
      <DTS:VariableValue
        DTS:DataType="8">DECLARE @SQL            NVARCHAR(4000)
      , @strTableName   VARCHAR(100) = '[app].[Activity]'
SELECT @SQL = SUBSTRING((SELECT ' ' + JoinClause AS [text()] 
                         FROM (SELECT jointype
                                        + '[' + rs + '].[' + rt + '] AS ['+ rt + (CASE WHEN DupTableRefID != 1 THEN CAST(DupTableRefID AS VARCHAR(10)) ELSE '' END)+'] ON [p].[' + pc + '] = ['+ rt + (CASE WHEN DupTableRefID != 1 THEN CAST(DupTableRefID AS VARCHAR(10)) ELSE '' END)+'].[' + rc + ']'   AS JoinClause
                                FROM  (SELECT CASE WHEN pc.is_nullable = 0
                                                    THEN 'JOIN '
                                                    ELSE 'LEFT JOIN '
                                                END     AS jointype
                                            , rs.name   AS rs
                                            , rt.name   AS rt
                                            , rc.name   AS rc
                                            , ps.name   AS ps
                                            , pt.name   AS pt
                                            , pc.name   AS pc
                                            , ROW_NUMBER() OVER (PARTITION BY rt.name ORDER BY pc.name)  AS DupTableRefID
                                        FROM sys.foreign_keys f
                                        JOIN sys.foreign_key_columns fc
                                            ON f.object_id = fc.constraint_object_id
                                        JOIN sys.tables pt
                                            ON f.parent_object_id = pt.object_id
                                        JOIN sys.schemas ps
                                            ON ps.schema_id = pt.schema_id
                                        JOIN sys.columns pc
                                            ON fc.parent_column_id = pc.column_id
                                            AND pt.object_id = pc.object_id
                                        JOIN sys.tables rt
                                            ON f.referenced_object_id = rt.object_id
                                        JOIN sys.schemas rs
                                            ON rs.schema_id = rt.schema_id
                                        JOIN sys.columns rc
                                            ON fc.referenced_column_id = rc.column_id
                                            AND rt.object_id = rc.object_id
                                        WHERE rt.name != 'ActiveType'
                                          AND '['+ ps.name +'].[' + pt.name + ']' = @strTableName
                                        )   AS SUB2
                                  
                              ) SUB
                         For XML PATH('')
                        )
                        ,2,8000
                       )
SELECT @SQL AS JoinClause</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F2349FB7-0BE0-48FD-B95D-9756BF7A73C0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strSrcSQL">
      <DTS:VariableValue
        DTS:DataType="8">SELECT '[' + TABLE_SCHEMA + '].[' + TABLE_NAME + ']'    AS TableName      , '[' + TABLE_NAME + ']'                           AS StagingTableName      , TABLE_NAME                                       AS ExcelTableName 	 , ROW_NUMBER() over ( ORDER BY TABLE_SCHEMA        , TABLE_NAME)									AS RowN FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'   AND TABLE_NAME NOT IN ('__RefactorLog','sysdiagrams')  ORDER BY TABLE_SCHEMA        , TABLE_NAME</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F730457C-3ADC-4A54-8527-A52AD1189E47}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strStagingTableName">
      <DTS:VariableValue
        DTS:DataType="8">[Activity]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2CB4B7CF-76A8-48BC-80E3-62E51BF4CB15}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="REPLACE( &#xA;@[$Project::strStagingTemplatePath] + &quot;\\Templates\\Staging.&quot;   + @[User::strExcelTableName]  + &quot;.xlsx&quot;&#xA;, &quot;\\\\&quot;, &quot;\\&quot;)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strStagingTemplatePath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Dropbox\Clients\Meerkat\CARE Somalia\Data\StagingTemplates\Templates\Staging.Activity.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B83812DD-4C8A-4D58-BA73-19F142AFC312}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strTableName">
      <DTS:VariableValue
        DTS:DataType="8">[app].[Activity]</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{AB07D224-07BB-456A-A13E-A4225A07FC74}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;UPDATE settings.TablesToExport  SET Export = 0&#xA;WHERE Table_Schema + '.' + Table_Name= '&quot; +    @[User::strTableName]  +&quot;'&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="strUpdateExportStatus">
      <DTS:VariableValue
        DTS:DataType="8">UPDATE settings.TablesToExport  SET Export = 0
WHERE Table_Schema + '.' + Table_Name= '[app].[Activity]'</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\SEQ_1"
      DTS:CreationName="STOCK:SEQUENCE"
      DTS:Description="Sequence Container"
      DTS:DTSID="{DFE6A91B-B29E-4973-91FF-EEFADAF4E0D2}"
      DTS:ExecutableType="STOCK:SEQUENCE"
      DTS:LocaleID="-1"
      DTS:ObjectName="SEQ_1">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\SEQ_1\FELC_Table list"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{1CFE610C-B27E-4C20-8027-63A56DE9CBF3}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:MaxErrorCount="2000"
          DTS:ObjectName="FELC_Table list">
          <DTS:ForEachEnumerator
            DTS:CreationName="Microsoft.SqlServer.Dts.Runtime.Enumerators.ADO.ForEachADOEnumerator, Microsoft.SqlServer.ForEachADOEnumerator, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
            DTS:DTSID="{EE94886F-C662-4A36-9695-FB18BE1D1995}"
            DTS:ObjectName="{3FCA2250-9753-4093-8865-F97E89344903}">
            <DTS:ObjectData>
              <FEEADO
                EnumType="EnumerateRowsInFirstTable"
                VarName="User::objTableList" />
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\SEQ_1\FELC_Table list\SCR_InsertDataIntoExcel"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{CD4611AF-C2F8-4BD2-91C6-21B6397067DC}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="SCR_InsertDataIntoExcel"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_41b91de1a6eb484fa2af5a3f5990407e"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::strSCRColumns,User::strSCRFileLocation,User::strSCRHeading,User::strSCRRowStart,User::strSCRSheetName,User::strSCRSQLConn,User::strSCRSQLStatement">
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ST_41b91de1a6eb484fa2af5a3f5990407e.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{8F131FEC-B7DD-4844-9B2C-169EC2DA1179}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_e50df588644e4330b542e2db20e8a598</RootNamespace><AssemblyName>ST_41b91de1a6eb484fa2af5a3f5990407e</AssemblyName><TargetFrameworkVersion>v4.0</TargetFrameworkVersion><FileAlignment>512</FileAlignment></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="DocumentFormat.OpenXml, Version=2.5.5631.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"><SpecificVersion>False</SpecificVersion><HintPath>C:\Program Files (x86)\Open XML SDK\V2.5\lib\DocumentFormat.OpenXml.dll</HintPath><Private>True</Private><EmbedInteropTypes>False</EmbedInteropTypes></Reference><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="WindowsBase" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="devenv.exe" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug2c9e808a-6bfd-4224-a12e-d5f9849a564f/52efd8ff-1343-4bc5-a878-d2a621d5e3eb&quot;" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST110</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e50df588644e4330b542e2db20e8a598.Properties.Settings.get_Default():ST_e50df588644e4330b542e2db20e8a598.Properties.Sett" +
    "ings")]

namespace ST_e50df588644e4330b542e2db20e8a598.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;

using System.Runtime.CompilerServices;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.Sql;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Generic;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;

using System.Linq;
#endregion

namespace ST_e50df588644e4330b542e2db20e8a598
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion

        SqlConnection srcConn = new SqlConnection();
		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
			// TODO: Add your code here

			Dts.TaskResult = (int)ScriptResults.Success;
            try
            {
                bool fireAgain = false;
                Dts.Events.FireInformation( 0, "OOXML Excel Generation"
                   , string.Format(
                   @"Fired with values. File: {0} 
                   SheetName: {1}
                   Heading: {2}
                   Columns: {3}"
                    , Dts.Variables["User::strSCRFileLocation"].Value.ToString()
                    , Dts.Variables["User::strSCRSheetName"].Value.ToString()
                    , Dts.Variables["User::strSCRHeading"].Value.ToString()
                    , Dts.Variables["User::strSCRColumns"].Value.ToString())
                    
                    ,"", 0, ref fireAgain)
                    ;
                int seconds = InsertTwoLinesIntoExcel(
                     Dts.Variables["User::strSCRFileLocation"].Value.ToString()
                    , Dts.Variables["User::strSCRSheetName"].Value.ToString()
                    , Dts.Variables["User::strSCRHeading"].Value.ToString()
                    , Dts.Variables["User::strSCRColumns"].Value.ToString()
                    );

        
                 Dts.Events.FireInformation( 0, "OOXML Excel Generation", string.Format(" File : {0} completed in {1} seconds", 
                     Dts.Variables["User::strSCRFileLocation"].Value.ToString(), seconds)
                    ,"", 0, ref fireAgain);
            }
            catch (Exception ex)
            {
            }

		}

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        private int InsertTwoLinesIntoExcel(string pFileLocation, string pSheetName, string strNotes, string strLstHeadings)
        {
            #region Create file if it doesn't exist
            System.IO.FileInfo fi = new System.IO.FileInfo(pFileLocation);

            if (!fi.Exists)
            {
                SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Create(pFileLocation, SpreadsheetDocumentType.Workbook);
                WorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();
                workbookpart.Workbook = new Workbook();
                WorksheetPart worksheetPart = workbookpart.AddNewPart<WorksheetPart>();

                worksheetPart.Worksheet = new Worksheet(new SheetData());
                Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook.AppendChild<Sheets>(new Sheets());
                Sheet sheet = new Sheet() { Id = spreadsheetDocument.WorkbookPart.GetIdOfPart(worksheetPart), SheetId = 1, Name = pSheetName };
                sheets.Append(sheet);


                /*SharedStringTablePart shareStringTablePart = workbookpart.AddNewPart<SharedStringTablePart>();

                shareStringTablePart.SharedStringTable = new SharedStringTable();
                //shareStringTablePart.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(text)));
                shareStringTablePart.SharedStringTable.Save();
                */
                workbookpart.Workbook.Save();
                spreadsheetDocument.Close();
            }
            #endregion
            DateTime dTime = DateTime.Now;
            string cl = "";
            uint iRow = (uint)1;
            int index;
            Cell cell;

            using (SpreadsheetDocument document = SpreadsheetDocument.Open(pFileLocation, true))
            {
                IEnumerable<Sheet> sheets = document.WorkbookPart.Workbook.Descendants<Sheet>().Where(s => s.Name == pSheetName);
                if (sheets.Count() == 0)
                {
                    return -1;
                }

                WorksheetPart worksheetPart = (WorksheetPart)document.WorkbookPart.GetPartById(sheets.First().Id);
                Worksheet worksheet = worksheetPart.Worksheet;
                SheetData sheetData = worksheet.GetFirstChild<SheetData>();
                string cellReference;
                #region Heading
                Row row;
                if (sheetData.Elements<Row>().Where(r => r.RowIndex == iRow).Count() != 0)
                {
                    row = sheetData.Elements<Row>().Where(r => r.RowIndex == iRow).First();
                }
                else
                {
                    row = new Row() { RowIndex = iRow };
                    sheetData.Append(row);
                }

                cl = "A1";
                SharedStringTablePart shareStringPartHeading;
                if (document.WorkbookPart.GetPartsOfType<SharedStringTablePart>().Count() > 0)
                {
                    shareStringPartHeading = document.WorkbookPart.GetPartsOfType<SharedStringTablePart>().First();
                }
                else
                {
                    shareStringPartHeading = document.WorkbookPart.AddNewPart<SharedStringTablePart>();
                }
                if (shareStringPartHeading.SharedStringTable == null)
                {
                    shareStringPartHeading.SharedStringTable = new SharedStringTable();
                }
                index = shareStringPartHeading.SharedStringTable.Count();
                shareStringPartHeading.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(strNotes)));
                shareStringPartHeading.SharedStringTable.Save();


                cellReference = cl;

                Cell refCellHeading = null;

                cell = new Cell() { CellReference = cellReference };
                row.InsertBefore(cell, refCellHeading);
                //}
                cell.CellValue = new CellValue(index.ToString());
                cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);

                worksheet.Save();
                #endregion

                iRow++;
                if (sheetData.Elements<Row>().Where(r => r.RowIndex == iRow).Count() != 0)
                {
                    row = sheetData.Elements<Row>().Where(r => r.RowIndex == iRow).First();
                }
                else
                {
                    row = new Row() { RowIndex = iRow };
                    sheetData.Append(row);
                }

                string[] strArrHeadings = strLstHeadings.Split(',');
                for (int idx = 0; idx < strArrHeadings.Length; idx++)
                {
                    #region Get data
                    SharedStringTablePart shareStringPart;
                    if (document.WorkbookPart.GetPartsOfType<SharedStringTablePart>().Count() > 0)
                    {
                        shareStringPart = document.WorkbookPart.GetPartsOfType<SharedStringTablePart>().First();
                    }
                    else
                    {
                        shareStringPart = document.WorkbookPart.AddNewPart<SharedStringTablePart>();
                    }

                    if (idx >= 26)
                    {
                        cl = "A" + Convert.ToString(Convert.ToChar(65 + idx - 26));
                    }
                    else
                    {
                        cl = Convert.ToString(Convert.ToChar(65 + idx));
                    }

                    #endregion


                    // Insert the text into the SharedStringTablePart.

                    /*index = shareStringPart.SharedStringTable.Count();
                    shareStringPart.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(Convert.ToString(strArrHeadings[idx]))));
                    shareStringPart.SharedStringTable.Save();
                    */

                    cellReference = cl + iRow;

                    Cell refCell = null;

                    cell = new Cell() { CellReference = cellReference };
                    row.InsertBefore(cell, refCell);
                    //}
                    //cell.CellValue = new CellValue(index.ToString());
                    //cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);

                    cell.DataType = CellValues.InlineString;
                    cell.InlineString = new InlineString() { Text = new Text(strArrHeadings[idx]) };

                }
                worksheet.Save();
            }

            return (DateTime.Now - dTime).Seconds;

        }

        #region Ugly code from SDK
        private static int InsertSharedStringItem(string text, SharedStringTablePart shareStringPart)
        {

            // If the part does not contain a SharedStringTable, create one.
            if (shareStringPart.SharedStringTable == null)
            {
                shareStringPart.SharedStringTable = new SharedStringTable();
            }
            int i = 0;

            // Iterate through all the items in the SharedStringTable. If the text already exists, return its index.
            foreach (SharedStringItem item in shareStringPart.SharedStringTable.Elements<SharedStringItem>())
            {
                if (item.InnerText == text)
                {
                    return i;
                }
                i++;
            }

            // The text does not exist in the part. Create the SharedStringItem and return its index.
            shareStringPart.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(text)));
            shareStringPart.SharedStringTable.Save();
            return i;
        }
        private static Cell InsertCellInWorksheet(string columnName, uint rowIndex, WorksheetPart worksheetPart)
        {
            Worksheet worksheet = worksheetPart.Worksheet;
            SheetData sheetData = worksheet.GetFirstChild<SheetData>();
            string cellReference = columnName + rowIndex;

            // If the worksheet does not contain a row with the specified row index, insert one.
            Row row;
            if (sheetData.Elements<Row>().Where(r => r.RowIndex == rowIndex).Count() != 0)
            {
                row = sheetData.Elements<Row>().Where(r => r.RowIndex == rowIndex).First();
            }
            else
            {
                row = new Row() { RowIndex = rowIndex };
                sheetData.Append(row);
            }

            // If there is not a cell with the specified column name, insert one. 
            if (row.Elements<Cell>().Where(c => c.CellReference.Value == columnName + rowIndex).Count() > 0)
            {
                return row.Elements<Cell>().Where(c => c.CellReference.Value == cellReference).First();
            }
            else
            {

                // Cells must be in sequential order according to CellReference. Determine where to insert the new cell.
                Cell refCell = null;

                Cell newCell = new Cell() { CellReference = cellReference };
                row.InsertBefore(newCell, refCell);
                //worksheet.Save();
                return newCell;
            }
        }

        #endregion

        private int InsertIntoExcel(string pConn, string pFileLocation, string pSQL,   string pSheetName, int pRow)
        {
            DateTime dTime = DateTime.Now;
            if (srcConn.ConnectionString != pConn)
            {
                if (srcConn.State == ConnectionState.Open)
                {
                    srcConn.Close();
                }
            }

            if (srcConn.State != ConnectionState.Open)
            {
                srcConn.ConnectionString = pConn;
                srcConn.Open();
            }
            SqlCommand comm = new SqlCommand(pSQL);
            comm.Connection = srcConn;
            DataTable dt = new DataTable();
            dt.Load(comm.ExecuteReader());

            string cl = "";
            uint iRow = (uint)pRow;
            int index;
            Cell cell;

            using (SpreadsheetDocument document = SpreadsheetDocument.Open(pFileLocation, true))
            {
                IEnumerable<Sheet> sheets = document.WorkbookPart.Workbook.Descendants<Sheet>().Where(s => s.Name == pSheetName);
                if (sheets.Count() == 0)
                {
                    return -1;
                }

                WorksheetPart worksheetPart = (WorksheetPart)document.WorkbookPart.GetPartById(sheets.First().Id);
                Worksheet worksheet = worksheetPart.Worksheet;
                SheetData sheetData = worksheet.GetFirstChild<SheetData>();
                string cellReference;

                foreach (DataRow dr in dt.Rows)
                {

                    Row row;
                    if (sheetData.Elements<Row>().Where(r => r.RowIndex == iRow).Count() != 0)
                    {
                        row = sheetData.Elements<Row>().Where(r => r.RowIndex == iRow).First();
                    }
                    else
                    {
                        row = new Row() { RowIndex = iRow };
                        sheetData.Append(row);
                    }
                    for (int idx = 0; idx < dt.Columns.Count; idx++)
                    {
                        #region Get data
                        SharedStringTablePart shareStringPart;
                        if (document.WorkbookPart.GetPartsOfType<SharedStringTablePart>().Count() > 0)
                        {
                            shareStringPart = document.WorkbookPart.GetPartsOfType<SharedStringTablePart>().First();
                        }
                        else
                        {
                            shareStringPart = document.WorkbookPart.AddNewPart<SharedStringTablePart>();
                        }

                        if (idx >= 26)
                        {
                            cl = "A" + Convert.ToString(Convert.ToChar(65 + idx - 26));
                        }
                        else
                        {
                            cl = Convert.ToString(Convert.ToChar(65 + idx));
                        }

                        #endregion


                        // Insert the text into the SharedStringTablePart.

                        /*
                        index = InsertSharedStringItem(Convert.ToString(dr[idx]), shareStringPart);
                        */

                        index = shareStringPart.SharedStringTable.Count();
                        shareStringPart.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(Convert.ToString(dr[idx]))));
                        shareStringPart.SharedStringTable.Save();


                        cellReference = cl + iRow;
                        //cell = InsertCellInWorksheet(cl, iRow, worksheetPart);

                        // If there is not a cell with the specified column name, insert one. 
                        /*if (row.Elements<Cell>().Where(c => c.CellReference.Value == cl + iRow).Count() > 0)
                        {
                            cell = row.Elements<Cell>().Where(c => c.CellReference.Value == cellReference).First();
                        }
                        else
                        {
                        */
                        // Cells must be in sequential order according to CellReference. Determine where to insert the new cell.
                        Cell refCell = null;

                        cell = new Cell() { CellReference = cellReference };
                        row.InsertBefore(cell, refCell);
                        //}
                        cell.CellValue = new CellValue(index.ToString());
                        cell.DataType = new EnumValue<CellValues>(CellValues.SharedString);

                    }
                    iRow++;
                    if (iRow % 1000 == 0)
                    {
                        worksheet.Save();
                    }
                }
                worksheet.Save();
            }

            return (DateTime.Now - dTime).Seconds;

        }

	}
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_e50df588644e4330b542e2db20e8a598</msb:CodeName>
		<msb:DisplayName>ST_e50df588644e4330b542e2db20e8a598</msb:DisplayName>
		<msb:Language>msBuild</msb:Language>
		<msb:ProjectId>{D9117B41-6F9F-484E-9AD3-6E765B84924E}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_41b91de1a6eb484fa2af5a3f5990407e.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_e50df588644e4330b542e2db20e8a598")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_e50df588644e4330b542e2db20e8a598")]
[assembly: AssemblyCopyright("Copyright @  2014")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e50df588644e4330b542e2db20e8a598.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e50df588644e4330b542e2db20e8a598.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_e50df588644e4330b542e2db20e8a598.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_e50df588644e4330b542e2db20e8a598.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_e50df588644e4330b542e2db20e8a598.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_41b91de1a6eb484fa2af5a3f5990407e.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDANTs/VMAAAAAAAAAAOAAAiELAQsAADIAAAAIAAAAAAAAnlAA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFBQAABLAAAAAGAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAApDAAAAAgAAAAMgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAYAAAAAYAAAA0AAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAOgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACA
UAAAAAAAAEgAAAACAAUACC8AAEghAAABAAAAAAAAAFAuAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqABswCACcAQAAAgAAEQIoFgAAChZvFwAAChYKAigWAAAKbxgAAAoWcnMA
AHByoQAAcBqNAQAAAQwIFgIoFgAACm8ZAAAKcqgBAHBvGgAACm8bAAAKbxwAAAqiCBcCKBYAAApv
GQAACnLaAQBwbxoAAApvGwAACm8cAAAKoggYAigWAAAKbxkAAApyBgIAcG8aAAAKbxsAAApvHAAA
CqIIGQIoFgAACm8ZAAAKci4CAHBvGgAACm8bAAAKbxwAAAqiCCgdAAAKclYCAHAWEgBvHgAACgIC
KBYAAApvGQAACnKoAQBwbxoAAApvGwAACm8cAAAKAigWAAAKbxkAAApy2gEAcG8aAAAKbxsAAApv
HAAACgIoFgAACm8ZAAAKcgYCAHBvGgAACm8bAAAKbxwAAAoCKBYAAApvGQAACnIuAgBwbxoAAApv
GwAACm8cAAAKKAkAAAYLAigWAAAKbxgAAAoWcnMAAHByWAIAcAIoFgAACm8ZAAAKcqgBAHBvGgAA
Cm8bAAAKbxwAAAoHjCQAAAEoHwAACnJWAgBwFhIAbx4AAAreAybeACpBHAAAAAAAAAwAAACMAQAA
mAEAAAMAAAAlAAABHgIoDgAACipeA28gAAAKKCEAAAoCewkAAAQoIgAACipSA28jAAAKKCQAAAoC
ewgAAAT+ASpSA28jAAAKKCQAAAoCewgAAAT+ASpSA28jAAAKKCQAAAoCewgAAAT+ASpSA28jAAAK
KCQAAAoCewgAAAT+ASobMAQAvgQAAAMAABEUExwUEx0UEx4UEx8UEyBzDgAABhMhESEEfQkAAAQD
cyUAAAoKBm8mAAAKOsEAAAADFignAAAKCwdvKAAACgwIcykAAApvKgAACghvAQAAKw0JF40xAAAB
EyMRIxZzLAAACqIRI3MtAAAKby4AAAoHby8AAApvMAAACnMxAAAKbwIAACsTBHMzAAAKEwYRBgdv
LwAACglvNAAACig1AAAKbzYAAAoRBhcoNwAACm84AAAKEQYRIXsJAAAEKDUAAApvOQAAChEGEwUR
BBeNMQAAARMkESQWEQWiESRvOgAACghvMAAACm87AAAKB288AAAKKD0AAAoTB3JWAgBwEwgRIRd9
CAAABAMXKD4AAAoTCxELby8AAApvMAAACm8DAAArERwtDxEh/gYPAAAGc0AAAAoTHBEcKAQAACsT
DBEMKAUAACstCBUTIt1tAwAAEQtvLwAAChEMKAYAACtvRAAACighAAAKb0UAAAp0CgAAARMNEQ1v
RgAAChMOEQ5vBwAAKxMPEQ9vCAAAKxEdLQ8RIf4GEAAABnNJAAAKEx0RHSgJAAArKAoAACssKhEP
bwgAACsRHi0PESH+BhEAAAZzSQAAChMeER4oCQAAKygLAAArExErNXNKAAAKExIREhEhewgAAAQo
NwAACm9LAAAKERITEREPF40xAAABEyURJRYREaIRJW86AAAKcqICAHATCBELby8AAApvDAAAKygN
AAArFjEVEQtvLwAACm8MAAArKA4AACsTEysOEQtvLwAACm8PAAArExMRE29NAAAKLQwRE3NOAAAK
b08AAAoRE29NAAAKKBAAACsTCRETb00AAAoXjTEAAAETJhEmFgVzUAAACqIRJnNRAAAKbxEAACsm
ERNvTQAACm87AAAKEQgTEBQTFHNSAAAKExsRGxEQKDUAAApvUwAAChEbEwoREREKERRvEgAAKyYR
ChIJKFUAAApzVgAACm9XAAAKEQoZc1gAAApvWQAAChEObzsAAAoRISV7CAAABBdYfQgAAAQRD28I
AAArER8tDxEh/gYSAAAGc0kAAAoTHxEfKAkAACsoCgAAKywqEQ9vCAAAKxEgLQ8RIf4GEwAABnNJ
AAAKEyARICgJAAArKAsAACsTESs1c0oAAAoTFREVESF7CAAABCg3AAAKb0sAAAoRFRMREQ8XjTEA
AAETJxEnFhERohEnbzoAAAoOBBeNQwAAARMoESgWHyydEShvWgAAChMWFhMXON0AAAARC28vAAAK
bwwAACsoDQAAKxYxFBELby8AAApvDAAAKygOAAArJisNEQtvLwAACm8PAAArJhEXHxoyIHKoAgBw
H0ERF1gfGlkoWwAACihcAAAKKF0AAAoTCCsRH0ERF1goWwAACihcAAAKEwgRCBEhewgAAASMRQAA
ASheAAAKExAUExhzUgAAChMZERkRECg1AAAKb1MAAAoRGRMKERERChEYbxIAACsmEQobKF8AAApv
WQAAChEKc2AAAAoTGhEaERYRF5pzUAAACm9hAAAKERpvYgAAChEXF1gTFxEXERaOaT8Y////EQ5v
OwAACt4MEQssBxELb2MAAArcKD0AAAoRByhkAAAKEykSKShlAAAKKhEiKgAAQRwAAAIAAAAQAQAA
iQMAAJkEAAAMAAAAAAAAABswBACNAAAABAAAEQNvTQAACi0LA3NOAAAKb08AAAoWCgNvTQAACm8T
AAArb2YAAAoNKx0Jb2cAAAoLB29oAAAKAigiAAAKLAQGDN5KBhdYCglvaQAACi3b3goJLAYJb2MA
AArcA29NAAAKF40xAAABEwQRBBYCc1AAAAqiEQRzUQAACm8RAAArJgNvTQAACm87AAAKBioIKgAA
AAEQAAACACYAKU8ACgAAAAAeAigOAAAKKlIDbyMAAAooJAAACgJ7DAAABP4BKlIDbyMAAAooJAAA
CgJ7DAAABP4BKp4Db2oAAApvawAACgJ7CwAABAJ7DAAABIxFAAABKF4AAAooIgAACipeA29qAAAK
b2sAAAoCewoAAAQoIgAACioAABMwBAA1AQAABQAAERQTBxQTCHMUAAAGEwkRCQJ9CwAABBEJA30M
AAAEBG9GAAAKCgZvBwAAKwsRCREJewsAAAQRCXsMAAAEjEUAAAEoXgAACn0KAAAEB28IAAArEQn+
BhUAAAZzSQAACigJAAArKAoAACssKAdvCAAAKxEHLQ8RCf4GFgAABnNJAAAKEwcRBygJAAArKAsA
ACsMKy9zSgAACg0JEQl7DAAABCg3AAAKb0sAAAoJDAcXjTEAAAETChEKFgiiEQpvOgAACghvFAAA
KxEJ/gYXAAAGc2wAAAooFQAAKygWAAArFjEmCG8UAAArEQgtDxEJ/gYYAAAGc2wAAAoTCBEIKBUA
ACsoFwAAKyoUEwRzUgAAChMGEQYRCXsKAAAEKDUAAApvUwAAChEGEwUIEQURBG8SAAArJhEFKh4C
KA4AAAoqXgNvIAAACighAAAKAnsOAAAEKCIAAAoqUgNvIwAACigkAAAKAnsNAAAE/gEqUgNvIwAA
CigkAAAKAnsNAAAE/gEqABswBQByAwAABgAAERQTExQTFBQTFXMZAAAGExYRFg4EfQ4AAAQoPQAA
CgoCewQAAARvbQAACgMobgAACiwZAnsEAAAEb28AAAoXMwsCewQAAARvcAAACgJ7BAAABG9vAAAK
Fy4XAnsEAAAEA29xAAAKAnsEAAAEb3IAAAoFc3MAAAoLBwJ7BAAABG90AAAKc3UAAAoMCAdvdgAA
Cm93AAAKclYCAHANERYOBX0NAAAEBBcoPgAAChMGEQZvLwAACm8wAAAKbwMAACsREy0PERb+BhoA
AAZzQAAAChMTERMoBAAAKxMHEQcoBQAAKy0IFRMX3YQCAAARBm8vAAAKEQcoBgAAK29EAAAKKCEA
AApvRQAACnQKAAABEwgRCG9GAAAKEwkRCW8HAAArEwoIb3gAAApveQAAChMYOO8BAAARGG96AAAK
dFQAAAETDBEKbwgAACsRFC0PERb+BhsAAAZzSQAAChMUERQoCQAAKygKAAArLCoRCm8IAAArERUt
DxEW/gYcAAAGc0kAAAoTFREVKAkAACsoCwAAKxMNKzVzSgAAChMOEQ4RFnsNAAAEKDcAAApvSwAA
ChEOEw0RCheNMQAAARMZERkWEQ2iERlvOgAAChYTDzgbAQAAEQZvLwAACm8MAAArKA0AACsWMRUR
Bm8vAAAKbwwAACsoDgAAKxMQKw4RBm8vAAAKbw8AACsTEBEPHxoyH3KoAgBwH0ERD1gfGlkoWwAA
CihcAAAKKF0AAAoNKxAfQREPWChbAAAKKFwAAAoNERBvTQAACigQAAArEwQREG9NAAAKF40xAAAB
ExoRGhYRDBEPb3sAAAoofAAACnNQAAAKohEac1EAAApvEQAAKyYREG9NAAAKbzsAAAoJERZ7DQAA
BIxFAAABKF4AAAoTCxQTEXNSAAAKExIREhELKDUAAApvUwAAChESEwURDREFERFvEgAAKyYRBRIE
KFUAAApzVgAACm9XAAAKEQUZc1gAAApvWQAAChEPF1gTDxEPCG99AAAKb34AAAo/0/7//xEWJXsN
AAAEF1h9DQAABBEWew0AAAQg6AMAAF4tBxEJbzsAAAoRGG9pAAAKOgX+///eFREYdUgAAAETGxEb
LAcRG29jAAAK3BEJbzsAAAreDBEGLAcRBm9jAAAK3Cg9AAAKBihkAAAKExwSHChlAAAKKhEXKgAA
QTQAAAIAAAAuAQAAAgIAADADAAAVAAAAAAAAAAIAAACtAAAAoQIAAE4DAAAMAAAAAAAAAEoCc38A
AAp9BAAABAIogAAACioAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNl
UmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1Ymxp
Y0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3Vy
Y2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAA
AAUAbAAAADgKAAAjfgAApAoAANwOAAAjU3RyaW5ncwAAAACAGQAArAIAACNVUwAsHAAAEAAAACNH
VUlEAAAAPBwAAAwFAAAjQmxvYgAAAAAAAAACAAABVx2iCQkLAAAA+iUzABYAAAEAAABVAAAACAAA
AA4AAAAcAAAAGwAAAIAAAAACAAAAEgAAAAYAAAACAAAAAwAAAAQAAAAGAAAAAQAAAAcAAAABAAAA
BAAAABcAAAAAAAoAAQAAAAAABgDBALoACgDdAMgADgA9ARQBBgBZAboABgBvAV4BBgCgAYsBEgA8
AiYCFgCnAoYCFgD3AtQCFgD8AoYCBgDgA8YDBgALBPkDBgAiBPkDBgA/BPkDBgBeBPkDBgB3BPkD
BgCQBPkDBgCrBPkDBgDGBPkDBgDfBPkDBgAYBfgEBgA4BfgEBgCNBXoFBgCqBboABgCvBboABgDT
BfkDCgD/BekFCgAYBukFBgAtBvgEDgBPBhQBDgBxBhQBDgCaBhQBGgD4BtgGGgAQB9gGBgA1B7oA
BgBTB7oABgBZB7oAFgB8B9QCFgCgB9QCFgAgCG8CFgBNCG8CBgBwCGYIBgB5CGYIFgCTCIYCFgCn
CG8CFgDGCIYCFgDjCNQCFgD5CIYCFgAZCW8CFgAoCdQCFgAyCdQCFgBoCdQCFgB7CYYCFgC2CW8C
FgDSCYYCBgDnCboABgAYCv0JBgAyCroAHgBRCkUKFgDCCtQCFgAAC9QCFgAFC9QCFgAWC9QCFgA+
C9QCFgBWC28CFgBiC9QCBgB6C7oABgCFC7oABgCbC7oAFgCiC9QCFgCvC9QCBgDRC7oABgDlC7oA
BgAJDP0JBgBSDD8MEgB9DWoNEgCtDRoCEgDcDSYCEgD2DRoCEgAADiYCEgAcDhoCEgAtDhoCEgBI
DhoCEgBjDhoCEgBrDhoCAAAAAAEAAAAAAAEAAQAAABAAMgA8AAUAAQABAAABEABrADwACQADAAUA
AQAQAHQAfwANAAQACAADAQAAowAAABEABQAOAAMBEABjBwAABQAIAA4AAwEQAGcMAAAFAAoAFAAD
ARAAEQ0AAAUADQAZABEAfwETABEArAEXABEA9gE5AAEASgJHAAYGMAN1AFaAOAN4AFaAQAN4AAYA
dwf7AAYAXAP+AAYAewz+AAYAlAP+AAYAnwP7AAYAdwf7AAYAXAP+AFAgAAAAAIMYvAEbAAEAWCAA
AAAAkwjCAR8AAQCRIAAAAACTCNYBJAABAJggAAAAAJMI4gEpAAEAoCAAAAAAlggGAj0AAgCzIAAA
AACGGLwBGwACAKcgAAAAAJEYSAa3AAIAvCAAAAAAhgBSAhsAAgD0IgAAAACBAFcCSwACANwnAAAA
AJEAvQJcAAYA/CgAAAAAkQAKA2MACACIKgAAAACBACADbAALADwuAAAAAIYYvAEbABAAgCIAAAAA
hhi8ARsAEACIIgAAAACGAIIHAQEQAKAiAAAAAIYApAcIAREAtSIAAAAAhgDCBwgBEgDKIgAAAACG
AOAHCAETAN8iAAAAAIYA/gcIARQAiCgAAAAAhhi8ARsAFQCQKAAAAACGAIkMCAEVAKUoAAAAAIYA
pgwIARYAuigAAAAAhgDDDIEDFwDiKAAAAACGAOAMgQMYAD0qAAAAAIYYvAEbABkARSoAAAAAhgAl
DQEBGQBdKgAAAACGADwNCAEaAHIqAAAAAIYAUw0IARsAAAABAEgDAAABAE4DAAACAFwDAAADAGcD
AAAEAHADAAABAH8DAAACAIQDAAABAJQDAAACAJ8DAAADAKgDAAABALYDAAACAE4DAAADALwDAAAE
AFwDAAAFAMEDAAABABwIAAABAB4IAAABAB4IAAABAB4IAAABAB4IAAABAB4IAAABAB4IAAABAP0M
AAABAP0MAAABABwIAAABAB4IAAABAB4IWQC8AYYAYQC8AYYAaQC8AYYAcQC8AYYAeQC8AYYAgQC8
AYYAiQC8AYYAkQC8AYYAmQC8AYYAoQC8AYYAqQC8AYsAsQC8ARsAuQC8ARsACQC8ARsAwQDBBZAA
wQDcBZcAKQC8AZwA2QC8AagA6QC8ARsAEQC8ARsA8QC8ARsAGQCDBrsA+QCLBosA+QCuBsAA+QAC
B8YACQEZB8wAEQEiB9MACQAsB9cAGQE8B9sAAQFDB+IAGQE8B+0AMQEsCA8BQQE1CBUBGQFBCBwB
OQFZCCIBSQE1CCgBUQG8AYYAWQGICC8BYQG/CDMBYQHTCD0BeQG8ARsAcQHsCEMBgQEOCUoBkQG8
ARsAmQG8AVUBUQA8CV0BYQFKCT0BcQFbCWQBoQG8ARsAiQFvCWoBMQG8ARsAgQGHCXgBQQE1CH8B
MQGTCYYBSQE1CI0BMQGaCZQBMQGmCYYBiQGvCVUBsQHNCRsAuQHhCRsAwQHwCZsBYQH4CaEBiQEm
CqkBDAC8AcQB2QFcCsoB2QFiCuQB2QFoCvABMQFuCg8BgQF1Cv0BUQCBCgQCiQGPCkoBiQGdCqkB
FAC8AcQBOQG8ARsAOQGmCpQBgQGzCqkBQQDUCiUC4QG8ARsAQQDqCisC6QG8AYYA8QG8AVUBSQC8
ARsA+QEfC4YBiQExCz4CIQEsB9cAAQK8AYYA+QFIC04CHAC8AV4C+QFtC2QCGQF/C3ACIQKNC3cC
IQIsB3wCGQGUC4ECGQGUC4cCHAA1CI0CMQK8ARsAOQK3C5kC+QHAC6ACQQLdCxsAwQHuC6cCSQL9
C7MCJAAXDFUDLAAlDGgDiQExDNcAWQJeDC8B+QH/DA8BQQEiB9cANAC8AcQBYQKKDdcAGQGfDRwB
YQK9DbwDYQLhCRsAYQLHDYYAYQL4CRsAcQK8AYYAcQLnDcIDeQK8ARsAcQIODsgDeQIoDs4DeQI/
DtUDmQIXDNsDWQIlDNMAoQIZB+EDIQIsB+YDeQKADusDmQKMDrMCOQC8ARsAGQC8ARsACAAYAHwA
CAAcAIEAKQCTAK4ALgALAFQELgATAJwELgAbAMUELgBjAOsELgArAMUELgAzAJwELgBbAOIELgAj
AMUELgA7AMsELgBDAMUEQwBrAIEASQCTAK4AYQCbAIEAgwCrAIEAwwCbAIEA4wCbAIEAAwGbAIEA
owD0ALcCbQOQA/EDAgABAAMAAwAAAG8BLwAAAO4BNAAAABICQgACAAIAAwACAAMABQABAAQABQAC
AAUABwC6ARYCVQJMA18DhwMEgAAAAQAAAOgUqmYAAAAAAABWBQAABAAAAAAAAAAAAAAAAQCxAAAA
AAAEAAAAAAAAAAAAAAABALoAAAAAAAsAAAAAAAAAAAAAAAoA9QAAAAAABAAAAAAAAAAAAAAAAQAa
AgAAAAACAAUA/xUAAAAAAABTAG8CAAAAAAsAAAAAAAAAAAAAAAoAuQYAAAAABAAAAAAAAAAAAAAA
AQA5CgAAAAAAAAAAAQAAAJYOAAAFAAQABgAEAAcABAAIAAQAVwBQAWUAcgF/ALQBgwC0AYUAtAGH
ALQBjwAKApEAEAKDABAChQAQAocAEAKZACAChQAgAocAIAJXACAChQAyAmUAOAKpAEkCkQA4ApEA
SQKDAEkChQBJAocASQIAAAA8TW9kdWxlPgBTVF80MWI5MWRlMWE2ZWI0ODRmYTJhZjVhM2Y1OTkw
NDA3ZS5kbGwAUmVzb3VyY2VzAFNUX2U1MGRmNTg4NjQ0ZTQzMzBiNTQyZTJkYjIwZThhNTk4LlBy
b3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF9lNTBkZjU4ODY0NGU0MzMwYjU0MmUyZGIy
MGU4YTU5OABTY3JpcHRSZXN1bHRzAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZp
Z3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UATWljcm9zb2Z0LlNxbFNlcnZlci5TY3Jp
cHRUYXNrAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAVlNUQVJUU2Ny
aXB0T2JqZWN0TW9kZWxCYXNlAEVudW0AU3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIA
cmVzb3VyY2VNYW4AU3lzdGVtLkdsb2JhbGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0
dXJlAC5jdG9yAGdldF9SZXNvdXJjZU1hbmFnZXIAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3Vs
dHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1bHQARGVmYXVsdABTeXN0ZW0uRGF0YQBTeXN0
ZW0uRGF0YS5TcWxDbGllbnQAU3FsQ29ubmVjdGlvbgBzcmNDb25uAE1haW4ASW5zZXJ0VHdvTGlu
ZXNJbnRvRXhjZWwARG9jdW1lbnRGb3JtYXQuT3BlblhtbABEb2N1bWVudEZvcm1hdC5PcGVuWG1s
LlBhY2thZ2luZwBTaGFyZWRTdHJpbmdUYWJsZVBhcnQASW5zZXJ0U2hhcmVkU3RyaW5nSXRlbQBE
b2N1bWVudEZvcm1hdC5PcGVuWG1sLlNwcmVhZHNoZWV0AENlbGwAV29ya3NoZWV0UGFydABJbnNl
cnRDZWxsSW5Xb3Jrc2hlZXQASW5zZXJ0SW50b0V4Y2VsAHZhbHVlX18AU3VjY2VzcwBGYWlsdXJl
AHZhbHVlAHBGaWxlTG9jYXRpb24AcFNoZWV0TmFtZQBzdHJOb3RlcwBzdHJMc3RIZWFkaW5ncwB0
ZXh0AHNoYXJlU3RyaW5nUGFydABjb2x1bW5OYW1lAHJvd0luZGV4AHdvcmtzaGVldFBhcnQAcENv
bm4AcFNRTABwUm93AFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0
cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlE
ZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1i
bHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHly
aWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVB
dHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVy
U2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBTVF80MWI5MWRlMWE2ZWI0ODRmYTJhZjVhM2Y1OTkwNDA3ZQBTeXN0ZW0u
RGlhZ25vc3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBl
SGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29t
cG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRl
AENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTU0lTU2NyaXB0VGFza0VudHJ5UG9p
bnRBdHRyaWJ1dGUAU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBzZXRfVGFza1Jlc3VsdABFdmVu
dHNPYmplY3RXcmFwcGVyAGdldF9FdmVudHMATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRT
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAVmFyaWFibGVzAGdldF9WYXJpYWJsZXMA
VmFyaWFibGUAZ2V0X0l0ZW0AZ2V0X1ZhbHVlAFRvU3RyaW5nAFN0cmluZwBGb3JtYXQARmlyZUlu
Zm9ybWF0aW9uAEludDMyAEV4Y2VwdGlvbgA8PmNfX0Rpc3BsYXlDbGFzczEwAGlSb3cAU2hlZXQA
PEluc2VydFR3b0xpbmVzSW50b0V4Y2VsPmJfXzYAUm93ADxJbnNlcnRUd29MaW5lc0ludG9FeGNl
bD5iX183ADxJbnNlcnRUd29MaW5lc0ludG9FeGNlbD5iX184ADxJbnNlcnRUd29MaW5lc0ludG9F
eGNlbD5iX185ADxJbnNlcnRUd29MaW5lc0ludG9FeGNlbD5iX19hAHMAcgBTdHJpbmdWYWx1ZQBn
ZXRfTmFtZQBvcF9JbXBsaWNpdABvcF9FcXVhbGl0eQBVSW50MzJWYWx1ZQBnZXRfUm93SW5kZXgA
U3lzdGVtLklPAEZpbGVJbmZvAEZpbGVTeXN0ZW1JbmZvAGdldF9FeGlzdHMAU3ByZWFkc2hlZXRE
b2N1bWVudABTcHJlYWRzaGVldERvY3VtZW50VHlwZQBDcmVhdGUAV29ya2Jvb2tQYXJ0AEFkZFdv
cmtib29rUGFydABXb3JrYm9vawBzZXRfV29ya2Jvb2sAT3BlblhtbFBhcnRDb250YWluZXIAQWRk
TmV3UGFydABPcGVuWG1sRWxlbWVudABTaGVldERhdGEAV29ya3NoZWV0AHNldF9Xb3Jrc2hlZXQA
Z2V0X1dvcmtib29rUGFydABnZXRfV29ya2Jvb2sAU2hlZXRzAEFwcGVuZENoaWxkAE9wZW5YbWxQ
YXJ0AEdldElkT2ZQYXJ0AHNldF9JZABzZXRfU2hlZXRJZABzZXRfTmFtZQBBcHBlbmQAT3Blblht
bFBhcnRSb290RWxlbWVudABTYXZlAE9wZW5YbWxQYWNrYWdlAENsb3NlAERhdGVUaW1lAGdldF9O
b3cAT3BlbgBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBJRW51bWVyYWJsZWAxAERlc2NlbmRh
bnRzAEZ1bmNgMgBTeXN0ZW0uQ29yZQBTeXN0ZW0uTGlucQBFbnVtZXJhYmxlAFdoZXJlAENvdW50
AEZpcnN0AGdldF9JZABHZXRQYXJ0QnlJZABnZXRfV29ya3NoZWV0AEdldEZpcnN0Q2hpbGQARWxl
bWVudHMAc2V0X1Jvd0luZGV4AEdldFBhcnRzT2ZUeXBlAFNoYXJlZFN0cmluZ1RhYmxlAGdldF9T
aGFyZWRTdHJpbmdUYWJsZQBzZXRfU2hhcmVkU3RyaW5nVGFibGUAVGV4dABTaGFyZWRTdHJpbmdJ
dGVtAENlbGxUeXBlAHNldF9DZWxsUmVmZXJlbmNlAEluc2VydEJlZm9yZQBDZWxsVmFsdWUAc2V0
X0NlbGxWYWx1ZQBFbnVtVmFsdWVgMQBDZWxsVmFsdWVzAHNldF9EYXRhVHlwZQBDaGFyAFNwbGl0
AENvbnZlcnQAVG9DaGFyAENvbmNhdABVSW50MzIASW5saW5lU3RyaW5nAFJzdFR5cGUAc2V0X1Rl
eHQAc2V0X0lubGluZVN0cmluZwBJRGlzcG9zYWJsZQBEaXNwb3NlAFRpbWVTcGFuAG9wX1N1YnRy
YWN0aW9uAGdldF9TZWNvbmRzAElFbnVtZXJhdG9yYDEAR2V0RW51bWVyYXRvcgBnZXRfQ3VycmVu
dABnZXRfSW5uZXJUZXh0AFN5c3RlbS5Db2xsZWN0aW9ucwBJRW51bWVyYXRvcgBNb3ZlTmV4dAA8
PmNfX0Rpc3BsYXlDbGFzczFhAGNlbGxSZWZlcmVuY2UAPEluc2VydENlbGxJbldvcmtzaGVldD5i
X18xNAA8SW5zZXJ0Q2VsbEluV29ya3NoZWV0PmJfXzE1ADxJbnNlcnRDZWxsSW5Xb3Jrc2hlZXQ+
Yl9fMTYAPEluc2VydENlbGxJbldvcmtzaGVldD5iX18xNwBjAGdldF9DZWxsUmVmZXJlbmNlADw+
Y19fRGlzcGxheUNsYXNzMjQAPEluc2VydEludG9FeGNlbD5iX18xZQA8SW5zZXJ0SW50b0V4Y2Vs
PmJfXzFmADxJbnNlcnRJbnRvRXhjZWw+Yl9fMjAAU3lzdGVtLkRhdGEuQ29tbW9uAERiQ29ubmVj
dGlvbgBnZXRfQ29ubmVjdGlvblN0cmluZwBvcF9JbmVxdWFsaXR5AENvbm5lY3Rpb25TdGF0ZQBn
ZXRfU3RhdGUAc2V0X0Nvbm5lY3Rpb25TdHJpbmcAU3FsQ29tbWFuZABzZXRfQ29ubmVjdGlvbgBE
YXRhVGFibGUAU3FsRGF0YVJlYWRlcgBFeGVjdXRlUmVhZGVyAElEYXRhUmVhZGVyAExvYWQARGF0
YVJvd0NvbGxlY3Rpb24AZ2V0X1Jvd3MASW50ZXJuYWxEYXRhQ29sbGVjdGlvbkJhc2UARGF0YVJv
dwBEYXRhQ29sdW1uQ29sbGVjdGlvbgBnZXRfQ29sdW1ucwBnZXRfQ291bnQAU1RfZTUwZGY1ODg2
NDRlNDMzMGI1NDJlMmRiMjBlOGE1OTguUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAAAA
AABxUwBUAF8AZQA1ADAAZABmADUAOAA4ADYANAA0AGUANAAzADMAMABiADUANAAyAGUAMgBkAGIA
MgAwAGUAOABhADUAOQA4AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBz
AAAtTwBPAFgATQBMACAARQB4AGMAZQBsACAARwBlAG4AZQByAGEAdABpAG8AbgAAgQVGAGkAcgBl
AGQAIAB3AGkAdABoACAAdgBhAGwAdQBlAHMALgAgAEYAaQBsAGUAOgAgAHsAMAB9ACAADQAKACAA
IAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAUwBoAGUAZQB0AE4AYQBtAGUAOgAg
AHsAMQB9AA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgAEgAZQBhAGQA
aQBuAGcAOgAgAHsAMgB9AA0ACgAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAg
AEMAbwBsAHUAbQBuAHMAOgAgAHsAMwB9AAAxVQBzAGUAcgA6ADoAcwB0AHIAUwBDAFIARgBpAGwA
ZQBMAG8AYwBhAHQAaQBvAG4AACtVAHMAZQByADoAOgBzAHQAcgBTAEMAUgBTAGgAZQBlAHQATgBh
AG0AZQAAJ1UAcwBlAHIAOgA6AHMAdAByAFMAQwBSAEgAZQBhAGQAaQBuAGcAACdVAHMAZQByADoA
OgBzAHQAcgBTAEMAUgBDAG8AbAB1AG0AbgBzAAABAEkgAEYAaQBsAGUAIAA6ACAAewAwAH0AIABj
AG8AbQBwAGwAZQB0AGUAZAAgAGkAbgAgAHsAMQB9ACAAcwBlAGMAbwBuAGQAcwAABUEAMQAAA0EA
AKWyWFuSXMJDteS/C/c60DYACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUEAAAS
GQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAMGEh0HIAQIDg4ODggxvzhWrTZONQYAAggO
EiEIAAMSJQ4JEikIIAUIDg4ODggCBggDBhEUBAAAAAAEAQAAAAQgAQEOBCABAQgGAAESYRFlBCAA
EmkGIAIBDhJpBAcBEhUFIAEBEXEIAQACAAAAAAADAAABBCAAEn0FIAASgIEFIAASgIUGIAESgIkc
AyAAHAMgAA4GAAIODh0cCiAGAQgODg4IEAIGAAMODhwcBgcDAggdHAIGCQIGDgYgAQISgJkGIAEC
EoCdBSAAEoChBgABDhKAoQUAAgIODgUgABKApQYAAQkSgKUDIAACCQACEoCxDhGAtQUgABKAuQYg
AQESgL0FMAEAHgAECgESKQcgAQEdEoDFBiABARKAzQUgABKAvQcwAQEeAB4ABQoBEoDRBiABDhKA
1QYAARKAoQ4GIAEBEoChBgABEoClCQYgAQESgKUFAAARgOEHAAISgLEOAgowAQAVEoDlAR4ABQoB
EoCZCRUSgOkCEoCZAgUgAgEcGBkQAQIVEoDlAR4AFRKA5QEeABUSgOkCHgACCxABAQgVEoDlAR4A
DBABAR4AFRKA5QEeAAYgARKA1Q4FIAASgM0FCgESgMkFCgESgJ0JFRKA6QISgJ0CBAoBEiEFIAAS
gPEGIAEBEoDxBQoBEoDFBQoBEoD5CjABAh4AHgASgMUECgESJQYgAQESgQEIFRKBBQERgQkFIAEB
EwALIAEBFRKBBQERgQkGIAEdDh0DBAABAwgEAAEOAwUAAg4ODgUAAg4cHAsAARUSgQUBEwATAAYg
AQESgPUGIAEBEoEZCwACEYElEYDhEYDhAyAACICTByoSgKkSgLESgLkSKRKA0RKAmRKAmRGA4Q4I
EiUSgLEVEoDlARKAmRIpEoDNEoDJDhKAnRKAnRIhEiUSgJ0dDggSJRIlEoEZEiUVEoDpAhKAmQIV
EoDpAhKAnQIVEoDpAhKAnQIVEoDpAhKAnQIVEoDpAhKAnQISGAgdEoDFHRKAxR0SgMUdEoDFHRKA
xR0DEYElCBUSgOUBEoD5CSAAFRKBKQETAAgVEoEpARKA+QQgABMAEwcFCBKA+QgVEoEpARKA+R0S
gMUFIAECEiUIFRKA6QISJQIrBwsSgM0SgMkSgJ0SgJ0SJRIlEiUVEoDpAhKAnQIVEoDpAhIlAhIc
HRKAxQUgABGBNQUgAQESHQUgABKBQQYgAQESgUUFIAASgUkFIAASgS0EIAEcCAQAAQ4cBSAAEoFV
YgcdEYDhEoE5EoE9DggSJRKAsRUSgOUBEoCZEikSgM0SgMkOEoFREoCdEoCdCBIhEiUSJRUSgOkC
EoCZAhUSgOkCEoCdAhUSgOkCEoCdAhIgCBKBLR0SgMUdEoDFEoEhEYElRwEAGi5ORVRGcmFtZXdv
cmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0
KAEAI1NUX2U1MGRmNTg4NjQ0ZTQzMzBiNTQyZTJkYjIwZThhNTk4AAAFAQAAAAAWAQARQ29weXJp
Z2h0IEAgIDIwMTQAAAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93cwEAAHhQ
AAAAAAAAAAAAAI5QAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAUAAAAAAAAAAAX0NvckRsbE1h
aW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAA
AAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAACwAwAAAAAA
AAAAAACwAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA
qmboFAAAAQCqZugUPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBs
AGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEEAMAAAEA
UwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAwADQAYgAwAAAAcAAk
AAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAVABfAGUANQAwAGQAZgA1ADgA
OAA2ADQANABlADQAMwAzADAAYgA1ADQAMgBlADIAZABiADIAMABlADgAYQA1ADkAOAAAAEAADwAB
AEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA1ADMANQAyAC4AMgA2ADIAOAAyAAAA
AABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABfADQAMQBiADkAMQBkAGUAMQBh
ADYAZQBiADQAOAA0AGYAYQAyAGEAZgA1AGEAMwBmADUAOQA5ADAANAAwADcAZQAuAGQAbABsAAAA
SAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABA
ACAAIAAyADAAMQA0AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMA
VABfADQAMQBiADkAMQBkAGUAMQBhADYAZQBiADQAOAA0AGYAYQAyAGEAZgA1AGEAMwBmADUAOQA5
ADAANAAwADcAZQAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQA
XwBlADUAMABkAGYANQA4ADgANgA0ADQAZQA0ADMAMwAwAGIANQA0ADIAZQAyAGQAYgAyADAAZQA4
AGEANQA5ADgAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADUA
MwA1ADIALgAyADYAMgA4ADIAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBv
AG4AAAAxAC4AMAAuADUAMwA1ADIALgAyADYAMgA4ADIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAoDAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\SEQ_1\FELC_Table list\SQL_Check for staging table"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{30ABC1C6-073B-4855-8FAD-FCB793CB92AF}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="SQL_Check for staging table"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{15E93C59-B687-4A64-9A3B-8D372DF396D4}"
                  SQLTask:SqlStmtSourceType="Variable"
                  SQLTask:SqlStatementSource="User::strSQLCheckStagingTable"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="HasStaging"
                    SQLTask:DtsVariableName="User::bitHasStagingTable" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\SEQ_1\FELC_Table list\SQL_Get Columns"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{C1F33F88-6589-41DE-AE70-872A1F1C96EB}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="SQL_Get Columns"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{15E93C59-B687-4A64-9A3B-8D372DF396D4}"
                  SQLTask:SqlStmtSourceType="Variable"
                  SQLTask:SqlStatementSource="User::strSQLCreateTable"
                  SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="CreateTable"
                    SQLTask:DtsVariableName="User::strCreateTable" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="ExcelColumns"
                    SQLTask:DtsVariableName="User::strExcelColumns" />
                  <SQLTask:ResultBinding
                    SQLTask:ResultName="SelectStatement"
                    SQLTask:DtsVariableName="User::strSelect" />
                </SQLTask:SqlTaskData>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\SEQ_1\FELC_Table list.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{D28BFD16-4875-4A84-8E2D-0ACF7F3AEB46}"
              DTS:EvalOp="1"
              DTS:Expression="@[User::bitHasStagingTable]"
              DTS:From="Package\SEQ_1\FELC_Table list\SQL_Check for staging table"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\SEQ_1\FELC_Table list\SQL_Get Columns" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\SEQ_1\FELC_Table list.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{1A1D6210-923C-4DA7-9C58-3AF73D4427AE}"
              DTS:From="Package\SEQ_1\FELC_Table list\SQL_Get Columns"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\SEQ_1\FELC_Table list\SCR_InsertDataIntoExcel" />
          </DTS:PrecedenceConstraints>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{EF32D837-B949-40B7-B32A-BA39CF4565F0}"
              DTS:ObjectName="{4D2CAF33-C364-40FE-9F19-C445C87B1AE7}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::strTableName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{454C2CD9-A24F-4D18-A6D5-D47AB7C8CD8C}"
              DTS:ObjectName="{2E3C3B09-EB60-44FC-988C-449A9582C04E}"
              DTS:ValueIndex="1"
              DTS:VariableName="User::strStagingTableName" />
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{CC549BE7-459B-4A0C-8BFC-D86197ACCDC3}"
              DTS:ObjectName="{697C648B-6544-4D88-8042-8A1ECEEF3FDA}"
              DTS:ValueIndex="2"
              DTS:VariableName="User::strExcelTableName" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\SEQ_1\SQL_Get table list"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{88CFD12C-F3D9-453E-9185-9EF71DF68FD6}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="SQL_Get table list"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{B8F7D022-C655-45D3-94E2-57C05FE0D111}"
              SQLTask:SqlStatementSource="SELECT '[' + tables.TABLE_SCHEMA + '].[' + tables.TABLE_NAME + ']'    AS TableName&#xA;     , '[' + tables.TABLE_NAME + ']'                           AS StagingTableName&#xA;     , tables.TABLE_NAME                                       AS ExcelTableName&#xA;FROM INFORMATION_SCHEMA.TABLES&#xA;&#xA;&#xA;WHERE tables.TABLE_TYPE = 'BASE TABLE'&#xA;  AND tables.TABLE_NAME NOT IN ('__RefactorLog','sysdiagrams')&#xA;&#xA;&#xA;&#xA;ORDER BY tables.TABLE_SCHEMA&#xA;       , tables.TABLE_NAME"
              SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="0"
                SQLTask:DtsVariableName="User::objTableList" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\SEQ_1.PrecedenceConstraints[Constraint 4]"
          DTS:CreationName=""
          DTS:DTSID="{DFE41721-8360-4CFF-9E68-C71D2F8B6CBE}"
          DTS:From="Package\SEQ_1\SQL_Get table list"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 4"
          DTS:To="Package\SEQ_1\FELC_Table list" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="196.8,41.6"
          Id="Package\SEQ_1\FELC_Table list\SCR_InsertDataIntoExcel"
          TopLeft="159.571425447658,356.552941142151" />
        <NodeLayout
          Size="212,41.6"
          Id="Package\SEQ_1\FELC_Table list\SQL_Check for staging table"
          TopLeft="66.7,5.49999999999995" />
        <NodeLayout
          Size="163.2,41.6"
          Id="Package\SEQ_1\FELC_Table list\SQL_Get Columns"
          TopLeft="5.50000000000003,208.7" />
        <EdgeLayout
          Id="Package\SEQ_1\FELC_Table list.PrecedenceConstraints[Constraint]"
          TopLeft="172.7,47.1">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-85.6,161.6"
              Start="0,0"
              End="-85.6,154.1">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,76.8" />
                  <mssgle:CubicBezierSegment
                    Point1="0,76.8"
                    Point2="0,80.8"
                    Point3="-4,80.8" />
                  <mssgle:LineSegment
                    End="-81.6,80.8" />
                  <mssgle:CubicBezierSegment
                    Point1="-81.6,80.8"
                    Point2="-85.6,80.8"
                    Point3="-85.6,84.8" />
                  <mssgle:LineSegment
                    End="-85.6,154.1" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-50.8,85.8,16,16"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\SEQ_1\FELC_Table list.PrecedenceConstraints[Constraint 1]"
          TopLeft="87.1,250.3">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="170.871425447658,106.252941142151"
              Start="0,0"
              End="170.871425447658,98.7529411421515">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,49.1264705710757" />
                  <mssgle:CubicBezierSegment
                    Point1="0,49.1264705710757"
                    Point2="0,53.1264705710757"
                    Point3="4,53.1264705710757" />
                  <mssgle:LineSegment
                    End="166.871425447658,53.1264705710757" />
                  <mssgle:CubicBezierSegment
                    Point1="166.871425447658,53.1264705710757"
                    Point2="170.871425447658,53.1264705710757"
                    Point3="170.871425447658,57.1264705710757" />
                  <mssgle:LineSegment
                    End="170.871425447658,98.7529411421515" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="572,814.4"
          Size="572,857.6"
          Id="Package\SEQ_1\FELC_Table list"
          TopLeft="98.3333333333334,124.933333333333" />
        <NodeLayout
          Size="163.2,41.6"
          Id="Package\SEQ_1\SQL_Get table list"
          TopLeft="189.533333333333,23.3333333333333" />
        <EdgeLayout
          Id="Package\SEQ_1.PrecedenceConstraints[Constraint 4]"
          TopLeft="271.133333333333,64.9333333333333">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="113.2,59.9999999999997"
              Start="0,0"
              End="113.2,52.4999999999997">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.9999999999999" />
                  <mssgle:CubicBezierSegment
                    Point1="0,25.9999999999999"
                    Point2="0,29.9999999999999"
                    Point3="4,29.9999999999999" />
                  <mssgle:LineSegment
                    End="109.2,29.9999999999999" />
                  <mssgle:CubicBezierSegment
                    Point1="109.2,29.9999999999999"
                    Point2="113.2,29.9999999999999"
                    Point3="113.2,33.9999999999999" />
                  <mssgle:LineSegment
                    End="113.2,52.4999999999997" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="751.2,1036.8"
          Size="751.2,1080"
          Id="Package\SEQ_1"
          TopLeft="35,6.66666666666674" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>