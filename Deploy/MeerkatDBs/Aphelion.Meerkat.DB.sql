/*
Deployment script for Meerkat

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Meerkat"
:setvar DefaultFilePrefix "Meerkat"
:setvar DefaultDataPath "C:\SQLData\SQL2012\"
:setvar DefaultLogPath "C:\SQLLogs\SQL2012\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping FK_Indicator_IndicatorType...';


GO
ALTER TABLE [app].[Indicator] DROP CONSTRAINT [FK_Indicator_IndicatorType];


GO
PRINT N'Dropping CK_Indicator...';


GO
ALTER TABLE [app].[Indicator] DROP CONSTRAINT [CK_Indicator];


GO
PRINT N'Altering [app].[Indicator]...';


GO
ALTER TABLE [app].[Indicator] ALTER COLUMN [IndicatorType_ID] INT NULL;


GO
PRINT N'Altering [Core].[LocationType]...';


GO
ALTER TABLE [Core].[LocationType]
    ADD [LocationTypeOrder] INT CONSTRAINT [DF_LocationType_LocationTypeOrder] DEFAULT ((0)) NOT NULL;


GO
PRINT N'Altering [RBM].[PeopleReachedValues]...';


GO
ALTER TABLE [RBM].[PeopleReachedValues]
    ADD [ParticipationType_ID] INT NULL;


GO
PRINT N'Creating FK_Indicator_IndicatorType...';


GO
ALTER TABLE [app].[Indicator] WITH NOCHECK
    ADD CONSTRAINT [FK_Indicator_IndicatorType] FOREIGN KEY ([IndicatorType_ID]) REFERENCES [app].[IndicatorType] ([IndicatorType_ID]);


GO
PRINT N'Creating FK_PeopleReachedValues_PersonParticipationType...';


GO
ALTER TABLE [RBM].[PeopleReachedValues] WITH NOCHECK
    ADD CONSTRAINT [FK_PeopleReachedValues_PersonParticipationType] FOREIGN KEY ([ParticipationType_ID]) REFERENCES [Core].[PersonParticipationType] ([PersonParticipationType_ID]);


GO
PRINT N'Refreshing [dbo].[DimIndicatorMultiLevel]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[DimIndicatorMultiLevel]';


GO
PRINT N'Refreshing [forms].[vw_ResponsesByIndicator]...';


GO
EXECUTE sp_refreshsqlmodule N'[forms].[vw_ResponsesByIndicator]';


GO
PRINT N'Refreshing [OLAP_GEN].[FrameworkDetail_Indicator]...';


GO
EXECUTE sp_refreshsqlmodule N'[OLAP_GEN].[FrameworkDetail_Indicator]';


GO
PRINT N'Refreshing [OLAP_GEN].[Indicator]...';


GO
EXECUTE sp_refreshsqlmodule N'[OLAP_GEN].[Indicator]';


GO
PRINT N'Refreshing [OLAP_GEN].[IndicatorByProgram]...';


GO
EXECUTE sp_refreshsqlmodule N'[OLAP_GEN].[IndicatorByProgram]';


GO
PRINT N'Refreshing [OLAP_GEN].[IndicatorByProjectSector]...';


GO
EXECUTE sp_refreshsqlmodule N'[OLAP_GEN].[IndicatorByProjectSector]';


GO
PRINT N'Refreshing [OLAP_GEN].[StatusValues]...';


GO
EXECUTE sp_refreshsqlmodule N'[OLAP_GEN].[StatusValues]';


GO
PRINT N'Refreshing [rpt].[FormResponsesByProject]...';


GO
EXECUTE sp_refreshsqlmodule N'[rpt].[FormResponsesByProject]';


GO
PRINT N'Refreshing [rpt].[vwFormResponsesCount]...';


GO
EXECUTE sp_refreshsqlmodule N'[rpt].[vwFormResponsesCount]';


GO
PRINT N'Refreshing [OLAP_GEN].[Location]...';


GO
EXECUTE sp_refreshsqlmodule N'[OLAP_GEN].[Location]';


GO
PRINT N'Refreshing [OLAP_GEN].[Structure]...';


GO
EXECUTE sp_refreshsqlmodule N'[OLAP_GEN].[Structure]';


GO
PRINT N'Refreshing [rpt].[vwPeopleReached]...';


GO
EXECUTE sp_refreshsqlmodule N'[rpt].[vwPeopleReached]';


GO
PRINT N'Refreshing [OLAP_GEN].[PeopleReachedValues]...';


GO
EXECUTE sp_refreshsqlmodule N'[OLAP_GEN].[PeopleReachedValues]';


GO
PRINT N'Refreshing [dbo].[uspIndicatorTimeline_ByDisagg]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[uspIndicatorTimeline_ByDisagg]';


GO
PRINT N'Refreshing [dbo].[uspIndicatorTimeline]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[uspIndicatorTimeline]';


GO
PRINT N'Refreshing [dbo].[uspIndicatorTimelineWithLocation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[uspIndicatorTimelineWithLocation]';


GO
PRINT N'Refreshing [Core].[sp_IndicatorCaptureProgress]...';


GO
EXECUTE sp_refreshsqlmodule N'[Core].[sp_IndicatorCaptureProgress]';


GO
PRINT N'Refreshing [dbo].[rptIndicatorStatusValues]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[rptIndicatorStatusValues]';


GO
PRINT N'Refreshing [dbo].[uspIndicatorsList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[uspIndicatorsList]';


GO

/*GeoSpatialData*/

IF ( EXISTS ( SELECT    [master].[dbo].[sysdatabases].[name]
              FROM      master.dbo.sysdatabases
              WHERE     ( '[' + [master].[dbo].[sysdatabases].[name] + ']' = 'SpatialProvince'
                          OR [master].[dbo].[sysdatabases].[name] = 'SpatialProvince'
                        ) ) ) 
    BEGIN
        INSERT  INTO Meerkat.Core.DimMunicipalityGEOM
                ( [Meerkat].[Core].[DimMunicipalityGEOM].[ID] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[LBL] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[FIP] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[MMT_ID] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[SHORT__FRM] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[LONG_FRM] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM0] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM1] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM2] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM3] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM4] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[ADM5] ,
                  [Meerkat].[Core].[DimMunicipalityGEOM].[geom]
                )
                SELECT  [SpatialProvince].[dbo].[SimpleProvince].[Location_ID] AS [ID] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[ISO] AS [LBL] ,
                        '' AS [FIP] ,
                        '' [MMT_ID] ,
                        '' [SHORT__FRM] ,
                        '' [LONG_FRM] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[ADM0] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[ADM1] ,
                        '' [ADM2] ,
                        '' [ADM3] ,
                        '' [ADM4] ,
                        '' [ADM5] ,
                        [SpatialProvince].[dbo].[SimpleProvince].[Geog] AS [geom]
                FROM    [SpatialProvince].dbo.[SimpleProvince] 
    END

/*ALTER TABLE app.SubOutput ADD CONSTRAINT
    DF_SubOutput_Active DEFAULT 1 FOR Active
GO*/


/* Insert Data */

/*Insert Core data*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT  [Core].[ActiveType]
        ( [Core].[ActiveType].[ID] ,
          [Core].[ActiveType].[Code] ,
          [Core].[ActiveType].[Name]
        )
        SELECT  -1 ,
                N'Deleted' ,
                N'Deleted'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ActiveType
                             WHERE  [Core].[ActiveType].[ID] = -1 )
GO

INSERT  [Core].[ActiveType]
        ( [Core].[ActiveType].[ID] ,
          [Core].[ActiveType].[Code] ,
          [Core].[ActiveType].[Name]
        )
        SELECT  0 ,
                N'InActive' ,
                N'InActive'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ActiveType
                             WHERE  [Core].[ActiveType].[ID] = 0 )
GO
INSERT  [Core].[ActiveType]
        ( [Core].[ActiveType].[ID] ,
          [Core].[ActiveType].[Code] ,
          [Core].[ActiveType].[Name]
        )
        SELECT  1 ,
                N'Active' ,
                N'Active'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ActiveType
                             WHERE  [Core].[ActiveType].[ID] = 1 )
GO

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT  INTO [Core].StatusType
        ( [Core].[StatusType].[ID] ,
          [Core].[StatusType].[Code] ,
          [Core].[StatusType].[Name] ,
          [Core].[StatusType].[Value],
          [Core].[StatusType].[Active],
		  [Core].[StatusType].[BusinessKey]
        )
        SELECT  0 ,
                '+' ,
                'On Target' ,
                1,
                1,
				'+'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.StatusType
                             WHERE  [Core].[StatusType].[Code] = '+' )
        UNION ALL
        SELECT  1 ,
                '=' ,
                'Acceptable' ,
                0,
                1,
				'='
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.StatusType
                             WHERE  [Core].[StatusType].[Code] = '=' )
        UNION ALL
        SELECT  2 ,
                '-' ,
                'Sub par' ,
                -1,
                1,
				'-'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.StatusType
                             WHERE  [Core].[StatusType].[Code] = '-' )

GO


/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT Core.DataVersion ON 
INSERT  INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description],
		  [Core].[DataVersion].[BusinessKey]
        )
        SELECT  1 ,
                '0' ,
                0 ,
                'External' ,
                0 ,
                '',
				'0'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 0 )

INSERT  INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description],
		  [Core].[DataVersion].[BusinessKey]
        )
        SELECT  1 ,
                '1' ,
                1 ,
                'Publish' ,
                1 ,
                '',
				'1'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 1 )

INSERT  INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description],
		  [Core].[DataVersion].[BusinessKey]
        )
        SELECT  1 ,
                '2' ,
                2 ,
                'Final Draft' ,
                2 ,
                '',
				'2'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 3 )

INSERT  INTO Core.DataVersion
        ( [Core].[DataVersion].[Active] ,
          [Core].[DataVersion].[Code] ,
          [Core].[DataVersion].[DataVersion_ID] ,
          [Core].[DataVersion].[Name] ,
          [Core].[DataVersion].[Order] ,
          [Core].[DataVersion].[Description],
		  [Core].[DataVersion].[BusinessKey]
        )
        SELECT  1 ,
                '3' ,
                3 ,
                'First Draft' ,
                3 ,
                '',
				'3'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.DataVersion
                             WHERE  [Core].[DataVersion].[DataVersion_ID] = 4 )


SET IDENTITY_INSERT  Core.DataVersion OFF
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET NOCOUNT ON;
IF ( SELECT COUNT(1)
     FROM   Core.DimDate
   ) = 0 
    BEGIN
--Alter start

        DECLARE @StartDate DATETIME ,
            @EndDate DATETIME ,
            @Date DATETIME;

        SET @StartDate = '1990/01/01';
        SET @EndDate = '2025/12/31';
        SET @Date = @StartDate;

        WHILE @Date <= @EndDate 
            BEGIN

                DECLARE @IsLeapYear BIT
                IF ( ( YEAR(@Date) % 4 = 0 )
                     AND ( YEAR(@Date) % 100 != 0
                           OR YEAR(@Date) % 400 = 0
                         )
                   ) 
                    BEGIN

                        SELECT  @IsLeapYear = 1;

                    END
                ELSE 
                    BEGIN

                        SELECT  @IsLeapYear = 0;

                    END

                DECLARE @IsWeekend BIT
                IF ( DATEPART(dw, @Date) = 1
                     OR DATEPART(dw, @Date) = 7
                   ) 
                    BEGIN

                        SELECT  @IsWeekend = 1;

                    END
                ELSE 
                    BEGIN

                        SELECT  @IsWeekend = 0;

                    END

                INSERT  INTO Core.DimDate
                        ( [Core].[DimDate].[DateID] ,
                          [Core].[DimDate].[Date] ,
                          [Core].[DimDate].[Day] ,
                          [Core].[DimDate].[DaySuffix] ,
                          [Core].[DimDate].[USDayOfWeek] ,
                          [Core].[DimDate].[DayOfWeek] ,
                          [Core].[DimDate].[DOWInMonth] ,
                          [Core].[DimDate].[DayOfYear] ,
                          [Core].[DimDate].[WeekOfYear] ,
                          [Core].[DimDate].[WeekOfMonth] ,
                          [Core].[DimDate].[MonthNumber] ,
                          [Core].[DimDate].[MonthName] ,
                          [Core].[DimDate].[Quarter] ,
                          [Core].[DimDate].[QuarterName] ,
                          [Core].[DimDate].[YearName] ,
                          [Core].[DimDate].[YearNumber] ,
                          [Core].[DimDate].[StandardDate] ,
                          [Core].[DimDate].[IsPublicHoliday] ,
                          [Core].[DimDate].[HolidayText]
                        )
                VALUES  ( REPLACE(CONVERT(NVARCHAR(50), CONVERT(DATE, @Date)),
                                  '-', '') ,
                          @Date ,
                          DATEPART(DAY, @Date) ,
                          SUBSTRING(CONVERT(CHAR(3), DATENAME(DW, @Date)), 1,
                                    3) ,
                          DATEPART(WEEKDAY, @Date) ,
                          CASE WHEN DATEPART(WEEKDAY, @Date) - 1 = 0 THEN 1
                               WHEN DATEPART(WEEKDAY, @Date) - 1 = 6 THEN 7
                               ELSE DATEPART(WEEKDAY, @Date) - 1
                          END ,
                          DATEPART(DAY,
                                   ( DATEADD(S, -1,
                                             DATEADD(MM,
                                                     DATEDIFF(M, 0, @Date) + 1,
                                                     0)) )) ,
                          DATEPART(DAYOFYEAR, @Date) ,
                          DATEPART(WEEK, @Date) ,
                          ( DATEPART(DAY, @Date) / 7 ) + 1 ,
                          DATEPART(MONTH, @Date) ,
                          DATENAME(MONTH, @Date) ,
                          DATEPART(QUARTER, @Date) ,
                          'Quarter ' + CONVERT(NVARCHAR(255), DATEPART(QUARTER,
                                                              @Date)) ,
                          CONVERT(CHAR(4), DATEPART(YEAR, @Date)) ,
                          DATEPART(YEAR, @Date) ,
                          NULL ,
                          NULL ,
                          NULL 
                        );

                SET @Date += 1;

            END

        PRINT 'Updated Table [Shared.DimDate]';

    END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT  INTO Core.ReportingPeriod
        ( [Core].[ReportingPeriod].[ReportingPeriod] ,
          [Core].[ReportingPeriod].[StartDateID] ,
          [Core].[ReportingPeriod].[EndDateID] ,
          [Core].[ReportingPeriod].[FirstCycleDate] ,
          [Core].[ReportingPeriod].[LastCycleDate] ,
          [Core].[ReportingPeriod].[YearName] ,
          [Core].[ReportingPeriod].[YearNumber],
          [Core].[ReportingPeriod].[Summary],
		  [Core].[ReportingPeriod].[BusinessKey]
        )
        SELECT  rc.[ReportingPeriod] ,
                rc.[StartDateID] ,
                rc.[EndDateID] ,
                rc.[FirstCycleDate] ,
                rc.[LastCycleDate] ,
                rc.[YearName] ,
                rc.[YearNumber],
                CONCAT(rc.[YearNumber],' - ',rc.[ReportingPeriod]),
				rc.[ReportingPeriod]
        FROM    [Core].[ReportCycle] AS rc
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.ReportingPeriod
                             WHERE  [Core].[ReportingPeriod].[StartDateID] = rc.StartDateID
                                    AND [Core].[ReportingPeriod].[EndDateID] = rc.EndDateID )



GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [app].[MilestoneType] ON 

GO
INSERT  [app].[MilestoneType]
        ( [app].[MilestoneType].[MilestoneTypeID] ,
          [app].[MilestoneType].[Code] ,
          [app].[MilestoneType].[Name] ,
          [app].[MilestoneType].[Active],
		  [app].[MilestoneType].[BusinessKey]
        )
        SELECT  4 ,
                N'Project' ,
                N'Project' ,
                1,
				N'Project'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.MilestoneType
                             WHERE  [app].[MilestoneType].[MilestoneTypeID] = 4 )
GO
INSERT  [app].[MilestoneType]
        ( [app].[MilestoneType].[MilestoneTypeID] ,
          [app].[MilestoneType].[Code] ,
          [app].[MilestoneType].[Name] ,
          [app].[MilestoneType].[Active],
		  [app].[MilestoneType].[BusinessKey]
        )
        SELECT  5 ,
                N'Activity' ,
                N'Activity' ,
                1,
				N'Activity'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.MilestoneType
                             WHERE  [app].[MilestoneType].[MilestoneTypeID] = 5 )
GO
SET IDENTITY_INSERT [app].[MilestoneType] OFF
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [app].[IndicatorType] ON 

GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  1 ,
                N'Outcome' ,
                N'Outcome' ,
                1,
				N'Outcome'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 1 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  2 ,
                N'Output' ,
                N'Output' ,
                1,
				N'Output'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 2 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  3 ,
                N'SubOutput' ,
                N'SubOutput' ,
                1,
				N'SubOutput'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 3 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  4 ,
                N'Activity' ,
                N'Activity' ,
                1,
				N'Activity'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 4 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  5 ,
                N'Milestone' ,
                N'Milestone' ,
                1,
				N'Milestone'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 5 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  6 ,
                N'OS' ,
                N'Overall Status' ,
                1,
				N'OS'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 6 )
GO



INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  7 ,
                N'PROG' ,
                N'Programme' ,
                1,
				N'PROG'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 7 )
GO

INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  8 ,
                N'SEC' ,
                N'Sector' ,
                1,
				N'SEC'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 8 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  9 ,
                N'SS' ,
                N'SubSector' ,
                1,
				N'SS'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 9 )
GO
INSERT  [app].[IndicatorType]
        ( [app].[IndicatorType].[IndicatorType_ID] ,
          [app].[IndicatorType].[Code] ,
          [app].[IndicatorType].[Name] ,
          [app].[IndicatorType].[Active],
		  [app].[IndicatorType].[BusinessKey]
        )
        SELECT  10,
                N'PRJ' ,
                N'Project' ,
                1,
				N'PRJ'
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   app.IndicatorType
                             WHERE  [app].[IndicatorType].[IndicatorType_ID] = 9 )
GO
SET IDENTITY_INSERT [app].[IndicatorType] OFF
GO

INSERT  INTO [Core].PersonParticipationType
(
          [Core].[PersonParticipationType].[Code] ,
          [Core].[PersonParticipationType].[Name] ,
		  [Core].[PersonParticipationType].[BusinessKey]
        )
        SELECT  Src.Code
				, Src.Name
				, Src.Code
			FROM (
			SELECT 'DIRECT' AS Code,
                'Direct Participant' AS Name
				) Src
                
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.PersonParticipationType
                             WHERE  [Core].[PersonParticipationType].[Code] = Src.Code )
        UNION ALL
        SELECT  Src.Code
				, Src.Name
				, Src.Code
			FROM (
			SELECT 'INDIRECT' AS Code,
                'Indirect Participant' AS Name
				) Src
                
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.PersonParticipationType
                             WHERE  [Core].[PersonParticipationType].[Code] = Src.Code )
        UNION ALL
        SELECT  Src.Code
				, Src.Name
				, Src.Code
			FROM (
			SELECT 'STAFF' AS Code,
                'Care Staff' AS Name
				) Src
                
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.PersonParticipationType
                             WHERE  [Core].[PersonParticipationType].[Code] = Src.Code )

		UNION ALL
        SELECT  Src.Code
				, Src.Name
				, Src.Code
			FROM (
			SELECT 'FACILITATOR' AS Code,
                'Project Facilitator' AS Name
				) Src
                
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.PersonParticipationType
                             WHERE  [Core].[PersonParticipationType].[Code] = Src.Code )
							 
		UNION ALL
        SELECT  Src.Code
				, Src.Name
				, Src.Code
			FROM (
			SELECT 'PARTNER' AS Code,
                'Project Partner Staff' AS Name
				) Src
                
        WHERE   NOT EXISTS ( SELECT 1
                             FROM   Core.PersonParticipationType
                             WHERE  [Core].[PersonParticipationType].[Code] = Src.Code )

/*Insert settings*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'MMBASEURL' AS Code
		, 'MegaMenu Base URL' AS Name 
		, '/' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)
	 

	 INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'BASESITEURL' AS Code
		, 'Fully qualified Base URL' AS Name 
		, 'http://mgs-m6700/sites/Meerkat/' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)


	 INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'Client' AS Code
		, 'Client' AS Name 
		, 'CARE Somalia' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)






/*Insert Forms data*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Multiple choice' as Name
	,'MCQ' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

		
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Radio Button' as Name
	,'RB' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Text response' as Name
	,'TR' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

		
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )
SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'True or false' as Name
	,'BOOL' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

		

				
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )
SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Integer' as Name
	,'INT' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)


				
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )
SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Decimal' as Name
	,'DEC' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)

		
INSERT INTO [forms].[QuestionType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )
SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Count' as Name
	,'CNT' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[QuestionType]
		WHERE Code = q.Code)


INSERT INTO [forms].[RollupType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Sum' as Name
	,'SUM' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[RollupType]
		WHERE Code = q.Code)

GO

INSERT INTO [forms].[RollupType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.TextDescription
FROM
(SELECT 
	 'Average' as Name
	,'AVG' as Code
	,'Arithmetric mean' as TextDescription
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[RollupType]
		WHERE Code = q.Code)
GO

INSERT INTO [forms].[RollupType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Maximum' as Name
	,'MAX' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[RollupType]
		WHERE Code = q.Code)
GO

INSERT INTO [forms].[RollupType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Minimum' as Name
	,'MIN' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[RollupType]
		WHERE Code = q.Code)
GO

INSERT INTO [forms].[RollupType]
           ([Name]
           ,[Code]
           ,[TextDescription]
           )

SELECT Q.Name, Q.Code, Q.Name
FROM
(SELECT 
	 'Count' as Name
	,'CNT' as Code
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [forms].[RollupType]
		WHERE Code = q.Code)

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET identity_insert disagg.gender on


INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
		   ,[BusinessKey]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name, Q.BusinessKey
FROM
(SELECT 
	-1 As Gender_ID
	,'UNK' as Code
	,'Unknown' as Name
	,'UNK' as BusinessKey
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)

INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
		   ,[BusinessKey]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name, Q.BusinessKey
FROM
(SELECT 
	0 As Gender_ID
	,'M' as Code
	,'Male' as Name
	,'M' as BusinessKey
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)
     


INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
		   ,[BusinessKey]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name, Q.BusinessKey
FROM
(SELECT 
	1 As Gender_ID
	,'F' as Code
	,'Female' as Name
	,'F' as BusinessKey
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)



INSERT INTO [disagg].[Gender]
           ([Gender_ID]
		   ,[Code]
           ,[Name]
		   ,[BusinessKey]
           )
SELECT Q.Gender_ID, Q.Code, Q.Name, Q.BusinessKey
FROM
(SELECT 
	2 As Gender_ID
	,'UND' as Code
	,'Undisclosed' as Name
	,'UND' as BusinessKey
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [disagg].[Gender]
		WHERE Code = q.Code)



SET identity_insert disagg.gender off


/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
set identity_insert disagg.age on
insert into disagg.age (age_id)
select rn -1 from (
select row_number() over(order by name) rn

from sys.all_objects
) src
where rn <= 120
and not exists
(SELECT 1 FROM disagg.Age
where age.Age_ID = rn-1)

set identity_insert disagg.age off

/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

SET identity_insert [rpt].CustomReportType on


INSERT INTO [rpt].[CustomReportType]
           ([CustomReportType_ID]
		   ,[Code]
           ,[Name]
		   ,[BusinessKey]
           )
SELECT Q.CustomReportType_ID, Q.Code, Q.Name, Q.BusinessKey
FROM
(SELECT 
	1 As CustomReportType_ID
	,'DNR' as Code
	,'Donor' as Name
	,'DNR' as BusinessKey
) Q
WHERE NOT EXISTS (
	SELECT 1 FROM [rpt].[CustomReportType]
		WHERE Code = q.Code)

SET identity_insert [rpt].CustomReportType off


/* Insert Demo data */
--:r .\DemoData\PostDeploymentScript.Demo.PDS.sql
									

/*Insert CARE Data */
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
--:r .\CareData\Core.OrganizationType.CARE.PDS.sql
--:r .\CareData\Core.Organization.CARE.PDS.sql
--:r .\app.Outcome.CARE.PDS.sql
--:r .\app.Output.CARE.PDS.sql
--:r .\app.SubOutput.CARE.PDS.sql
--:r .\app.IndicatorMilestone.CARE.PDS.sql
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description], [BusinessKey])
     SELECT
          'CONT' ,'Continent' ,'Continent', 'CONT' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='CONT')

INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description], [BusinessKey])
     SELECT
          'CNTRY' ,'Country' ,'Country', 'CNTRY' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='CNTRY')

          
INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description], [BusinessKey])
     SELECT
          'REG' ,'Region' ,'Region', 'REG' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='REG')

          
INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description], [BusinessKey])
     SELECT
          'DIST' ,'District' ,'District', 'DIST' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='DIST')

INSERT INTO [Core].[LocationType]
           ([Code], [Name], [Description], [BusinessKey])
     SELECT
          'VILG' ,'Village' ,'Village', 'VILG' WHERE NOT EXISTS (SELECT 1 FROM [Core].[LocationType] WHERE [Code]  ='VILG')

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
SET IDENTITY_INSERT [Core].[Location] ON
GO

INSERT [Core].[Location] (
    [Location_ID]
    , [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
	, [BusinessKey]
    ) 
    SELECT 1
    , 'SOM' Code
    , 'Somaliland' [Name]
    , 137600
    , 3500000
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'CNTRY')
    , NULL
    , NULL [Geog]
	, 'SOM'
    WHERE NOT EXISTS (
    SELECT 1 FROM [Core].[Location] WHERE Code = 'SOM'
    )

	INSERT [Core].[Location] (
    [Location_ID]
    , [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
	, [BusinessKey]
    ) 
    SELECT 2
    , 'MOG' Code
    , 'Mogadishu' [Name]
    , 1637
    , 1530000
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'CNTRY')
    , NULL
    , NULL [Geog]
	, 'MOG'
    WHERE NOT EXISTS (
    SELECT 1 FROM [Core].[Location] WHERE Code = 'MOG'
    )

	INSERT [Core].[Location] (
    [Location_ID]
    , [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
	, [BusinessKey]
    ) 

    SELECT 3
    , 'PUNT' Code
    , 'Puntland' [Name]
    , 212510
    , 3900000
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'CNTRY')
    , NULL
    , NULL [Geog]
	, 'PUNT'
    WHERE NOT EXISTS (
    SELECT 1 FROM [Core].[Location] WHERE Code = 'PUNT'
    )

SET IDENTITY_INSERT [Core].[Location] OFF
GO

INSERT [Core].[Location] (
    [Code]
    , [Name]
    , [AreaKM]
    , [Population]
    , [LocationType_ID]
    , [ParentLocation_ID]
    , [Geog]
	, [BusinessKey]
    ) 
    SELECT '1' Code
    , 'Lascanood' [Name]
    , NULL 
    , NULL
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '1'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '1' 
    )	
    

UNION ALL
SELECT '2' Code
    , 'Ainabo' [Name]
    , NULL 
    , NULL
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '2'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '2' 
    )	
    

UNION ALL
SELECT '3' Code
    , 'Odweyne' [Name]
    , 12245 
    , 1109735
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '3'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '3' 
    )	
    

UNION ALL
SELECT '4' Code
    , 'Burao' [Name]
    , 35375 
    , 240075
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '4'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '4' 
    )	
    

UNION ALL
SELECT '5' Code
    , 'Badhan' [Name]
    , 6497 
    , 101539
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '5'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '5' 
    )	
    

UNION ALL
SELECT '6' Code
    , 'Erigavo' [Name]
    , 17083 
    , 284657
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '6'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '6' 
    )	
    

UNION ALL
SELECT '7' Code
    , 'El-afweyn' [Name]
    , 45720 
    , 623060
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'SOM')
    , NULL [Geog]
	, '7'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '7' 
    )	
    

UNION ALL
SELECT '8' Code
    , 'Waaberi' [Name]
    , 55840 
    , 661941
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'MOG')
    , NULL [Geog]
	, '8'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '8' 
    )	
    

UNION ALL
SELECT '9' Code
    , 'Wadajir' [Name]
    , 25797 
    , 1025756
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'MOG')
    , NULL [Geog]
	, '9'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '9' 
    )	
    

UNION ALL
SELECT '10' Code
    , 'Hodan' [Name]
    , 66923 
    , 291166
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'MOG')
    , NULL [Geog]
	, '10'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '10' 
    )	
    

UNION ALL
SELECT '11' Code
    , 'Garowe' [Name]
    , 25336 
    , 143294
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '11'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '11' 
    )	
    

UNION ALL
SELECT '12' Code
    , 'Jalam' [Name]
    , 5127 
    , 1356301
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '12'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '12' 
    )	
    

UNION ALL
SELECT '13' Code
    , 'Godobjiran' [Name]
    , 2409 
    , 365330
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '13'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '13' 
    )	
    

UNION ALL
SELECT '14' Code
    , 'Galkacyo' [Name]
    , 2555 
    , 516212
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '14'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '14' 
    )	
    

UNION ALL
SELECT '15' Code
    , 'Gardo' [Name]
    , 24385 
    , 1012709
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '15'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '15' 
    )	
    

UNION ALL
SELECT '16' Code
    , 'Bosasso' [Name]
    , 5952 
    , 1098584
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '16'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '16' 
    )	
    

UNION ALL
SELECT '18' Code
    , 'Taleh' [Name]
    , 3107 
    , 596268
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '18'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '18' 
    )	
    

UNION ALL
SELECT '19' Code
    , 'Kalabyer' [Name]
    , 2361 
    , 693558
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '19'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '19' 
    )	
    

UNION ALL
SELECT '20' Code
    , 'Baran' [Name]
    , 1205 
    , 528054
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '20'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '20' 
    )	
    

UNION ALL
SELECT '21' Code
    , 'Buraan' [Name]
    , 2325 
    , 942581
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'PUNT')
    , NULL [Geog]
	, '21'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '21' 
    )	
    

UNION ALL
SELECT '22' Code
    , 'Hinglool' [Name]
    , 2449 
    , 1623282
    ,(SELECT LocationType_ID FROM [Core].[LocationType] WHERE [Code] = 'DIST')
    , (SELECT Location_ID FROM [Core].[Location] WHERE [Code] = 'KE')
    , NULL [Geog]
	, '22'
    WHERE NOT EXISTS (
        SELECT 1 FROM [Core].[Location] WHERE [Code] = '22' 
    )	   

    /*Location Insert end*/
    /*Update Geography*/

/*IF (CHARINDEX(CONVERT(VARCHAR, SERVERPROPERTY('edition')), N'Express') > -1)
BEGIN    
IF NOT EXISTs (select 1 FROM sys.Databases where Name = 'KenyaShapes')
    
    RAISERROR ('You must restore the KenyaShapes DB to get the geography shapes, obtain it at https://www.dropbox.com/s/jtb9ohpuov51wkt/KenyaShapes.bak', -- Message text.
               18, -- Severity.
               1 -- State.
               );

UPDATE [Core].[Location]
SET Geog = (SELECT Geography::UnionAggregate(geom)
  FROM [KenyaShapes].[dbo].[Counties])
  WHERE [Code] = 'KE'

UPDATE [Core].[Location]
SET Geog = geom
FROM [KenyaShapes].[dbo].[Counties]
  WHERE  [Code] = CAST(COUNTY_COD as varchar(10))
END*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [app].[Programme]
           ([Code]
           ,[LongName]
           ,[BusinessKey]
           ,[ShortName]
		   ,[ProgrammeSiteName]
           ,[TextDescription]


)
SELECT		src.[Code]
           ,src.[LongName]
           ,src.[Code]
           ,src.[ShortName]
           ,src.[ProgrammeSiteName] 
           ,src.[TextDescription]

FROM (
	SELECT 'RVW' AS Code
		,'Emergency Response Programme' As LongName
		,'Emergency Response' as ShortName
		,'program1' as ProgrammeSiteName
		,'The Emergency Response Program (ERP) provides direct humanitarian relief to communities affected by drought and conflict across Somalia.' As TextDescription
	) Src
	WHERE NOT EXISTS (SELECT 1 FROM app.Programme P WHERE P.BusinessKey = Src.Code)

UNION ALL

SELECT		src.[Code]
           ,src.[LongName]
           ,src.[Code]
           ,src.[ShortName]
           ,src.[ProgrammeSiteName] 
           ,src.[TextDescription]

FROM (
	SELECT 'UYP' AS Code
		,'Urban Youth Programme' As LongName
		,'Urban Youth' as ShortName
		,'program2' as ProgrammeSiteName
		,'The Urban Youth Program (UYP) focuses on job creation and livelihood opportunities for poor youth through e.g. secondary education, vocational training, small business development, and microfinance.' As TextDescription
	) Src
	WHERE NOT EXISTS (SELECT 1 FROM app.Programme P WHERE P.BusinessKey = Src.Code)

UNION ALL
SELECT		src.[Code]
           ,src.[LongName]
           ,src.[Code]
           ,src.[ShortName]
           ,src.[ProgrammeSiteName] 
           ,src.[TextDescription]

FROM (
	SELECT 'RVW' AS Code
		,'Rural Vulnerable Women Programme' As LongName
		,'Rural Women' as ShortName
		,'program3' as ProgrammeSiteName
		,'The Rural Vulnerable Women’s Program (RVWP) supports poor rural women and girls in addressing long term underlying causes of poverty and vulnerability, addressing social, economic, cultural and political obstacles to positive change. We help women and girls improve their economic status, access education and support them to play a greater role in local leadership and conflict resolution.' As TextDescription
	) Src
	WHERE NOT EXISTS (SELECT 1 FROM app.Programme P WHERE P.BusinessKey = Src.Code)

UNION ALL


SELECT		src.[Code]
           ,src.[LongName]
           ,src.[Code]
           ,src.[ShortName]
           ,src.[ProgrammeSiteName] 
           ,src.[TextDescription]

FROM (
	SELECT 'CO' AS Code
		,'Country Office' As LongName
		,'Country Office' as ShortName
		,'program4' as ProgrammeSiteName
		,'The Country Office aggregates information from all programme sites.' As TextDescription
	) Src
	WHERE NOT EXISTS (SELECT 1 FROM app.Programme P WHERE P.BusinessKey = Src.Code)
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'MMBASEURL' AS Code
		, 'MegaMenu Base URL' AS Name 
		, '/' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)
	 

	 INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'BASESITEURL' AS Code
		, 'Fully qualified Base URL' AS Name 
		, 'http://carer03.cloudapp.net/' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)


	 INSERT INTO [settings].[GlobalSettings]
           ([Code]
           ,[Name]
           ,[Value]
           )
     SELECT 
	 Code, Name, Value 
	 FROM (
		SELECT 
		'Client' AS Code
		, 'Client' AS Name 
		, 'CARE Somalia' as Value)
		Src
	 WHERE NOT EXISTS 
	 (SELECT 1 FROM settings.GlobalSettings
	 WHERE Src.Code = GlobalSettings.Code)



						

--:r .\InternalTest\PostDeploymentScript.InternalTest.PDS.sql	


/*end Insert data*/

GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [app].[Indicator] WITH CHECK CHECK CONSTRAINT [FK_Indicator_IndicatorType];

ALTER TABLE [RBM].[PeopleReachedValues] WITH CHECK CHECK CONSTRAINT [FK_PeopleReachedValues_PersonParticipationType];


GO
PRINT N'Update complete.';


GO
